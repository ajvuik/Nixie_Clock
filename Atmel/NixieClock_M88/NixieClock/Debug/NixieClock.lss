
NixieClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00002066  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ff2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000103  00800100  00800100  00002066  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002066  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002098  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  000020d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002aed  00000000  00000000  0000241c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf5  00000000  00000000  00004f09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002668  00000000  00000000  00005afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000065c  00000000  00000000  00008168  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cb6  00000000  00000000  000087c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e2a  00000000  00000000  0000947a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000a2a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fa c0       	rjmp	.+500    	; 0x1f6 <__ctors_end>
       2:	09 c1       	rjmp	.+530    	; 0x216 <__bad_interrupt>
       4:	08 c1       	rjmp	.+528    	; 0x216 <__bad_interrupt>
       6:	07 c1       	rjmp	.+526    	; 0x216 <__bad_interrupt>
       8:	06 c1       	rjmp	.+524    	; 0x216 <__bad_interrupt>
       a:	05 c1       	rjmp	.+522    	; 0x216 <__bad_interrupt>
       c:	04 c1       	rjmp	.+520    	; 0x216 <__bad_interrupt>
       e:	03 c1       	rjmp	.+518    	; 0x216 <__bad_interrupt>
      10:	02 c1       	rjmp	.+516    	; 0x216 <__bad_interrupt>
      12:	01 c1       	rjmp	.+514    	; 0x216 <__bad_interrupt>
      14:	00 c1       	rjmp	.+512    	; 0x216 <__bad_interrupt>
      16:	ff c0       	rjmp	.+510    	; 0x216 <__bad_interrupt>
      18:	fe c0       	rjmp	.+508    	; 0x216 <__bad_interrupt>
      1a:	fd c0       	rjmp	.+506    	; 0x216 <__bad_interrupt>
      1c:	a4 cf       	rjmp	.-184    	; 0xffffff66 <__eeprom_end+0xff7eff66>
      1e:	fb c0       	rjmp	.+502    	; 0x216 <__bad_interrupt>
      20:	fa c0       	rjmp	.+500    	; 0x216 <__bad_interrupt>
      22:	f9 c0       	rjmp	.+498    	; 0x216 <__bad_interrupt>
      24:	f8 c0       	rjmp	.+496    	; 0x216 <__bad_interrupt>
      26:	f7 c0       	rjmp	.+494    	; 0x216 <__bad_interrupt>
      28:	f6 c0       	rjmp	.+492    	; 0x216 <__bad_interrupt>
      2a:	f5 c0       	rjmp	.+490    	; 0x216 <__bad_interrupt>
      2c:	f4 c0       	rjmp	.+488    	; 0x216 <__bad_interrupt>
      2e:	f3 c0       	rjmp	.+486    	; 0x216 <__bad_interrupt>
      30:	f2 c0       	rjmp	.+484    	; 0x216 <__bad_interrupt>
      32:	f1 c0       	rjmp	.+482    	; 0x216 <__bad_interrupt>
      34:	25 c2       	rjmp	.+1098   	; 0x480 <DS1307_Loop+0x1e>
      36:	3b c2       	rjmp	.+1142   	; 0x4ae <DS1307_Loop+0x4c>
      38:	4e c2       	rjmp	.+1180   	; 0x4d6 <DS1307_Loop+0x74>
      3a:	9b c2       	rjmp	.+1334   	; 0x572 <__stack+0x73>
      3c:	d9 c2       	rjmp	.+1458   	; 0x5f0 <__stack+0xf1>
      3e:	41 c3       	rjmp	.+1666   	; 0x6c2 <__stack+0x1c3>
      40:	19 c5       	rjmp	.+2610   	; 0xa74 <__stack+0x575>
      42:	18 c5       	rjmp	.+2608   	; 0xa74 <__stack+0x575>
      44:	17 c5       	rjmp	.+2606   	; 0xa74 <__stack+0x575>
      46:	16 c5       	rjmp	.+2604   	; 0xa74 <__stack+0x575>
      48:	15 c5       	rjmp	.+2602   	; 0xa74 <__stack+0x575>
      4a:	82 c3       	rjmp	.+1796   	; 0x750 <__stack+0x251>
      4c:	d6 c3       	rjmp	.+1964   	; 0x7fa <__stack+0x2fb>
      4e:	09 c4       	rjmp	.+2066   	; 0x862 <__stack+0x363>
      50:	68 c4       	rjmp	.+2256   	; 0x922 <__stack+0x423>
      52:	10 c5       	rjmp	.+2592   	; 0xa74 <__stack+0x575>
      54:	0f c5       	rjmp	.+2590   	; 0xa74 <__stack+0x575>
      56:	0e c5       	rjmp	.+2588   	; 0xa74 <__stack+0x575>
      58:	0d c5       	rjmp	.+2586   	; 0xa74 <__stack+0x575>
      5a:	0c c5       	rjmp	.+2584   	; 0xa74 <__stack+0x575>
      5c:	0b c5       	rjmp	.+2582   	; 0xa74 <__stack+0x575>
      5e:	9b c4       	rjmp	.+2358   	; 0x996 <__stack+0x497>
      60:	c5 c4       	rjmp	.+2442   	; 0x9ec <__stack+0x4ed>
      62:	08 c5       	rjmp	.+2576   	; 0xa74 <__stack+0x575>
      64:	07 c5       	rjmp	.+2574   	; 0xa74 <__stack+0x575>
      66:	06 c5       	rjmp	.+2572   	; 0xa74 <__stack+0x575>
      68:	05 c5       	rjmp	.+2570   	; 0xa74 <__stack+0x575>
      6a:	04 c5       	rjmp	.+2568   	; 0xa74 <__stack+0x575>
      6c:	03 c5       	rjmp	.+2566   	; 0xa74 <__stack+0x575>
      6e:	02 c5       	rjmp	.+2564   	; 0xa74 <__stack+0x575>
      70:	01 c5       	rjmp	.+2562   	; 0xa74 <__stack+0x575>
      72:	00 c5       	rjmp	.+2560   	; 0xa74 <__stack+0x575>
      74:	ff c4       	rjmp	.+2558   	; 0xa74 <__stack+0x575>
      76:	fe c4       	rjmp	.+2556   	; 0xa74 <__stack+0x575>
      78:	fd c4       	rjmp	.+2554   	; 0xa74 <__stack+0x575>
      7a:	fc c4       	rjmp	.+2552   	; 0xa74 <__stack+0x575>
      7c:	fb c4       	rjmp	.+2550   	; 0xa74 <__stack+0x575>
      7e:	fa c4       	rjmp	.+2548   	; 0xa74 <__stack+0x575>
      80:	f9 c4       	rjmp	.+2546   	; 0xa74 <__stack+0x575>
      82:	f8 c4       	rjmp	.+2544   	; 0xa74 <__stack+0x575>
      84:	f7 c4       	rjmp	.+2542   	; 0xa74 <__stack+0x575>
      86:	f6 c4       	rjmp	.+2540   	; 0xa74 <__stack+0x575>
      88:	f5 c4       	rjmp	.+2538   	; 0xa74 <__stack+0x575>
      8a:	f4 c4       	rjmp	.+2536   	; 0xa74 <__stack+0x575>
      8c:	f3 c4       	rjmp	.+2534   	; 0xa74 <__stack+0x575>
      8e:	f2 c4       	rjmp	.+2532   	; 0xa74 <__stack+0x575>
      90:	f1 c4       	rjmp	.+2530   	; 0xa74 <__stack+0x575>
      92:	f0 c4       	rjmp	.+2528   	; 0xa74 <__stack+0x575>
      94:	ef c4       	rjmp	.+2526   	; 0xa74 <__stack+0x575>
      96:	ee c4       	rjmp	.+2524   	; 0xa74 <__stack+0x575>
      98:	ed c4       	rjmp	.+2522   	; 0xa74 <__stack+0x575>
      9a:	ec c4       	rjmp	.+2520   	; 0xa74 <__stack+0x575>
      9c:	eb c4       	rjmp	.+2518   	; 0xa74 <__stack+0x575>
      9e:	ea c4       	rjmp	.+2516   	; 0xa74 <__stack+0x575>
      a0:	e9 c4       	rjmp	.+2514   	; 0xa74 <__stack+0x575>
      a2:	e8 c4       	rjmp	.+2512   	; 0xa74 <__stack+0x575>
      a4:	e7 c4       	rjmp	.+2510   	; 0xa74 <__stack+0x575>
      a6:	e6 c4       	rjmp	.+2508   	; 0xa74 <__stack+0x575>
      a8:	e5 c4       	rjmp	.+2506   	; 0xa74 <__stack+0x575>
      aa:	e4 c4       	rjmp	.+2504   	; 0xa74 <__stack+0x575>
      ac:	e3 c4       	rjmp	.+2502   	; 0xa74 <__stack+0x575>
      ae:	e2 c4       	rjmp	.+2500   	; 0xa74 <__stack+0x575>
      b0:	e1 c4       	rjmp	.+2498   	; 0xa74 <__stack+0x575>
      b2:	e0 c4       	rjmp	.+2496   	; 0xa74 <__stack+0x575>
      b4:	df c4       	rjmp	.+2494   	; 0xa74 <__stack+0x575>
      b6:	de c4       	rjmp	.+2492   	; 0xa74 <__stack+0x575>
      b8:	dd c4       	rjmp	.+2490   	; 0xa74 <__stack+0x575>
      ba:	dc c4       	rjmp	.+2488   	; 0xa74 <__stack+0x575>
      bc:	db c4       	rjmp	.+2486   	; 0xa74 <__stack+0x575>
      be:	da c4       	rjmp	.+2484   	; 0xa74 <__stack+0x575>
      c0:	d9 c4       	rjmp	.+2482   	; 0xa74 <__stack+0x575>
      c2:	d8 c4       	rjmp	.+2480   	; 0xa74 <__stack+0x575>
      c4:	d7 c4       	rjmp	.+2478   	; 0xa74 <__stack+0x575>
      c6:	d6 c4       	rjmp	.+2476   	; 0xa74 <__stack+0x575>
      c8:	d5 c4       	rjmp	.+2474   	; 0xa74 <__stack+0x575>
      ca:	d4 c4       	rjmp	.+2472   	; 0xa74 <__stack+0x575>
      cc:	d3 c4       	rjmp	.+2470   	; 0xa74 <__stack+0x575>
      ce:	d2 c4       	rjmp	.+2468   	; 0xa74 <__stack+0x575>
      d0:	d1 c4       	rjmp	.+2466   	; 0xa74 <__stack+0x575>
      d2:	d0 c4       	rjmp	.+2464   	; 0xa74 <__stack+0x575>
      d4:	cf c4       	rjmp	.+2462   	; 0xa74 <__stack+0x575>
      d6:	ce c4       	rjmp	.+2460   	; 0xa74 <__stack+0x575>
      d8:	cd c4       	rjmp	.+2458   	; 0xa74 <__stack+0x575>
      da:	cc c4       	rjmp	.+2456   	; 0xa74 <__stack+0x575>
      dc:	cb c4       	rjmp	.+2454   	; 0xa74 <__stack+0x575>
      de:	ca c4       	rjmp	.+2452   	; 0xa74 <__stack+0x575>
      e0:	c9 c4       	rjmp	.+2450   	; 0xa74 <__stack+0x575>
      e2:	c8 c4       	rjmp	.+2448   	; 0xa74 <__stack+0x575>
      e4:	c7 c4       	rjmp	.+2446   	; 0xa74 <__stack+0x575>
      e6:	c6 c4       	rjmp	.+2444   	; 0xa74 <__stack+0x575>
      e8:	c5 c4       	rjmp	.+2442   	; 0xa74 <__stack+0x575>
      ea:	c4 c4       	rjmp	.+2440   	; 0xa74 <__stack+0x575>
      ec:	c3 c4       	rjmp	.+2438   	; 0xa74 <__stack+0x575>
      ee:	c2 c4       	rjmp	.+2436   	; 0xa74 <__stack+0x575>
      f0:	c1 c4       	rjmp	.+2434   	; 0xa74 <__stack+0x575>
      f2:	c0 c4       	rjmp	.+2432   	; 0xa74 <__stack+0x575>
      f4:	bf c4       	rjmp	.+2430   	; 0xa74 <__stack+0x575>
      f6:	be c4       	rjmp	.+2428   	; 0xa74 <__stack+0x575>
      f8:	bd c4       	rjmp	.+2426   	; 0xa74 <__stack+0x575>
      fa:	a2 c4       	rjmp	.+2372   	; 0xa40 <__stack+0x541>
      fc:	fa c5       	rjmp	.+3060   	; 0xcf2 <I2C_Loop+0x20>
      fe:	1c c6       	rjmp	.+3128   	; 0xd38 <I2C_Loop+0x66>
     100:	32 c6       	rjmp	.+3172   	; 0xd66 <I2C_Loop+0x94>
     102:	38 c6       	rjmp	.+3184   	; 0xd74 <I2C_Loop+0xa2>
     104:	4f c6       	rjmp	.+3230   	; 0xda4 <I2C_Loop+0xd2>
     106:	82 c6       	rjmp	.+3332   	; 0xe0c <I2C_Loop+0x13a>
     108:	bf c7       	rjmp	.+3966   	; 0x1088 <I2C_Loop+0x3b6>
     10a:	be c7       	rjmp	.+3964   	; 0x1088 <I2C_Loop+0x3b6>
     10c:	bd c7       	rjmp	.+3962   	; 0x1088 <I2C_Loop+0x3b6>
     10e:	bc c7       	rjmp	.+3960   	; 0x1088 <I2C_Loop+0x3b6>
     110:	c4 c6       	rjmp	.+3464   	; 0xe9a <I2C_Loop+0x1c8>
     112:	03 c7       	rjmp	.+3590   	; 0xf1a <I2C_Loop+0x248>
     114:	40 c7       	rjmp	.+3712   	; 0xf96 <I2C_Loop+0x2c4>
     116:	6b c7       	rjmp	.+3798   	; 0xfee <I2C_Loop+0x31c>
     118:	b7 c7       	rjmp	.+3950   	; 0x1088 <I2C_Loop+0x3b6>
     11a:	b6 c7       	rjmp	.+3948   	; 0x1088 <I2C_Loop+0x3b6>
     11c:	b5 c7       	rjmp	.+3946   	; 0x1088 <I2C_Loop+0x3b6>
     11e:	b4 c7       	rjmp	.+3944   	; 0x1088 <I2C_Loop+0x3b6>
     120:	b3 c7       	rjmp	.+3942   	; 0x1088 <I2C_Loop+0x3b6>
     122:	b2 c7       	rjmp	.+3940   	; 0x1088 <I2C_Loop+0x3b6>
     124:	b1 c7       	rjmp	.+3938   	; 0x1088 <I2C_Loop+0x3b6>
     126:	b0 c7       	rjmp	.+3936   	; 0x1088 <I2C_Loop+0x3b6>
     128:	af c7       	rjmp	.+3934   	; 0x1088 <I2C_Loop+0x3b6>
     12a:	ae c7       	rjmp	.+3932   	; 0x1088 <I2C_Loop+0x3b6>
     12c:	ad c7       	rjmp	.+3930   	; 0x1088 <I2C_Loop+0x3b6>
     12e:	ac c7       	rjmp	.+3928   	; 0x1088 <I2C_Loop+0x3b6>
     130:	ab c7       	rjmp	.+3926   	; 0x1088 <I2C_Loop+0x3b6>
     132:	aa c7       	rjmp	.+3924   	; 0x1088 <I2C_Loop+0x3b6>
     134:	a9 c7       	rjmp	.+3922   	; 0x1088 <I2C_Loop+0x3b6>
     136:	a8 c7       	rjmp	.+3920   	; 0x1088 <I2C_Loop+0x3b6>
     138:	a7 c7       	rjmp	.+3918   	; 0x1088 <I2C_Loop+0x3b6>
     13a:	a6 c7       	rjmp	.+3916   	; 0x1088 <I2C_Loop+0x3b6>
     13c:	a5 c7       	rjmp	.+3914   	; 0x1088 <I2C_Loop+0x3b6>
     13e:	a4 c7       	rjmp	.+3912   	; 0x1088 <I2C_Loop+0x3b6>
     140:	a3 c7       	rjmp	.+3910   	; 0x1088 <I2C_Loop+0x3b6>
     142:	a2 c7       	rjmp	.+3908   	; 0x1088 <I2C_Loop+0x3b6>
     144:	a1 c7       	rjmp	.+3906   	; 0x1088 <I2C_Loop+0x3b6>
     146:	a0 c7       	rjmp	.+3904   	; 0x1088 <I2C_Loop+0x3b6>
     148:	9f c7       	rjmp	.+3902   	; 0x1088 <I2C_Loop+0x3b6>
     14a:	9e c7       	rjmp	.+3900   	; 0x1088 <I2C_Loop+0x3b6>
     14c:	9d c7       	rjmp	.+3898   	; 0x1088 <I2C_Loop+0x3b6>
     14e:	9c c7       	rjmp	.+3896   	; 0x1088 <I2C_Loop+0x3b6>
     150:	9b c7       	rjmp	.+3894   	; 0x1088 <I2C_Loop+0x3b6>
     152:	9a c7       	rjmp	.+3892   	; 0x1088 <I2C_Loop+0x3b6>
     154:	99 c7       	rjmp	.+3890   	; 0x1088 <I2C_Loop+0x3b6>
     156:	98 c7       	rjmp	.+3888   	; 0x1088 <I2C_Loop+0x3b6>
     158:	97 c7       	rjmp	.+3886   	; 0x1088 <I2C_Loop+0x3b6>
     15a:	96 c7       	rjmp	.+3884   	; 0x1088 <I2C_Loop+0x3b6>
     15c:	95 c7       	rjmp	.+3882   	; 0x1088 <I2C_Loop+0x3b6>
     15e:	94 c7       	rjmp	.+3880   	; 0x1088 <I2C_Loop+0x3b6>
     160:	93 c7       	rjmp	.+3878   	; 0x1088 <I2C_Loop+0x3b6>
     162:	92 c7       	rjmp	.+3876   	; 0x1088 <I2C_Loop+0x3b6>
     164:	91 c7       	rjmp	.+3874   	; 0x1088 <I2C_Loop+0x3b6>
     166:	90 c7       	rjmp	.+3872   	; 0x1088 <I2C_Loop+0x3b6>
     168:	8f c7       	rjmp	.+3870   	; 0x1088 <I2C_Loop+0x3b6>
     16a:	8e c7       	rjmp	.+3868   	; 0x1088 <I2C_Loop+0x3b6>
     16c:	8d c7       	rjmp	.+3866   	; 0x1088 <I2C_Loop+0x3b6>
     16e:	8c c7       	rjmp	.+3864   	; 0x1088 <I2C_Loop+0x3b6>
     170:	8b c7       	rjmp	.+3862   	; 0x1088 <I2C_Loop+0x3b6>
     172:	8a c7       	rjmp	.+3860   	; 0x1088 <I2C_Loop+0x3b6>
     174:	89 c7       	rjmp	.+3858   	; 0x1088 <I2C_Loop+0x3b6>
     176:	88 c7       	rjmp	.+3856   	; 0x1088 <I2C_Loop+0x3b6>
     178:	87 c7       	rjmp	.+3854   	; 0x1088 <I2C_Loop+0x3b6>
     17a:	86 c7       	rjmp	.+3852   	; 0x1088 <I2C_Loop+0x3b6>
     17c:	85 c7       	rjmp	.+3850   	; 0x1088 <I2C_Loop+0x3b6>
     17e:	84 c7       	rjmp	.+3848   	; 0x1088 <I2C_Loop+0x3b6>
     180:	83 c7       	rjmp	.+3846   	; 0x1088 <I2C_Loop+0x3b6>
     182:	82 c7       	rjmp	.+3844   	; 0x1088 <I2C_Loop+0x3b6>
     184:	81 c7       	rjmp	.+3842   	; 0x1088 <I2C_Loop+0x3b6>
     186:	80 c7       	rjmp	.+3840   	; 0x1088 <I2C_Loop+0x3b6>
     188:	7f c7       	rjmp	.+3838   	; 0x1088 <I2C_Loop+0x3b6>
     18a:	7e c7       	rjmp	.+3836   	; 0x1088 <I2C_Loop+0x3b6>
     18c:	7d c7       	rjmp	.+3834   	; 0x1088 <I2C_Loop+0x3b6>
     18e:	7c c7       	rjmp	.+3832   	; 0x1088 <I2C_Loop+0x3b6>
     190:	7b c7       	rjmp	.+3830   	; 0x1088 <I2C_Loop+0x3b6>
     192:	7a c7       	rjmp	.+3828   	; 0x1088 <I2C_Loop+0x3b6>
     194:	79 c7       	rjmp	.+3826   	; 0x1088 <I2C_Loop+0x3b6>
     196:	78 c7       	rjmp	.+3824   	; 0x1088 <I2C_Loop+0x3b6>
     198:	77 c7       	rjmp	.+3822   	; 0x1088 <I2C_Loop+0x3b6>
     19a:	76 c7       	rjmp	.+3820   	; 0x1088 <I2C_Loop+0x3b6>
     19c:	75 c7       	rjmp	.+3818   	; 0x1088 <I2C_Loop+0x3b6>
     19e:	74 c7       	rjmp	.+3816   	; 0x1088 <I2C_Loop+0x3b6>
     1a0:	73 c7       	rjmp	.+3814   	; 0x1088 <I2C_Loop+0x3b6>
     1a2:	72 c7       	rjmp	.+3812   	; 0x1088 <I2C_Loop+0x3b6>
     1a4:	71 c7       	rjmp	.+3810   	; 0x1088 <I2C_Loop+0x3b6>
     1a6:	70 c7       	rjmp	.+3808   	; 0x1088 <I2C_Loop+0x3b6>
     1a8:	6f c7       	rjmp	.+3806   	; 0x1088 <I2C_Loop+0x3b6>
     1aa:	6e c7       	rjmp	.+3804   	; 0x1088 <I2C_Loop+0x3b6>
     1ac:	6d c7       	rjmp	.+3802   	; 0x1088 <I2C_Loop+0x3b6>
     1ae:	6c c7       	rjmp	.+3800   	; 0x1088 <I2C_Loop+0x3b6>
     1b0:	6b c7       	rjmp	.+3798   	; 0x1088 <I2C_Loop+0x3b6>
     1b2:	6a c7       	rjmp	.+3796   	; 0x1088 <I2C_Loop+0x3b6>
     1b4:	69 c7       	rjmp	.+3794   	; 0x1088 <I2C_Loop+0x3b6>
     1b6:	68 c7       	rjmp	.+3792   	; 0x1088 <I2C_Loop+0x3b6>
     1b8:	67 c7       	rjmp	.+3790   	; 0x1088 <I2C_Loop+0x3b6>
     1ba:	66 c7       	rjmp	.+3788   	; 0x1088 <I2C_Loop+0x3b6>
     1bc:	65 c7       	rjmp	.+3786   	; 0x1088 <I2C_Loop+0x3b6>
     1be:	64 c7       	rjmp	.+3784   	; 0x1088 <I2C_Loop+0x3b6>
     1c0:	63 c7       	rjmp	.+3782   	; 0x1088 <I2C_Loop+0x3b6>
     1c2:	62 c7       	rjmp	.+3780   	; 0x1088 <I2C_Loop+0x3b6>
     1c4:	5f c7       	rjmp	.+3774   	; 0x1084 <I2C_Loop+0x3b2>
     1c6:	90 ca       	rjmp	.-2784   	; 0xfffff6e8 <__eeprom_end+0xff7ef6e8>
     1c8:	98 ca       	rjmp	.-2768   	; 0xfffff6fa <__eeprom_end+0xff7ef6fa>
     1ca:	9f ca       	rjmp	.-2754   	; 0xfffff70a <__eeprom_end+0xff7ef70a>
     1cc:	0a cb       	rjmp	.-2540   	; 0xfffff7e2 <__eeprom_end+0xff7ef7e2>
     1ce:	09 cb       	rjmp	.-2542   	; 0xfffff7e2 <__eeprom_end+0xff7ef7e2>
     1d0:	08 cb       	rjmp	.-2544   	; 0xfffff7e2 <__eeprom_end+0xff7ef7e2>
     1d2:	07 cb       	rjmp	.-2546   	; 0xfffff7e2 <__eeprom_end+0xff7ef7e2>
     1d4:	06 cb       	rjmp	.-2548   	; 0xfffff7e2 <__eeprom_end+0xff7ef7e2>
     1d6:	05 cb       	rjmp	.-2550   	; 0xfffff7e2 <__eeprom_end+0xff7ef7e2>
     1d8:	04 cb       	rjmp	.-2552   	; 0xfffff7e2 <__eeprom_end+0xff7ef7e2>
     1da:	9f ca       	rjmp	.-2754   	; 0xfffff71a <__eeprom_end+0xff7ef71a>
     1dc:	a7 ca       	rjmp	.-2738   	; 0xfffff72c <__eeprom_end+0xff7ef72c>
     1de:	ae ca       	rjmp	.-2724   	; 0xfffff73c <__eeprom_end+0xff7ef73c>
     1e0:	00 cb       	rjmp	.-2560   	; 0xfffff7e2 <__eeprom_end+0xff7ef7e2>
     1e2:	ff ca       	rjmp	.-2562   	; 0xfffff7e2 <__eeprom_end+0xff7ef7e2>
     1e4:	fe ca       	rjmp	.-2564   	; 0xfffff7e2 <__eeprom_end+0xff7ef7e2>
     1e6:	fd ca       	rjmp	.-2566   	; 0xfffff7e2 <__eeprom_end+0xff7ef7e2>
     1e8:	fc ca       	rjmp	.-2568   	; 0xfffff7e2 <__eeprom_end+0xff7ef7e2>
     1ea:	fb ca       	rjmp	.-2570   	; 0xfffff7e2 <__eeprom_end+0xff7ef7e2>
     1ec:	c7 ca       	rjmp	.-2674   	; 0xfffff77c <__eeprom_end+0xff7ef77c>
     1ee:	d4 ca       	rjmp	.-2648   	; 0xfffff798 <__eeprom_end+0xff7ef798>
     1f0:	dc ca       	rjmp	.-2632   	; 0xfffff7aa <__eeprom_end+0xff7ef7aa>
     1f2:	e4 ca       	rjmp	.-2616   	; 0xfffff7bc <__eeprom_end+0xff7ef7bc>
     1f4:	ed ca       	rjmp	.-2598   	; 0xfffff7d0 <__eeprom_end+0xff7ef7d0>

000001f6 <__ctors_end>:
     1f6:	11 24       	eor	r1, r1
     1f8:	1f be       	out	0x3f, r1	; 63
     1fa:	cf ef       	ldi	r28, 0xFF	; 255
     1fc:	d4 e0       	ldi	r29, 0x04	; 4
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	cd bf       	out	0x3d, r28	; 61

00000202 <__do_clear_bss>:
     202:	22 e0       	ldi	r18, 0x02	; 2
     204:	a0 e0       	ldi	r26, 0x00	; 0
     206:	b1 e0       	ldi	r27, 0x01	; 1
     208:	01 c0       	rjmp	.+2      	; 0x20c <.do_clear_bss_start>

0000020a <.do_clear_bss_loop>:
     20a:	1d 92       	st	X+, r1

0000020c <.do_clear_bss_start>:
     20c:	a3 30       	cpi	r26, 0x03	; 3
     20e:	b2 07       	cpc	r27, r18
     210:	e1 f7       	brne	.-8      	; 0x20a <.do_clear_bss_loop>
     212:	46 dc       	rcall	.-1908   	; 0xfffffaa0 <__eeprom_end+0xff7efaa0>
     214:	ec ce       	rjmp	.-552    	; 0xffffffee <__eeprom_end+0xff7effee>

00000216 <__bad_interrupt>:
     216:	f4 ce       	rjmp	.-536    	; 0x0 <__vectors>

00000218 <Analog_Init>:

Analog_struct Analog;

void Analog_Init(void){
	//Enable the analogue input
	ADMUX |= (0<<ADLAR)|(0<<REFS1)|(0<<REFS0)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0);//ADLAR=0, first read ADCL then ADCH, reference = AREF(5V).
     218:	ec e7       	ldi	r30, 0x7C	; 124
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	80 81       	ld	r24, Z
     21e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN)|(0<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(0<<ADPS0);//Single conversion mode, 8MHZ/64=125KHZ this is well below the maximum of 200KHZ
     220:	ea e7       	ldi	r30, 0x7A	; 122
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	86 68       	ori	r24, 0x86	; 134
     228:	80 83       	st	Z, r24
	Analog.Curr_Channel=0;
     22a:	e0 e0       	ldi	r30, 0x00	; 0
     22c:	f1 e0       	ldi	r31, 0x01	; 1
     22e:	12 82       	std	Z+2, r1	; 0x02
	Analog.Init=INIT_OK;
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	80 83       	st	Z, r24
	Analog.Stap=Analog_Idle;
     234:	11 82       	std	Z+1, r1	; 0x01
     236:	08 95       	ret

00000238 <Analog_loop>:
}

void Analog_loop(void){
     238:	ff 92       	push	r15
     23a:	0f 93       	push	r16
     23c:	1f 93       	push	r17
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
	if(Analog.Init){
     242:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     246:	88 23       	and	r24, r24
     248:	09 f4       	brne	.+2      	; 0x24c <Analog_loop+0x14>
     24a:	8f c0       	rjmp	.+286    	; 0x36a <Analog_loop+0x132>
		switch(Analog.Stap){
     24c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
     250:	81 30       	cpi	r24, 0x01	; 1
     252:	71 f1       	breq	.+92     	; 0x2b0 <Analog_loop+0x78>
     254:	18 f0       	brcs	.+6      	; 0x25c <Analog_loop+0x24>
     256:	82 30       	cpi	r24, 0x02	; 2
     258:	e1 f1       	breq	.+120    	; 0x2d2 <Analog_loop+0x9a>
     25a:	62 c0       	rjmp	.+196    	; 0x320 <Analog_loop+0xe8>
			case Analog_Idle:{
				//Check if something needs to be done
				if (Analog.Channel[Analog.Curr_Channel].Channel_Timeout_PV==0 && Analog.Channel[Analog.Curr_Channel].Channel_Timeout_SV>0){
     25c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
     260:	48 2f       	mov	r20, r24
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	97 e0       	ldi	r25, 0x07	; 7
     266:	89 9f       	mul	r24, r25
     268:	f0 01       	movw	r30, r0
     26a:	11 24       	eor	r1, r1
     26c:	e0 50       	subi	r30, 0x00	; 0
     26e:	ff 4f       	sbci	r31, 0xFF	; 255
     270:	20 85       	ldd	r18, Z+8	; 0x08
     272:	31 85       	ldd	r19, Z+9	; 0x09
     274:	23 2b       	or	r18, r19
     276:	99 f4       	brne	.+38     	; 0x29e <Analog_loop+0x66>
     278:	fa 01       	movw	r30, r20
     27a:	ee 0f       	add	r30, r30
     27c:	ff 1f       	adc	r31, r31
     27e:	ee 0f       	add	r30, r30
     280:	ff 1f       	adc	r31, r31
     282:	ee 0f       	add	r30, r30
     284:	ff 1f       	adc	r31, r31
     286:	e4 1b       	sub	r30, r20
     288:	f5 0b       	sbc	r31, r21
     28a:	e0 50       	subi	r30, 0x00	; 0
     28c:	ff 4f       	sbci	r31, 0xFF	; 255
     28e:	26 81       	ldd	r18, Z+6	; 0x06
     290:	37 81       	ldd	r19, Z+7	; 0x07
     292:	23 2b       	or	r18, r19
     294:	21 f0       	breq	.+8      	; 0x29e <Analog_loop+0x66>
					Analog.Stap=Analog_Start;
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_edata+0x1>
     29c:	41 c0       	rjmp	.+130    	; 0x320 <Analog_loop+0xe8>
				}
				else{//Next channel
					Analog.Curr_Channel++;
     29e:	8f 5f       	subi	r24, 0xFF	; 255
					if (Analog.Curr_Channel>Analog_Max_Channel){
     2a0:	86 30       	cpi	r24, 0x06	; 6
     2a2:	18 f4       	brcc	.+6      	; 0x2aa <Analog_loop+0x72>
				//Check if something needs to be done
				if (Analog.Channel[Analog.Curr_Channel].Channel_Timeout_PV==0 && Analog.Channel[Analog.Curr_Channel].Channel_Timeout_SV>0){
					Analog.Stap=Analog_Start;
				}
				else{//Next channel
					Analog.Curr_Channel++;
     2a4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
     2a8:	3b c0       	rjmp	.+118    	; 0x320 <Analog_loop+0xe8>
					if (Analog.Curr_Channel>Analog_Max_Channel){
						Analog.Curr_Channel=0;
     2aa:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
     2ae:	38 c0       	rjmp	.+112    	; 0x320 <Analog_loop+0xe8>
				}
			}//Analog_Idle
			break;
			
			case Analog_Start:{
				uint8_t _Temp_MUX = ADMUX;
     2b0:	ac e7       	ldi	r26, 0x7C	; 124
     2b2:	b0 e0       	ldi	r27, 0x00	; 0
     2b4:	8c 91       	ld	r24, X
				_Temp_MUX &= 0xF0;
     2b6:	80 7f       	andi	r24, 0xF0	; 240
				_Temp_MUX += Analog.Curr_Channel;
     2b8:	e0 e0       	ldi	r30, 0x00	; 0
     2ba:	f1 e0       	ldi	r31, 0x01	; 1
     2bc:	92 81       	ldd	r25, Z+2	; 0x02
     2be:	89 0f       	add	r24, r25
				ADMUX = _Temp_MUX;
     2c0:	8c 93       	st	X, r24
				ADCSRA |= (1<<ADSC);
     2c2:	aa e7       	ldi	r26, 0x7A	; 122
     2c4:	b0 e0       	ldi	r27, 0x00	; 0
     2c6:	8c 91       	ld	r24, X
     2c8:	80 64       	ori	r24, 0x40	; 64
     2ca:	8c 93       	st	X, r24
				Analog.Stap=Analog_Wait;
     2cc:	82 e0       	ldi	r24, 0x02	; 2
     2ce:	81 83       	std	Z+1, r24	; 0x01
			}//Analog_Start
			break;
     2d0:	27 c0       	rjmp	.+78     	; 0x320 <Analog_loop+0xe8>
			
			case Analog_Wait:{
				if (!(ADCSRA & (1<<ADSC))){
     2d2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
     2d6:	86 fd       	sbrc	r24, 6
     2d8:	23 c0       	rjmp	.+70     	; 0x320 <Analog_loop+0xe8>
					Analog.Channel[Analog.Curr_Channel].Value=ADCL+(ADCH*256);
     2da:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <_edata+0x2>
     2de:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
     2e2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
     2e6:	97 e0       	ldi	r25, 0x07	; 7
     2e8:	29 9f       	mul	r18, r25
     2ea:	f0 01       	movw	r30, r0
     2ec:	11 24       	eor	r1, r1
     2ee:	e0 50       	subi	r30, 0x00	; 0
     2f0:	ff 4f       	sbci	r31, 0xFF	; 255
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	98 2f       	mov	r25, r24
     2f6:	88 27       	eor	r24, r24
     2f8:	83 0f       	add	r24, r19
     2fa:	91 1d       	adc	r25, r1
     2fc:	95 83       	std	Z+5, r25	; 0x05
     2fe:	84 83       	std	Z+4, r24	; 0x04
					//Analog.Channel[Analog.Curr_Channel].Value=(ADCH*256);
					Analog.Channel[Analog.Curr_Channel].Conversion_Done=1;
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	83 83       	std	Z+3, r24	; 0x03
					Analog.Channel[Analog.Curr_Channel].Channel_Timeout_PV=Analog.Channel[Analog.Curr_Channel].Channel_Timeout_SV;
     304:	86 81       	ldd	r24, Z+6	; 0x06
     306:	97 81       	ldd	r25, Z+7	; 0x07
     308:	91 87       	std	Z+9, r25	; 0x09
     30a:	80 87       	std	Z+8, r24	; 0x08
					Analog.Curr_Channel++;
     30c:	2f 5f       	subi	r18, 0xFF	; 255
					if (Analog.Curr_Channel>Analog_Max_Channel){
     30e:	26 30       	cpi	r18, 0x06	; 6
     310:	18 f4       	brcc	.+6      	; 0x318 <Analog_loop+0xe0>
				if (!(ADCSRA & (1<<ADSC))){
					Analog.Channel[Analog.Curr_Channel].Value=ADCL+(ADCH*256);
					//Analog.Channel[Analog.Curr_Channel].Value=(ADCH*256);
					Analog.Channel[Analog.Curr_Channel].Conversion_Done=1;
					Analog.Channel[Analog.Curr_Channel].Channel_Timeout_PV=Analog.Channel[Analog.Curr_Channel].Channel_Timeout_SV;
					Analog.Curr_Channel++;
     312:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <_edata+0x2>
     316:	02 c0       	rjmp	.+4      	; 0x31c <Analog_loop+0xe4>
					if (Analog.Curr_Channel>Analog_Max_Channel){
						Analog.Curr_Channel=0;
     318:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
					}
					Analog.Stap=Analog_Idle;
     31c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
				}
			}//Analog_Wait
			break;
		}//Switch
		//Timers
		uint8_t _Pulse_10ms = Timer_Pulse_10ms();
     320:	19 de       	rcall	.-974    	; 0xffffff54 <__eeprom_end+0xff7eff54>
     322:	e0 e0       	ldi	r30, 0x00	; 0
     324:	f1 e0       	ldi	r31, 0x01	; 1
     326:	ca e2       	ldi	r28, 0x2A	; 42
     328:	d1 e0       	ldi	r29, 0x01	; 1
		for (uint8_t x=0; x<=Analog_Max_Channel; x++){
			Analog.Channel[x].Channel_Timeout_PV -= Analog.Channel[x].Channel_Timeout_PV && _Pulse_10ms;
     32a:	10 e0       	ldi	r17, 0x00	; 0
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	ff 24       	eor	r15, r15
     330:	f3 94       	inc	r15
     332:	00 e0       	ldi	r16, 0x00	; 0
     334:	df 01       	movw	r26, r30
     336:	20 85       	ldd	r18, Z+8	; 0x08
     338:	31 85       	ldd	r19, Z+9	; 0x09
     33a:	21 15       	cp	r18, r1
     33c:	31 05       	cpc	r19, r1
     33e:	49 f0       	breq	.+18     	; 0x352 <Analog_loop+0x11a>
     340:	6f 2d       	mov	r22, r15
     342:	90 2f       	mov	r25, r16
     344:	81 11       	cpse	r24, r1
     346:	02 c0       	rjmp	.+4      	; 0x34c <Analog_loop+0x114>
     348:	61 2f       	mov	r22, r17
     34a:	97 2f       	mov	r25, r23
     34c:	46 2f       	mov	r20, r22
     34e:	59 2f       	mov	r21, r25
     350:	02 c0       	rjmp	.+4      	; 0x356 <Analog_loop+0x11e>
     352:	41 2f       	mov	r20, r17
     354:	57 2f       	mov	r21, r23
     356:	24 1b       	sub	r18, r20
     358:	35 0b       	sbc	r19, r21
     35a:	19 96       	adiw	r26, 0x09	; 9
     35c:	3c 93       	st	X, r19
     35e:	2e 93       	st	-X, r18
     360:	18 97       	sbiw	r26, 0x08	; 8
     362:	37 96       	adiw	r30, 0x07	; 7
			}//Analog_Wait
			break;
		}//Switch
		//Timers
		uint8_t _Pulse_10ms = Timer_Pulse_10ms();
		for (uint8_t x=0; x<=Analog_Max_Channel; x++){
     364:	ec 17       	cp	r30, r28
     366:	fd 07       	cpc	r31, r29
     368:	29 f7       	brne	.-54     	; 0x334 <Analog_loop+0xfc>
			Analog.Channel[x].Channel_Timeout_PV -= Analog.Channel[x].Channel_Timeout_PV && _Pulse_10ms;
		}
	}//If(Analog.Init)
}//Loop
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	1f 91       	pop	r17
     370:	0f 91       	pop	r16
     372:	ff 90       	pop	r15
     374:	08 95       	ret

00000376 <Analog_Channel_Init>:

int8_t Analog_Channel_Init(uint8_t _Channel, uint16_t _Timeout){
	if (_Channel<=Analog_Max_Channel){
     376:	86 30       	cpi	r24, 0x06	; 6
     378:	50 f4       	brcc	.+20     	; 0x38e <Analog_Channel_Init+0x18>
		Analog.Channel[_Channel].Channel_Timeout_SV=_Timeout;
     37a:	97 e0       	ldi	r25, 0x07	; 7
     37c:	89 9f       	mul	r24, r25
     37e:	f0 01       	movw	r30, r0
     380:	11 24       	eor	r1, r1
     382:	e0 50       	subi	r30, 0x00	; 0
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	77 83       	std	Z+7, r23	; 0x07
     388:	66 83       	std	Z+6, r22	; 0x06
		return 1;
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	08 95       	ret
	}
	return -1;
     38e:	8f ef       	ldi	r24, 0xFF	; 255
}
     390:	08 95       	ret

00000392 <Analog_Channel_Read>:

uint16_t Analog_Channel_Read(uint8_t _Channel){
	if(	Analog.Channel[_Channel].Conversion_Done){
     392:	28 2f       	mov	r18, r24
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	97 e0       	ldi	r25, 0x07	; 7
     398:	89 9f       	mul	r24, r25
     39a:	f0 01       	movw	r30, r0
     39c:	11 24       	eor	r1, r1
     39e:	e0 50       	subi	r30, 0x00	; 0
     3a0:	ff 4f       	sbci	r31, 0xFF	; 255
     3a2:	83 81       	ldd	r24, Z+3	; 0x03
     3a4:	88 23       	and	r24, r24
     3a6:	61 f0       	breq	.+24     	; 0x3c0 <Analog_Channel_Read+0x2e>
		Analog.Channel[_Channel].Conversion_Done=0;
     3a8:	f9 01       	movw	r30, r18
     3aa:	ee 0f       	add	r30, r30
     3ac:	ff 1f       	adc	r31, r31
     3ae:	ee 0f       	add	r30, r30
     3b0:	ff 1f       	adc	r31, r31
     3b2:	ee 0f       	add	r30, r30
     3b4:	ff 1f       	adc	r31, r31
     3b6:	e2 1b       	sub	r30, r18
     3b8:	f3 0b       	sbc	r31, r19
     3ba:	e0 50       	subi	r30, 0x00	; 0
     3bc:	ff 4f       	sbci	r31, 0xFF	; 255
     3be:	13 82       	std	Z+3, r1	; 0x03
	}
	return Analog.Channel[_Channel].Value;
     3c0:	f9 01       	movw	r30, r18
     3c2:	ee 0f       	add	r30, r30
     3c4:	ff 1f       	adc	r31, r31
     3c6:	ee 0f       	add	r30, r30
     3c8:	ff 1f       	adc	r31, r31
     3ca:	ee 0f       	add	r30, r30
     3cc:	ff 1f       	adc	r31, r31
     3ce:	e2 1b       	sub	r30, r18
     3d0:	f3 0b       	sbc	r31, r19
     3d2:	e0 50       	subi	r30, 0x00	; 0
     3d4:	ff 4f       	sbci	r31, 0xFF	; 255
}
     3d6:	84 81       	ldd	r24, Z+4	; 0x04
     3d8:	95 81       	ldd	r25, Z+5	; 0x05
     3da:	08 95       	ret

000003dc <Analog_Channel_Ready>:

uint8_t Analog_Channel_Ready(uint8_t _Channel){
	return Analog.Channel[_Channel].Conversion_Done;
     3dc:	27 e0       	ldi	r18, 0x07	; 7
     3de:	82 9f       	mul	r24, r18
     3e0:	c0 01       	movw	r24, r0
     3e2:	11 24       	eor	r1, r1
     3e4:	fc 01       	movw	r30, r24
     3e6:	e0 50       	subi	r30, 0x00	; 0
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	83 81       	ldd	r24, Z+3	; 0x03
     3ec:	08 95       	ret

000003ee <BCDToDecimal>:

***************************************************************************/
#include "Convertlib/Convert.h"

uint8_t BCDToDecimal(const uint8_t _BCD){
    if((_BCD&0xF0)<0xA0 && (_BCD&0x0F)<0x0A){
     3ee:	28 2f       	mov	r18, r24
     3f0:	20 7f       	andi	r18, 0xF0	; 240
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	20 3a       	cpi	r18, 0xA0	; 160
     3f6:	31 05       	cpc	r19, r1
     3f8:	8c f4       	brge	.+34     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
     3fa:	28 2f       	mov	r18, r24
     3fc:	2f 70       	andi	r18, 0x0F	; 15
     3fe:	42 2f       	mov	r20, r18
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	4a 30       	cpi	r20, 0x0A	; 10
     404:	51 05       	cpc	r21, r1
     406:	64 f4       	brge	.+24     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
	    uint8_t _x = (_BCD>>4)*10 + (_BCD & 0x0F);
     408:	82 95       	swap	r24
     40a:	8f 70       	andi	r24, 0x0F	; 15
     40c:	98 2f       	mov	r25, r24
     40e:	99 0f       	add	r25, r25
     410:	89 2f       	mov	r24, r25
     412:	88 0f       	add	r24, r24
     414:	88 0f       	add	r24, r24
     416:	89 0f       	add	r24, r25
     418:	82 0f       	add	r24, r18
	    return _x;
     41a:	08 95       	ret
    }
   return 0;
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	08 95       	ret
     420:	80 e0       	ldi	r24, 0x00	; 0
}
     422:	08 95       	ret

00000424 <DecimalToBCD>:

uint8_t DecimalToBCD(const uint8_t _Decimal){
	if(_Decimal<100){
     424:	84 36       	cpi	r24, 0x64	; 100
     426:	d8 f4       	brcc	.+54     	; 0x45e <DecimalToBCD+0x3a>
		uint8_t _x = _Decimal%10;
     428:	2d ec       	ldi	r18, 0xCD	; 205
     42a:	82 9f       	mul	r24, r18
     42c:	21 2d       	mov	r18, r1
     42e:	11 24       	eor	r1, r1
     430:	26 95       	lsr	r18
     432:	26 95       	lsr	r18
     434:	26 95       	lsr	r18
     436:	22 0f       	add	r18, r18
     438:	92 2f       	mov	r25, r18
     43a:	99 0f       	add	r25, r25
     43c:	99 0f       	add	r25, r25
     43e:	29 0f       	add	r18, r25
     440:	98 2f       	mov	r25, r24
     442:	92 1b       	sub	r25, r18
     444:	29 2f       	mov	r18, r25
		uint8_t _y = (((_Decimal-_x)/10)<<4) + _x;
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	82 1b       	sub	r24, r18
     44a:	91 09       	sbc	r25, r1
     44c:	6a e0       	ldi	r22, 0x0A	; 10
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	9b dd       	rcall	.-1226   	; 0xffffff88 <__eeprom_end+0xff7eff88>
     452:	82 2f       	mov	r24, r18
     454:	90 e1       	ldi	r25, 0x10	; 16
     456:	69 9f       	mul	r22, r25
     458:	80 0d       	add	r24, r0
     45a:	11 24       	eor	r1, r1
		return _y;
     45c:	08 95       	ret
	}
	return 0;
     45e:	80 e0       	ldi	r24, 0x00	; 0
}
     460:	08 95       	ret

00000462 <DS1307_Loop>:
	if (DS1307.Command==Status_DS1307_Idle){
		DS1307.Setting.sOUT=_OUT>0;
		DS1307.Setting.sSQWE=_SQWE>0;
		DS1307.Setting.sRS1=_RS1>0;
		DS1307.Setting.sRS0=_RS0>0;
		DS1307.Command=Status_DS1307_SetSettings;
     462:	0f 93       	push	r16
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <DS1307+0xd>
     46c:	8e 2f       	mov	r24, r30
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	84 36       	cpi	r24, 0x64	; 100
     472:	91 05       	cpc	r25, r1
     474:	08 f0       	brcs	.+2      	; 0x478 <DS1307_Loop+0x16>
     476:	fe c2       	rjmp	.+1532   	; 0xa74 <__stack+0x575>
     478:	fc 01       	movw	r30, r24
     47a:	e6 5e       	subi	r30, 0xE6	; 230
     47c:	ff 4f       	sbci	r31, 0xFF	; 255
     47e:	09 94       	ijmp
     480:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <DS1307+0xc>
     484:	88 23       	and	r24, r24
     486:	41 f0       	breq	.+16     	; 0x498 <DS1307_Loop+0x36>
     488:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <DS1307+0x13>
     48c:	88 23       	and	r24, r24
     48e:	09 f4       	brne	.+2      	; 0x492 <DS1307_Loop+0x30>
     490:	f1 c2       	rjmp	.+1506   	; 0xa74 <__stack+0x575>
     492:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <DS1307+0xd>
     496:	ee c2       	rjmp	.+1500   	; 0xa74 <__stack+0x575>
     498:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <DS1307+0xe>
     49c:	81 11       	cpse	r24, r1
     49e:	ee c2       	rjmp	.+1500   	; 0xa7c <__stack+0x57d>
     4a0:	ee e2       	ldi	r30, 0x2E	; 46
     4a2:	f1 e0       	ldi	r31, 0x01	; 1
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	83 8b       	std	Z+19, r24	; 0x13
     4a8:	85 87       	std	Z+13, r24	; 0x0d
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	ee c2       	rjmp	.+1500   	; 0xa8a <__stack+0x58b>
     4ae:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     4b2:	81 11       	cpse	r24, r1
     4b4:	06 c0       	rjmp	.+12     	; 0x4c2 <DS1307_Loop+0x60>
     4b6:	68 e6       	ldi	r22, 0x68	; 104
     4b8:	87 e0       	ldi	r24, 0x07	; 7
     4ba:	4f d6       	rcall	.+3230   	; 0x115a <I2C_Get_Ident>
     4bc:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <DS1307+0x11>
     4c0:	d9 c2       	rjmp	.+1458   	; 0xa74 <__stack+0x575>
     4c2:	02 d6       	rcall	.+3076   	; 0x10c8 <I2C_Ready>
     4c4:	88 23       	and	r24, r24
     4c6:	09 f4       	brne	.+2      	; 0x4ca <DS1307_Loop+0x68>
     4c8:	d5 c2       	rjmp	.+1450   	; 0xa74 <__stack+0x575>
     4ca:	ee e2       	ldi	r30, 0x2E	; 46
     4cc:	f1 e0       	ldi	r31, 0x01	; 1
     4ce:	85 e0       	ldi	r24, 0x05	; 5
     4d0:	83 8b       	std	Z+19, r24	; 0x13
     4d2:	85 87       	std	Z+13, r24	; 0x0d
     4d4:	cf c2       	rjmp	.+1438   	; 0xa74 <__stack+0x575>
     4d6:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     4da:	f6 d5       	rcall	.+3052   	; 0x10c8 <I2C_Ready>
     4dc:	88 23       	and	r24, r24
     4de:	a1 f0       	breq	.+40     	; 0x508 <__stack+0x9>
     4e0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     4e4:	81 11       	cpse	r24, r1
     4e6:	15 c0       	rjmp	.+42     	; 0x512 <__stack+0x13>
     4e8:	ce e2       	ldi	r28, 0x2E	; 46
     4ea:	d1 e0       	ldi	r29, 0x01	; 1
     4ec:	1e 8a       	std	Y+22, r1	; 0x16
     4ee:	09 89       	ldd	r16, Y+17	; 0x11
     4f0:	23 e0       	ldi	r18, 0x03	; 3
     4f2:	41 e0       	ldi	r20, 0x01	; 1
     4f4:	65 e4       	ldi	r22, 0x45	; 69
     4f6:	71 e0       	ldi	r23, 0x01	; 1
     4f8:	84 e4       	ldi	r24, 0x44	; 68
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	0f d6       	rcall	.+3102   	; 0x111c <I2C_Send_STr>
     4fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     500:	8a 8b       	std	Y+18, r24	; 0x12
     502:	83 e6       	ldi	r24, 0x63	; 99
     504:	8d 87       	std	Y+13, r24	; 0x0d
     506:	b6 c2       	rjmp	.+1388   	; 0xa74 <__stack+0x575>
     508:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     50c:	88 23       	and	r24, r24
     50e:	09 f4       	brne	.+2      	; 0x512 <__stack+0x13>
     510:	b1 c2       	rjmp	.+1378   	; 0xa74 <__stack+0x575>
     512:	ce e2       	ldi	r28, 0x2E	; 46
     514:	d1 e0       	ldi	r29, 0x01	; 1
     516:	18 8a       	std	Y+16, r1	; 0x10
     518:	8f 89       	ldd	r24, Y+23	; 0x17
     51a:	8f 77       	andi	r24, 0x7F	; 127
     51c:	68 df       	rcall	.-304    	; 0x3ee <BCDToDecimal>
     51e:	88 83       	st	Y, r24
     520:	88 8d       	ldd	r24, Y+24	; 0x18
     522:	8f 77       	andi	r24, 0x7F	; 127
     524:	64 df       	rcall	.-312    	; 0x3ee <BCDToDecimal>
     526:	89 83       	std	Y+1, r24	; 0x01
     528:	8f 81       	ldd	r24, Y+7	; 0x07
     52a:	88 23       	and	r24, r24
     52c:	41 f0       	breq	.+16     	; 0x53e <__stack+0x3f>
     52e:	89 8d       	ldd	r24, Y+25	; 0x19
     530:	8f 71       	andi	r24, 0x1F	; 31
     532:	5d df       	rcall	.-326    	; 0x3ee <BCDToDecimal>
     534:	8a 83       	std	Y+2, r24	; 0x02
     536:	89 8d       	ldd	r24, Y+25	; 0x19
     538:	80 72       	andi	r24, 0x20	; 32
     53a:	8f 87       	std	Y+15, r24	; 0x0f
     53c:	06 c0       	rjmp	.+12     	; 0x54a <__stack+0x4b>
     53e:	ce e2       	ldi	r28, 0x2E	; 46
     540:	d1 e0       	ldi	r29, 0x01	; 1
     542:	89 8d       	ldd	r24, Y+25	; 0x19
     544:	8f 73       	andi	r24, 0x3F	; 63
     546:	53 df       	rcall	.-346    	; 0x3ee <BCDToDecimal>
     548:	8a 83       	std	Y+2, r24	; 0x02
     54a:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <DS1307+0x14>
     54e:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <DS1307+0x15>
     552:	30 97       	sbiw	r30, 0x00	; 0
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x69>
     556:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <DS1307>
     55a:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <DS1307+0x1>
     55e:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <DS1307+0x2>
     562:	80 83       	st	Z, r24
     564:	91 83       	std	Z+1, r25	; 0x01
     566:	a2 83       	std	Z+2, r26	; 0x02
     568:	ee e2       	ldi	r30, 0x2E	; 46
     56a:	f1 e0       	ldi	r31, 0x01	; 1
     56c:	15 86       	std	Z+13, r1	; 0x0d
     56e:	13 8a       	std	Z+19, r1	; 0x13
     570:	81 c2       	rjmp	.+1282   	; 0xa74 <__stack+0x575>
     572:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     576:	a8 d5       	rcall	.+2896   	; 0x10c8 <I2C_Ready>
     578:	88 23       	and	r24, r24
     57a:	a9 f0       	breq	.+42     	; 0x5a6 <__stack+0xa7>
     57c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     580:	81 11       	cpse	r24, r1
     582:	16 c0       	rjmp	.+44     	; 0x5b0 <__stack+0xb1>
     584:	ce e2       	ldi	r28, 0x2E	; 46
     586:	d1 e0       	ldi	r29, 0x01	; 1
     588:	84 e0       	ldi	r24, 0x04	; 4
     58a:	8e 8b       	std	Y+22, r24	; 0x16
     58c:	09 89       	ldd	r16, Y+17	; 0x11
     58e:	27 e0       	ldi	r18, 0x07	; 7
     590:	41 e0       	ldi	r20, 0x01	; 1
     592:	65 e4       	ldi	r22, 0x45	; 69
     594:	71 e0       	ldi	r23, 0x01	; 1
     596:	84 e4       	ldi	r24, 0x44	; 68
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	c0 d5       	rcall	.+2944   	; 0x111c <I2C_Send_STr>
     59c:	8d 85       	ldd	r24, Y+13	; 0x0d
     59e:	8a 8b       	std	Y+18, r24	; 0x12
     5a0:	83 e6       	ldi	r24, 0x63	; 99
     5a2:	8d 87       	std	Y+13, r24	; 0x0d
     5a4:	67 c2       	rjmp	.+1230   	; 0xa74 <__stack+0x575>
     5a6:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     5aa:	88 23       	and	r24, r24
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <__stack+0xb1>
     5ae:	62 c2       	rjmp	.+1220   	; 0xa74 <__stack+0x575>
     5b0:	ce e2       	ldi	r28, 0x2E	; 46
     5b2:	d1 e0       	ldi	r29, 0x01	; 1
     5b4:	18 8a       	std	Y+16, r1	; 0x10
     5b6:	8f 89       	ldd	r24, Y+23	; 0x17
     5b8:	8f 73       	andi	r24, 0x3F	; 63
     5ba:	19 df       	rcall	.-462    	; 0x3ee <BCDToDecimal>
     5bc:	8b 83       	std	Y+3, r24	; 0x03
     5be:	88 8d       	ldd	r24, Y+24	; 0x18
     5c0:	8f 71       	andi	r24, 0x1F	; 31
     5c2:	15 df       	rcall	.-470    	; 0x3ee <BCDToDecimal>
     5c4:	8c 83       	std	Y+4, r24	; 0x04
     5c6:	89 8d       	ldd	r24, Y+25	; 0x19
     5c8:	12 df       	rcall	.-476    	; 0x3ee <BCDToDecimal>
     5ca:	8d 83       	std	Y+5, r24	; 0x05
     5cc:	ec 89       	ldd	r30, Y+20	; 0x14
     5ce:	fd 89       	ldd	r31, Y+21	; 0x15
     5d0:	30 97       	sbiw	r30, 0x00	; 0
     5d2:	49 f0       	breq	.+18     	; 0x5e6 <__stack+0xe7>
     5d4:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <DS1307+0x3>
     5d8:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <DS1307+0x4>
     5dc:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <DS1307+0x5>
     5e0:	80 83       	st	Z, r24
     5e2:	91 83       	std	Z+1, r25	; 0x01
     5e4:	a2 83       	std	Z+2, r26	; 0x02
     5e6:	ee e2       	ldi	r30, 0x2E	; 46
     5e8:	f1 e0       	ldi	r31, 0x01	; 1
     5ea:	15 86       	std	Z+13, r1	; 0x0d
     5ec:	13 8a       	std	Z+19, r1	; 0x13
     5ee:	42 c2       	rjmp	.+1156   	; 0xa74 <__stack+0x575>
     5f0:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     5f4:	69 d5       	rcall	.+2770   	; 0x10c8 <I2C_Ready>
     5f6:	88 23       	and	r24, r24
     5f8:	a1 f0       	breq	.+40     	; 0x622 <__stack+0x123>
     5fa:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     5fe:	81 11       	cpse	r24, r1
     600:	15 c0       	rjmp	.+42     	; 0x62c <__stack+0x12d>
     602:	ce e2       	ldi	r28, 0x2E	; 46
     604:	d1 e0       	ldi	r29, 0x01	; 1
     606:	1e 8a       	std	Y+22, r1	; 0x16
     608:	09 89       	ldd	r16, Y+17	; 0x11
     60a:	27 e0       	ldi	r18, 0x07	; 7
     60c:	41 e0       	ldi	r20, 0x01	; 1
     60e:	65 e4       	ldi	r22, 0x45	; 69
     610:	71 e0       	ldi	r23, 0x01	; 1
     612:	84 e4       	ldi	r24, 0x44	; 68
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	82 d5       	rcall	.+2820   	; 0x111c <I2C_Send_STr>
     618:	8d 85       	ldd	r24, Y+13	; 0x0d
     61a:	8a 8b       	std	Y+18, r24	; 0x12
     61c:	83 e6       	ldi	r24, 0x63	; 99
     61e:	8d 87       	std	Y+13, r24	; 0x0d
     620:	29 c2       	rjmp	.+1106   	; 0xa74 <__stack+0x575>
     622:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     626:	88 23       	and	r24, r24
     628:	09 f4       	brne	.+2      	; 0x62c <__stack+0x12d>
     62a:	24 c2       	rjmp	.+1096   	; 0xa74 <__stack+0x575>
     62c:	ee e2       	ldi	r30, 0x2E	; 46
     62e:	f1 e0       	ldi	r31, 0x01	; 1
     630:	10 8a       	std	Z+16, r1	; 0x10
     632:	84 85       	ldd	r24, Z+12	; 0x0c
     634:	81 11       	cpse	r24, r1
     636:	0e c0       	rjmp	.+28     	; 0x654 <__stack+0x155>
     638:	97 89       	ldd	r25, Z+23	; 0x17
     63a:	89 2f       	mov	r24, r25
     63c:	88 1f       	adc	r24, r24
     63e:	88 27       	eor	r24, r24
     640:	88 1f       	adc	r24, r24
     642:	86 83       	std	Z+6, r24	; 0x06
     644:	91 8d       	ldd	r25, Z+25	; 0x19
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	96 ff       	sbrs	r25, 6
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	87 83       	std	Z+7, r24	; 0x07
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <DS1307+0xc>
     654:	ce e2       	ldi	r28, 0x2E	; 46
     656:	d1 e0       	ldi	r29, 0x01	; 1
     658:	8f 89       	ldd	r24, Y+23	; 0x17
     65a:	8f 77       	andi	r24, 0x7F	; 127
     65c:	c8 de       	rcall	.-624    	; 0x3ee <BCDToDecimal>
     65e:	88 83       	st	Y, r24
     660:	88 8d       	ldd	r24, Y+24	; 0x18
     662:	8f 77       	andi	r24, 0x7F	; 127
     664:	c4 de       	rcall	.-632    	; 0x3ee <BCDToDecimal>
     666:	89 83       	std	Y+1, r24	; 0x01
     668:	8f 81       	ldd	r24, Y+7	; 0x07
     66a:	88 23       	and	r24, r24
     66c:	41 f0       	breq	.+16     	; 0x67e <__stack+0x17f>
     66e:	89 8d       	ldd	r24, Y+25	; 0x19
     670:	8f 71       	andi	r24, 0x1F	; 31
     672:	bd de       	rcall	.-646    	; 0x3ee <BCDToDecimal>
     674:	8a 83       	std	Y+2, r24	; 0x02
     676:	89 8d       	ldd	r24, Y+25	; 0x19
     678:	80 72       	andi	r24, 0x20	; 32
     67a:	8f 87       	std	Y+15, r24	; 0x0f
     67c:	06 c0       	rjmp	.+12     	; 0x68a <__stack+0x18b>
     67e:	ce e2       	ldi	r28, 0x2E	; 46
     680:	d1 e0       	ldi	r29, 0x01	; 1
     682:	89 8d       	ldd	r24, Y+25	; 0x19
     684:	8f 73       	andi	r24, 0x3F	; 63
     686:	b3 de       	rcall	.-666    	; 0x3ee <BCDToDecimal>
     688:	8a 83       	std	Y+2, r24	; 0x02
     68a:	ce e2       	ldi	r28, 0x2E	; 46
     68c:	d1 e0       	ldi	r29, 0x01	; 1
     68e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     690:	8f 73       	andi	r24, 0x3F	; 63
     692:	ad de       	rcall	.-678    	; 0x3ee <BCDToDecimal>
     694:	8b 83       	std	Y+3, r24	; 0x03
     696:	8c 8d       	ldd	r24, Y+28	; 0x1c
     698:	8f 71       	andi	r24, 0x1F	; 31
     69a:	a9 de       	rcall	.-686    	; 0x3ee <BCDToDecimal>
     69c:	8c 83       	std	Y+4, r24	; 0x04
     69e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     6a0:	a6 de       	rcall	.-692    	; 0x3ee <BCDToDecimal>
     6a2:	8d 83       	std	Y+5, r24	; 0x05
     6a4:	ac 89       	ldd	r26, Y+20	; 0x14
     6a6:	bd 89       	ldd	r27, Y+21	; 0x15
     6a8:	10 97       	sbiw	r26, 0x00	; 0
     6aa:	31 f0       	breq	.+12     	; 0x6b8 <__stack+0x1b9>
     6ac:	86 e0       	ldi	r24, 0x06	; 6
     6ae:	fe 01       	movw	r30, r28
     6b0:	01 90       	ld	r0, Z+
     6b2:	0d 92       	st	X+, r0
     6b4:	8a 95       	dec	r24
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <__stack+0x1b1>
     6b8:	ee e2       	ldi	r30, 0x2E	; 46
     6ba:	f1 e0       	ldi	r31, 0x01	; 1
     6bc:	15 86       	std	Z+13, r1	; 0x0d
     6be:	13 8a       	std	Z+19, r1	; 0x13
     6c0:	d9 c1       	rjmp	.+946    	; 0xa74 <__stack+0x575>
     6c2:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     6c6:	00 d5       	rcall	.+2560   	; 0x10c8 <I2C_Ready>
     6c8:	88 23       	and	r24, r24
     6ca:	a9 f0       	breq	.+42     	; 0x6f6 <__stack+0x1f7>
     6cc:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     6d0:	81 11       	cpse	r24, r1
     6d2:	16 c0       	rjmp	.+44     	; 0x700 <__stack+0x201>
     6d4:	ce e2       	ldi	r28, 0x2E	; 46
     6d6:	d1 e0       	ldi	r29, 0x01	; 1
     6d8:	87 e0       	ldi	r24, 0x07	; 7
     6da:	8e 8b       	std	Y+22, r24	; 0x16
     6dc:	09 89       	ldd	r16, Y+17	; 0x11
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	41 e0       	ldi	r20, 0x01	; 1
     6e2:	65 e4       	ldi	r22, 0x45	; 69
     6e4:	71 e0       	ldi	r23, 0x01	; 1
     6e6:	84 e4       	ldi	r24, 0x44	; 68
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	18 d5       	rcall	.+2608   	; 0x111c <I2C_Send_STr>
     6ec:	8d 85       	ldd	r24, Y+13	; 0x0d
     6ee:	8a 8b       	std	Y+18, r24	; 0x12
     6f0:	83 e6       	ldi	r24, 0x63	; 99
     6f2:	8d 87       	std	Y+13, r24	; 0x0d
     6f4:	bf c1       	rjmp	.+894    	; 0xa74 <__stack+0x575>
     6f6:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     6fa:	88 23       	and	r24, r24
     6fc:	09 f4       	brne	.+2      	; 0x700 <__stack+0x201>
     6fe:	ba c1       	rjmp	.+884    	; 0xa74 <__stack+0x575>
     700:	ee e2       	ldi	r30, 0x2E	; 46
     702:	f1 e0       	ldi	r31, 0x01	; 1
     704:	10 8a       	std	Z+16, r1	; 0x10
     706:	87 89       	ldd	r24, Z+23	; 0x17
     708:	98 2f       	mov	r25, r24
     70a:	99 1f       	adc	r25, r25
     70c:	99 27       	eor	r25, r25
     70e:	99 1f       	adc	r25, r25
     710:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <DS1307+0xb>
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	84 ff       	sbrs	r24, 4
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <DS1307+0xa>
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	81 ff       	sbrs	r24, 1
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <DS1307+0x9>
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	80 ff       	sbrs	r24, 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <DS1307+0x8>
     732:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <DS1307+0xc>
     736:	81 11       	cpse	r24, r1
     738:	06 c0       	rjmp	.+12     	; 0x746 <__stack+0x247>
     73a:	ee e2       	ldi	r30, 0x2E	; 46
     73c:	f1 e0       	ldi	r31, 0x01	; 1
     73e:	84 e0       	ldi	r24, 0x04	; 4
     740:	85 87       	std	Z+13, r24	; 0x0d
     742:	83 8b       	std	Z+19, r24	; 0x13
     744:	97 c1       	rjmp	.+814    	; 0xa74 <__stack+0x575>
     746:	ee e2       	ldi	r30, 0x2E	; 46
     748:	f1 e0       	ldi	r31, 0x01	; 1
     74a:	15 86       	std	Z+13, r1	; 0x0d
     74c:	13 8a       	std	Z+19, r1	; 0x13
     74e:	92 c1       	rjmp	.+804    	; 0xa74 <__stack+0x575>
     750:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     754:	b9 d4       	rcall	.+2418   	; 0x10c8 <I2C_Ready>
     756:	88 23       	and	r24, r24
     758:	09 f4       	brne	.+2      	; 0x75c <__stack+0x25d>
     75a:	44 c0       	rjmp	.+136    	; 0x7e4 <__stack+0x2e5>
     75c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     760:	81 11       	cpse	r24, r1
     762:	45 c0       	rjmp	.+138    	; 0x7ee <__stack+0x2ef>
     764:	88 e0       	ldi	r24, 0x08	; 8
     766:	e4 e4       	ldi	r30, 0x44	; 68
     768:	f1 e0       	ldi	r31, 0x01	; 1
     76a:	df 01       	movw	r26, r30
     76c:	1d 92       	st	X+, r1
     76e:	8a 95       	dec	r24
     770:	e9 f7       	brne	.-6      	; 0x76c <__stack+0x26d>
     772:	ce e2       	ldi	r28, 0x2E	; 46
     774:	d1 e0       	ldi	r29, 0x01	; 1
     776:	88 81       	ld	r24, Y
     778:	55 de       	rcall	.-854    	; 0x424 <DecimalToBCD>
     77a:	2e 81       	ldd	r18, Y+6	; 0x06
     77c:	b0 e8       	ldi	r27, 0x80	; 128
     77e:	2b 9f       	mul	r18, r27
     780:	90 01       	movw	r18, r0
     782:	11 24       	eor	r1, r1
     784:	82 2b       	or	r24, r18
     786:	8f 8b       	std	Y+23, r24	; 0x17
     788:	89 81       	ldd	r24, Y+1	; 0x01
     78a:	4c de       	rcall	.-872    	; 0x424 <DecimalToBCD>
     78c:	8f 77       	andi	r24, 0x7F	; 127
     78e:	88 8f       	std	Y+24, r24	; 0x18
     790:	8f 81       	ldd	r24, Y+7	; 0x07
     792:	88 23       	and	r24, r24
     794:	81 f0       	breq	.+32     	; 0x7b6 <__stack+0x2b7>
     796:	8a 81       	ldd	r24, Y+2	; 0x02
     798:	45 de       	rcall	.-886    	; 0x424 <DecimalToBCD>
     79a:	2f 81       	ldd	r18, Y+7	; 0x07
     79c:	30 e4       	ldi	r19, 0x40	; 64
     79e:	23 9f       	mul	r18, r19
     7a0:	a0 01       	movw	r20, r0
     7a2:	11 24       	eor	r1, r1
     7a4:	9f 85       	ldd	r25, Y+15	; 0x0f
     7a6:	60 e2       	ldi	r22, 0x20	; 32
     7a8:	96 9f       	mul	r25, r22
     7aa:	90 01       	movw	r18, r0
     7ac:	11 24       	eor	r1, r1
     7ae:	24 2b       	or	r18, r20
     7b0:	82 2b       	or	r24, r18
     7b2:	89 8f       	std	Y+25, r24	; 0x19
     7b4:	0b c0       	rjmp	.+22     	; 0x7cc <__stack+0x2cd>
     7b6:	ce e2       	ldi	r28, 0x2E	; 46
     7b8:	d1 e0       	ldi	r29, 0x01	; 1
     7ba:	8a 81       	ldd	r24, Y+2	; 0x02
     7bc:	33 de       	rcall	.-922    	; 0x424 <DecimalToBCD>
     7be:	2f 81       	ldd	r18, Y+7	; 0x07
     7c0:	90 e4       	ldi	r25, 0x40	; 64
     7c2:	29 9f       	mul	r18, r25
     7c4:	90 01       	movw	r18, r0
     7c6:	11 24       	eor	r1, r1
     7c8:	82 2b       	or	r24, r18
     7ca:	89 8f       	std	Y+25, r24	; 0x19
     7cc:	ce e2       	ldi	r28, 0x2E	; 46
     7ce:	d1 e0       	ldi	r29, 0x01	; 1
     7d0:	49 89       	ldd	r20, Y+17	; 0x11
     7d2:	64 e0       	ldi	r22, 0x04	; 4
     7d4:	84 e4       	ldi	r24, 0x44	; 68
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	8a d4       	rcall	.+2324   	; 0x10ee <I2C_Send_ST>
     7da:	8d 85       	ldd	r24, Y+13	; 0x0d
     7dc:	8a 8b       	std	Y+18, r24	; 0x12
     7de:	83 e6       	ldi	r24, 0x63	; 99
     7e0:	8d 87       	std	Y+13, r24	; 0x0d
     7e2:	48 c1       	rjmp	.+656    	; 0xa74 <__stack+0x575>
     7e4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     7e8:	88 23       	and	r24, r24
     7ea:	09 f4       	brne	.+2      	; 0x7ee <__stack+0x2ef>
     7ec:	43 c1       	rjmp	.+646    	; 0xa74 <__stack+0x575>
     7ee:	ee e2       	ldi	r30, 0x2E	; 46
     7f0:	f1 e0       	ldi	r31, 0x01	; 1
     7f2:	10 8a       	std	Z+16, r1	; 0x10
     7f4:	15 86       	std	Z+13, r1	; 0x0d
     7f6:	13 8a       	std	Z+19, r1	; 0x13
     7f8:	3d c1       	rjmp	.+634    	; 0xa74 <__stack+0x575>
     7fa:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     7fe:	64 d4       	rcall	.+2248   	; 0x10c8 <I2C_Ready>
     800:	88 23       	and	r24, r24
     802:	21 f1       	breq	.+72     	; 0x84c <__stack+0x34d>
     804:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     808:	81 11       	cpse	r24, r1
     80a:	25 c0       	rjmp	.+74     	; 0x856 <__stack+0x357>
     80c:	88 e0       	ldi	r24, 0x08	; 8
     80e:	e4 e4       	ldi	r30, 0x44	; 68
     810:	f1 e0       	ldi	r31, 0x01	; 1
     812:	df 01       	movw	r26, r30
     814:	1d 92       	st	X+, r1
     816:	8a 95       	dec	r24
     818:	e9 f7       	brne	.-6      	; 0x814 <__stack+0x315>
     81a:	ce e2       	ldi	r28, 0x2E	; 46
     81c:	d1 e0       	ldi	r29, 0x01	; 1
     81e:	84 e0       	ldi	r24, 0x04	; 4
     820:	8e 8b       	std	Y+22, r24	; 0x16
     822:	8b 81       	ldd	r24, Y+3	; 0x03
     824:	ff dd       	rcall	.-1026   	; 0x424 <DecimalToBCD>
     826:	8f 73       	andi	r24, 0x3F	; 63
     828:	8f 8b       	std	Y+23, r24	; 0x17
     82a:	8c 81       	ldd	r24, Y+4	; 0x04
     82c:	fb dd       	rcall	.-1034   	; 0x424 <DecimalToBCD>
     82e:	8f 71       	andi	r24, 0x1F	; 31
     830:	88 8f       	std	Y+24, r24	; 0x18
     832:	8d 81       	ldd	r24, Y+5	; 0x05
     834:	f7 dd       	rcall	.-1042   	; 0x424 <DecimalToBCD>
     836:	89 8f       	std	Y+25, r24	; 0x19
     838:	49 89       	ldd	r20, Y+17	; 0x11
     83a:	64 e0       	ldi	r22, 0x04	; 4
     83c:	84 e4       	ldi	r24, 0x44	; 68
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	56 d4       	rcall	.+2220   	; 0x10ee <I2C_Send_ST>
     842:	8d 85       	ldd	r24, Y+13	; 0x0d
     844:	8a 8b       	std	Y+18, r24	; 0x12
     846:	83 e6       	ldi	r24, 0x63	; 99
     848:	8d 87       	std	Y+13, r24	; 0x0d
     84a:	14 c1       	rjmp	.+552    	; 0xa74 <__stack+0x575>
     84c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     850:	88 23       	and	r24, r24
     852:	09 f4       	brne	.+2      	; 0x856 <__stack+0x357>
     854:	0f c1       	rjmp	.+542    	; 0xa74 <__stack+0x575>
     856:	ee e2       	ldi	r30, 0x2E	; 46
     858:	f1 e0       	ldi	r31, 0x01	; 1
     85a:	10 8a       	std	Z+16, r1	; 0x10
     85c:	15 86       	std	Z+13, r1	; 0x0d
     85e:	13 8a       	std	Z+19, r1	; 0x13
     860:	09 c1       	rjmp	.+530    	; 0xa74 <__stack+0x575>
     862:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     866:	30 d4       	rcall	.+2144   	; 0x10c8 <I2C_Ready>
     868:	88 23       	and	r24, r24
     86a:	09 f4       	brne	.+2      	; 0x86e <__stack+0x36f>
     86c:	4f c0       	rjmp	.+158    	; 0x90c <__stack+0x40d>
     86e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     872:	81 11       	cpse	r24, r1
     874:	50 c0       	rjmp	.+160    	; 0x916 <__stack+0x417>
     876:	88 e0       	ldi	r24, 0x08	; 8
     878:	e4 e4       	ldi	r30, 0x44	; 68
     87a:	f1 e0       	ldi	r31, 0x01	; 1
     87c:	df 01       	movw	r26, r30
     87e:	1d 92       	st	X+, r1
     880:	8a 95       	dec	r24
     882:	e9 f7       	brne	.-6      	; 0x87e <__stack+0x37f>
     884:	ce e2       	ldi	r28, 0x2E	; 46
     886:	d1 e0       	ldi	r29, 0x01	; 1
     888:	88 81       	ld	r24, Y
     88a:	cc dd       	rcall	.-1128   	; 0x424 <DecimalToBCD>
     88c:	2e 81       	ldd	r18, Y+6	; 0x06
     88e:	b0 e8       	ldi	r27, 0x80	; 128
     890:	2b 9f       	mul	r18, r27
     892:	90 01       	movw	r18, r0
     894:	11 24       	eor	r1, r1
     896:	82 2b       	or	r24, r18
     898:	8f 8b       	std	Y+23, r24	; 0x17
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	c3 dd       	rcall	.-1146   	; 0x424 <DecimalToBCD>
     89e:	8f 77       	andi	r24, 0x7F	; 127
     8a0:	88 8f       	std	Y+24, r24	; 0x18
     8a2:	8f 81       	ldd	r24, Y+7	; 0x07
     8a4:	88 23       	and	r24, r24
     8a6:	81 f0       	breq	.+32     	; 0x8c8 <__stack+0x3c9>
     8a8:	8a 81       	ldd	r24, Y+2	; 0x02
     8aa:	bc dd       	rcall	.-1160   	; 0x424 <DecimalToBCD>
     8ac:	2f 81       	ldd	r18, Y+7	; 0x07
     8ae:	30 e4       	ldi	r19, 0x40	; 64
     8b0:	23 9f       	mul	r18, r19
     8b2:	a0 01       	movw	r20, r0
     8b4:	11 24       	eor	r1, r1
     8b6:	9f 85       	ldd	r25, Y+15	; 0x0f
     8b8:	60 e2       	ldi	r22, 0x20	; 32
     8ba:	96 9f       	mul	r25, r22
     8bc:	90 01       	movw	r18, r0
     8be:	11 24       	eor	r1, r1
     8c0:	24 2b       	or	r18, r20
     8c2:	82 2b       	or	r24, r18
     8c4:	89 8f       	std	Y+25, r24	; 0x19
     8c6:	0b c0       	rjmp	.+22     	; 0x8de <__stack+0x3df>
     8c8:	ce e2       	ldi	r28, 0x2E	; 46
     8ca:	d1 e0       	ldi	r29, 0x01	; 1
     8cc:	8a 81       	ldd	r24, Y+2	; 0x02
     8ce:	aa dd       	rcall	.-1196   	; 0x424 <DecimalToBCD>
     8d0:	2f 81       	ldd	r18, Y+7	; 0x07
     8d2:	90 e4       	ldi	r25, 0x40	; 64
     8d4:	29 9f       	mul	r18, r25
     8d6:	90 01       	movw	r18, r0
     8d8:	11 24       	eor	r1, r1
     8da:	82 2b       	or	r24, r18
     8dc:	89 8f       	std	Y+25, r24	; 0x19
     8de:	ce e2       	ldi	r28, 0x2E	; 46
     8e0:	d1 e0       	ldi	r29, 0x01	; 1
     8e2:	8b 81       	ldd	r24, Y+3	; 0x03
     8e4:	9f dd       	rcall	.-1218   	; 0x424 <DecimalToBCD>
     8e6:	8f 73       	andi	r24, 0x3F	; 63
     8e8:	8b 8f       	std	Y+27, r24	; 0x1b
     8ea:	8c 81       	ldd	r24, Y+4	; 0x04
     8ec:	9b dd       	rcall	.-1226   	; 0x424 <DecimalToBCD>
     8ee:	8f 71       	andi	r24, 0x1F	; 31
     8f0:	8c 8f       	std	Y+28, r24	; 0x1c
     8f2:	8d 81       	ldd	r24, Y+5	; 0x05
     8f4:	97 dd       	rcall	.-1234   	; 0x424 <DecimalToBCD>
     8f6:	8d 8f       	std	Y+29, r24	; 0x1d
     8f8:	49 89       	ldd	r20, Y+17	; 0x11
     8fa:	68 e0       	ldi	r22, 0x08	; 8
     8fc:	84 e4       	ldi	r24, 0x44	; 68
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	f6 d3       	rcall	.+2028   	; 0x10ee <I2C_Send_ST>
     902:	8d 85       	ldd	r24, Y+13	; 0x0d
     904:	8a 8b       	std	Y+18, r24	; 0x12
     906:	83 e6       	ldi	r24, 0x63	; 99
     908:	8d 87       	std	Y+13, r24	; 0x0d
     90a:	b4 c0       	rjmp	.+360    	; 0xa74 <__stack+0x575>
     90c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     910:	88 23       	and	r24, r24
     912:	09 f4       	brne	.+2      	; 0x916 <__stack+0x417>
     914:	af c0       	rjmp	.+350    	; 0xa74 <__stack+0x575>
     916:	ee e2       	ldi	r30, 0x2E	; 46
     918:	f1 e0       	ldi	r31, 0x01	; 1
     91a:	10 8a       	std	Z+16, r1	; 0x10
     91c:	15 86       	std	Z+13, r1	; 0x0d
     91e:	13 8a       	std	Z+19, r1	; 0x13
     920:	a9 c0       	rjmp	.+338    	; 0xa74 <__stack+0x575>
     922:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     926:	d0 d3       	rcall	.+1952   	; 0x10c8 <I2C_Ready>
     928:	88 23       	and	r24, r24
     92a:	51 f1       	breq	.+84     	; 0x980 <__stack+0x481>
     92c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     930:	81 11       	cpse	r24, r1
     932:	2b c0       	rjmp	.+86     	; 0x98a <__stack+0x48b>
     934:	88 e0       	ldi	r24, 0x08	; 8
     936:	e4 e4       	ldi	r30, 0x44	; 68
     938:	f1 e0       	ldi	r31, 0x01	; 1
     93a:	df 01       	movw	r26, r30
     93c:	1d 92       	st	X+, r1
     93e:	8a 95       	dec	r24
     940:	e9 f7       	brne	.-6      	; 0x93c <__stack+0x43d>
     942:	ce e2       	ldi	r28, 0x2E	; 46
     944:	d1 e0       	ldi	r29, 0x01	; 1
     946:	87 e0       	ldi	r24, 0x07	; 7
     948:	8e 8b       	std	Y+22, r24	; 0x16
     94a:	9b 85       	ldd	r25, Y+11	; 0x0b
     94c:	b0 e8       	ldi	r27, 0x80	; 128
     94e:	9b 9f       	mul	r25, r27
     950:	a0 01       	movw	r20, r0
     952:	11 24       	eor	r1, r1
     954:	2a 85       	ldd	r18, Y+10	; 0x0a
     956:	30 e1       	ldi	r19, 0x10	; 16
     958:	23 9f       	mul	r18, r19
     95a:	c0 01       	movw	r24, r0
     95c:	11 24       	eor	r1, r1
     95e:	94 2f       	mov	r25, r20
     960:	98 2b       	or	r25, r24
     962:	88 85       	ldd	r24, Y+8	; 0x08
     964:	98 2b       	or	r25, r24
     966:	89 85       	ldd	r24, Y+9	; 0x09
     968:	88 0f       	add	r24, r24
     96a:	89 2b       	or	r24, r25
     96c:	8f 8b       	std	Y+23, r24	; 0x17
     96e:	49 89       	ldd	r20, Y+17	; 0x11
     970:	62 e0       	ldi	r22, 0x02	; 2
     972:	cf 01       	movw	r24, r30
     974:	bc d3       	rcall	.+1912   	; 0x10ee <I2C_Send_ST>
     976:	8d 85       	ldd	r24, Y+13	; 0x0d
     978:	8a 8b       	std	Y+18, r24	; 0x12
     97a:	83 e6       	ldi	r24, 0x63	; 99
     97c:	8d 87       	std	Y+13, r24	; 0x0d
     97e:	7a c0       	rjmp	.+244    	; 0xa74 <__stack+0x575>
     980:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     984:	88 23       	and	r24, r24
     986:	09 f4       	brne	.+2      	; 0x98a <__stack+0x48b>
     988:	75 c0       	rjmp	.+234    	; 0xa74 <__stack+0x575>
     98a:	ee e2       	ldi	r30, 0x2E	; 46
     98c:	f1 e0       	ldi	r31, 0x01	; 1
     98e:	10 8a       	std	Z+16, r1	; 0x10
     990:	15 86       	std	Z+13, r1	; 0x0d
     992:	13 8a       	std	Z+19, r1	; 0x13
     994:	6f c0       	rjmp	.+222    	; 0xa74 <__stack+0x575>
     996:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     99a:	96 d3       	rcall	.+1836   	; 0x10c8 <I2C_Ready>
     99c:	88 23       	and	r24, r24
     99e:	d9 f0       	breq	.+54     	; 0x9d6 <__stack+0x4d7>
     9a0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     9a4:	81 11       	cpse	r24, r1
     9a6:	1c c0       	rjmp	.+56     	; 0x9e0 <__stack+0x4e1>
     9a8:	88 e0       	ldi	r24, 0x08	; 8
     9aa:	e4 e4       	ldi	r30, 0x44	; 68
     9ac:	f1 e0       	ldi	r31, 0x01	; 1
     9ae:	df 01       	movw	r26, r30
     9b0:	1d 92       	st	X+, r1
     9b2:	8a 95       	dec	r24
     9b4:	e9 f7       	brne	.-6      	; 0x9b0 <__stack+0x4b1>
     9b6:	ce e2       	ldi	r28, 0x2E	; 46
     9b8:	d1 e0       	ldi	r29, 0x01	; 1
     9ba:	88 81       	ld	r24, Y
     9bc:	33 dd       	rcall	.-1434   	; 0x424 <DecimalToBCD>
     9be:	8f 77       	andi	r24, 0x7F	; 127
     9c0:	8f 8b       	std	Y+23, r24	; 0x17
     9c2:	49 89       	ldd	r20, Y+17	; 0x11
     9c4:	62 e0       	ldi	r22, 0x02	; 2
     9c6:	84 e4       	ldi	r24, 0x44	; 68
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	91 d3       	rcall	.+1826   	; 0x10ee <I2C_Send_ST>
     9cc:	8d 85       	ldd	r24, Y+13	; 0x0d
     9ce:	8a 8b       	std	Y+18, r24	; 0x12
     9d0:	83 e6       	ldi	r24, 0x63	; 99
     9d2:	8d 87       	std	Y+13, r24	; 0x0d
     9d4:	4f c0       	rjmp	.+158    	; 0xa74 <__stack+0x575>
     9d6:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     9da:	88 23       	and	r24, r24
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <__stack+0x4e1>
     9de:	4a c0       	rjmp	.+148    	; 0xa74 <__stack+0x575>
     9e0:	ee e2       	ldi	r30, 0x2E	; 46
     9e2:	f1 e0       	ldi	r31, 0x01	; 1
     9e4:	10 8a       	std	Z+16, r1	; 0x10
     9e6:	15 86       	std	Z+13, r1	; 0x0d
     9e8:	13 8a       	std	Z+19, r1	; 0x13
     9ea:	44 c0       	rjmp	.+136    	; 0xa74 <__stack+0x575>
     9ec:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     9f0:	6b d3       	rcall	.+1750   	; 0x10c8 <I2C_Ready>
     9f2:	88 23       	and	r24, r24
     9f4:	d9 f0       	breq	.+54     	; 0xa2c <__stack+0x52d>
     9f6:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     9fa:	81 11       	cpse	r24, r1
     9fc:	1b c0       	rjmp	.+54     	; 0xa34 <__stack+0x535>
     9fe:	88 e0       	ldi	r24, 0x08	; 8
     a00:	e4 e4       	ldi	r30, 0x44	; 68
     a02:	f1 e0       	ldi	r31, 0x01	; 1
     a04:	df 01       	movw	r26, r30
     a06:	1d 92       	st	X+, r1
     a08:	8a 95       	dec	r24
     a0a:	e9 f7       	brne	.-6      	; 0xa06 <__stack+0x507>
     a0c:	ce e2       	ldi	r28, 0x2E	; 46
     a0e:	d1 e0       	ldi	r29, 0x01	; 1
     a10:	88 81       	ld	r24, Y
     a12:	08 dd       	rcall	.-1520   	; 0x424 <DecimalToBCD>
     a14:	80 68       	ori	r24, 0x80	; 128
     a16:	8f 8b       	std	Y+23, r24	; 0x17
     a18:	49 89       	ldd	r20, Y+17	; 0x11
     a1a:	62 e0       	ldi	r22, 0x02	; 2
     a1c:	84 e4       	ldi	r24, 0x44	; 68
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	66 d3       	rcall	.+1740   	; 0x10ee <I2C_Send_ST>
     a22:	8d 85       	ldd	r24, Y+13	; 0x0d
     a24:	8a 8b       	std	Y+18, r24	; 0x12
     a26:	83 e6       	ldi	r24, 0x63	; 99
     a28:	8d 87       	std	Y+13, r24	; 0x0d
     a2a:	24 c0       	rjmp	.+72     	; 0xa74 <__stack+0x575>
     a2c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     a30:	88 23       	and	r24, r24
     a32:	01 f1       	breq	.+64     	; 0xa74 <__stack+0x575>
     a34:	ee e2       	ldi	r30, 0x2E	; 46
     a36:	f1 e0       	ldi	r31, 0x01	; 1
     a38:	10 8a       	std	Z+16, r1	; 0x10
     a3a:	15 86       	std	Z+13, r1	; 0x0d
     a3c:	13 8a       	std	Z+19, r1	; 0x13
     a3e:	1a c0       	rjmp	.+52     	; 0xa74 <__stack+0x575>
     a40:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     a44:	2f d3       	rcall	.+1630   	; 0x10a4 <I2C_ID_State>
     a46:	85 36       	cpi	r24, 0x65	; 101
     a48:	49 f4       	brne	.+18     	; 0xa5c <__stack+0x55d>
     a4a:	ce e2       	ldi	r28, 0x2E	; 46
     a4c:	d1 e0       	ldi	r29, 0x01	; 1
     a4e:	1d 86       	std	Y+13, r1	; 0x0d
     a50:	1b 8a       	std	Y+19, r1	; 0x13
     a52:	89 89       	ldd	r24, Y+17	; 0x11
     a54:	30 d3       	rcall	.+1632   	; 0x10b6 <I2C_ID_Ack_Error>
     a56:	8a e0       	ldi	r24, 0x0A	; 10
     a58:	8e 87       	std	Y+14, r24	; 0x0e
     a5a:	10 c0       	rjmp	.+32     	; 0xa7c <__stack+0x57d>
     a5c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     a60:	33 d3       	rcall	.+1638   	; 0x10c8 <I2C_Ready>
     a62:	88 23       	and	r24, r24
     a64:	39 f0       	breq	.+14     	; 0xa74 <__stack+0x575>
     a66:	ee e2       	ldi	r30, 0x2E	; 46
     a68:	f1 e0       	ldi	r31, 0x01	; 1
     a6a:	82 89       	ldd	r24, Z+18	; 0x12
     a6c:	85 87       	std	Z+13, r24	; 0x0d
     a6e:	80 89       	ldd	r24, Z+16	; 0x10
     a70:	8f 5f       	subi	r24, 0xFF	; 255
     a72:	80 8b       	std	Z+16, r24	; 0x10
     a74:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <DS1307+0xe>
     a78:	88 23       	and	r24, r24
     a7a:	31 f0       	breq	.+12     	; 0xa88 <__stack+0x589>
     a7c:	71 da       	rcall	.-2846   	; 0xffffff60 <__eeprom_end+0xff7eff60>
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	81 11       	cpse	r24, r1
     a82:	03 c0       	rjmp	.+6      	; 0xa8a <__stack+0x58b>
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	01 c0       	rjmp	.+2      	; 0xa8a <__stack+0x58b>
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	ee e2       	ldi	r30, 0x2E	; 46
     a8c:	f1 e0       	ldi	r31, 0x01	; 1
     a8e:	86 85       	ldd	r24, Z+14	; 0x0e
     a90:	89 1b       	sub	r24, r25
     a92:	86 87       	std	Z+14, r24	; 0x0e
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	0f 91       	pop	r16
     a9a:	08 95       	ret

00000a9c <DS1307_Init>:
     a9c:	88 e0       	ldi	r24, 0x08	; 8
     a9e:	e4 e4       	ldi	r30, 0x44	; 68
     aa0:	f1 e0       	ldi	r31, 0x01	; 1
     aa2:	df 01       	movw	r26, r30
     aa4:	1d 92       	st	X+, r1
     aa6:	8a 95       	dec	r24
     aa8:	e9 f7       	brne	.-6      	; 0xaa4 <DS1307_Init+0x8>
     aaa:	ee e2       	ldi	r30, 0x2E	; 46
     aac:	f1 e0       	ldi	r31, 0x01	; 1
     aae:	10 8a       	std	Z+16, r1	; 0x10
     ab0:	14 86       	std	Z+12, r1	; 0x0c
     ab2:	81 89       	ldd	r24, Z+17	; 0x11
     ab4:	81 11       	cpse	r24, r1
     ab6:	7e d3       	rcall	.+1788   	; 0x11b4 <I2C_Free_Ident>
     ab8:	ee e2       	ldi	r30, 0x2E	; 46
     aba:	f1 e0       	ldi	r31, 0x01	; 1
     abc:	11 8a       	std	Z+17, r1	; 0x11
     abe:	16 86       	std	Z+14, r1	; 0x0e
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	83 8b       	std	Z+19, r24	; 0x13
     ac4:	08 95       	ret

00000ac6 <DS1307_Ready>:
     ac6:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <DS1307+0xd>
     aca:	81 11       	cpse	r24, r1
     acc:	0a c0       	rjmp	.+20     	; 0xae2 <DS1307_Ready+0x1c>
     ace:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <DS1307+0xc>
     ad2:	81 30       	cpi	r24, 0x01	; 1
     ad4:	41 f4       	brne	.+16     	; 0xae6 <DS1307_Ready+0x20>
     ad6:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <DS1307+0x13>
     ada:	99 23       	and	r25, r25
     adc:	29 f0       	breq	.+10     	; 0xae8 <DS1307_Ready+0x22>
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	08 95       	ret
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	08 95       	ret
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	08 95       	ret

00000aea <DS1307_Get_DateTime>:
     aea:	9c 01       	movw	r18, r24
     aec:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <DS1307+0x13>
     af0:	91 11       	cpse	r25, r1
     af2:	06 c0       	rjmp	.+12     	; 0xb00 <DS1307_Get_DateTime+0x16>
     af4:	ee e2       	ldi	r30, 0x2E	; 46
     af6:	f1 e0       	ldi	r31, 0x01	; 1
     af8:	35 8b       	std	Z+21, r19	; 0x15
     afa:	24 8b       	std	Z+20, r18	; 0x14
     afc:	84 e0       	ldi	r24, 0x04	; 4
     afe:	83 8b       	std	Z+19, r24	; 0x13
     b00:	08 95       	ret

00000b02 <DS1307_Get_TWLF>:
     b02:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <DS1307+0x7>
     b06:	08 95       	ret

00000b08 <DS1307_Get_PM>:
     b08:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <DS1307+0xf>
     b0c:	08 95       	ret

00000b0e <DS1307_Set_DateTime>:
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	fc 01       	movw	r30, r24
     b14:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <DS1307+0x13>
     b18:	91 11       	cpse	r25, r1
     b1a:	0c c0       	rjmp	.+24     	; 0xb34 <DS1307_Set_DateTime+0x26>
     b1c:	ce e2       	ldi	r28, 0x2E	; 46
     b1e:	d1 e0       	ldi	r29, 0x01	; 1
     b20:	fd 8b       	std	Y+21, r31	; 0x15
     b22:	ec 8b       	std	Y+20, r30	; 0x14
     b24:	86 e0       	ldi	r24, 0x06	; 6
     b26:	de 01       	movw	r26, r28
     b28:	01 90       	ld	r0, Z+
     b2a:	0d 92       	st	X+, r0
     b2c:	8a 95       	dec	r24
     b2e:	e1 f7       	brne	.-8      	; 0xb28 <DS1307_Set_DateTime+0x1a>
     b30:	8d e0       	ldi	r24, 0x0D	; 13
     b32:	8b 8b       	std	Y+19, r24	; 0x13
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	08 95       	ret

00000b3a <DS1307_Set_TWLF>:
	}
}

void DS1307_Set_TWLF(uint8_t _TWLF){
	if (DS1307.Command==Status_DS1307_Idle){
     b3a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <DS1307+0x13>
     b3e:	91 11       	cpse	r25, r1
     b40:	21 c0       	rjmp	.+66     	; 0xb84 <DS1307_Set_TWLF+0x4a>
		DS1307.Setting.sTWLF=_TWLF>0;
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	81 11       	cpse	r24, r1
     b46:	01 c0       	rjmp	.+2      	; 0xb4a <DS1307_Set_TWLF+0x10>
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <DS1307+0x7>
		if (DS1307.Time.Hour>12 && _TWLF){
     b4e:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <DS1307+0x2>
     b52:	9d 30       	cpi	r25, 0x0D	; 13
     b54:	48 f0       	brcs	.+18     	; 0xb68 <DS1307_Set_TWLF+0x2e>
     b56:	88 23       	and	r24, r24
     b58:	39 f0       	breq	.+14     	; 0xb68 <DS1307_Set_TWLF+0x2e>
			DS1307.Time.Hour-=12;
     b5a:	ee e2       	ldi	r30, 0x2E	; 46
     b5c:	f1 e0       	ldi	r31, 0x01	; 1
     b5e:	9c 50       	subi	r25, 0x0C	; 12
     b60:	92 83       	std	Z+2, r25	; 0x02
			DS1307.Is_PM=1;
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	87 87       	std	Z+15, r24	; 0x0f
     b66:	0b c0       	rjmp	.+22     	; 0xb7e <DS1307_Set_TWLF+0x44>
		}
		else if (DS1307.Is_PM && !_TWLF){
     b68:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <DS1307+0xf>
     b6c:	22 23       	and	r18, r18
     b6e:	39 f0       	breq	.+14     	; 0xb7e <DS1307_Set_TWLF+0x44>
     b70:	81 11       	cpse	r24, r1
     b72:	05 c0       	rjmp	.+10     	; 0xb7e <DS1307_Set_TWLF+0x44>
			DS1307.Time.Hour+=12;
     b74:	ee e2       	ldi	r30, 0x2E	; 46
     b76:	f1 e0       	ldi	r31, 0x01	; 1
     b78:	94 5f       	subi	r25, 0xF4	; 244
     b7a:	92 83       	std	Z+2, r25	; 0x02
			DS1307.Is_PM=0;
     b7c:	17 86       	std	Z+15, r1	; 0x0f
		}
		DS1307.Command=Status_DS1307_SetTime;
     b7e:	8b e0       	ldi	r24, 0x0B	; 11
     b80:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <DS1307+0x13>
     b84:	08 95       	ret

00000b86 <DS1307_Set_PM>:
	}
}

void DS1307_Set_PM(uint8_t _PM){
	if (DS1307.Setting.sTWLF){
     b86:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <DS1307+0x7>
     b8a:	91 11       	cpse	r25, r1
		DS1307.Is_PM=_PM;
     b8c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <DS1307+0xf>
     b90:	08 95       	ret

00000b92 <EEPROM_Loop>:
#include "EEPROMlib/EEPROMlib.h"

EEPROMLib_Struct EEPROM;

void EEPROM_Loop(){
	switch(EEPROM.Status){
     b92:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <EEPROM>
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	09 f4       	brne	.+2      	; 0xb9c <EEPROM_Loop+0xa>
     b9a:	48 c0       	rjmp	.+144    	; 0xc2c <EEPROM_Loop+0x9a>
     b9c:	28 f4       	brcc	.+10     	; 0xba8 <EEPROM_Loop+0x16>
     b9e:	88 23       	and	r24, r24
     ba0:	51 f0       	breq	.+20     	; 0xbb6 <EEPROM_Loop+0x24>
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	e9 f0       	breq	.+58     	; 0xbe0 <EEPROM_Loop+0x4e>
     ba6:	71 c0       	rjmp	.+226    	; 0xc8a <EEPROM_Loop+0xf8>
     ba8:	83 30       	cpi	r24, 0x03	; 3
     baa:	09 f4       	brne	.+2      	; 0xbae <EEPROM_Loop+0x1c>
     bac:	45 c0       	rjmp	.+138    	; 0xc38 <EEPROM_Loop+0xa6>
     bae:	84 30       	cpi	r24, 0x04	; 4
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <EEPROM_Loop+0x22>
     bb2:	65 c0       	rjmp	.+202    	; 0xc7e <EEPROM_Loop+0xec>
     bb4:	6a c0       	rjmp	.+212    	; 0xc8a <EEPROM_Loop+0xf8>
		case EEPROM_Status_IDLE:{
			if ((EEPROM_EECR & (1<<EEPROM_EEPE))==0){
     bb6:	f9 99       	sbic	0x1f, 1	; 31
     bb8:	6a c0       	rjmp	.+212    	; 0xc8e <EEPROM_Loop+0xfc>
				if (EEPROM.Size){
     bba:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <EEPROM+0x3>
     bbe:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <EEPROM+0x4>
     bc2:	89 2b       	or	r24, r25
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <EEPROM_Loop+0x36>
     bc6:	63 c0       	rjmp	.+198    	; 0xc8e <EEPROM_Loop+0xfc>
					if (EEPROM.Write){
     bc8:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <EEPROM+0x5>
     bcc:	88 23       	and	r24, r24
     bce:	21 f0       	breq	.+8      	; 0xbd8 <EEPROM_Loop+0x46>
						EEPROM.Status=EEPROM_Status_Write;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <EEPROM>
     bd6:	08 95       	ret
					}
					else{
						EEPROM.Status=EEPROM_Status_Read;
     bd8:	83 e0       	ldi	r24, 0x03	; 3
     bda:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <EEPROM>
     bde:	08 95       	ret
		}//case EEPROM_Status_IDLE
		break;
		
//////////////////////////////////Write date to the EEPROM////////////////////////////////////////
		case EEPROM_Status_Write:{
			if (EEPROM.Size){
     be0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <EEPROM+0x3>
     be4:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <EEPROM+0x4>
     be8:	00 97       	sbiw	r24, 0x00	; 0
     bea:	e9 f0       	breq	.+58     	; 0xc26 <EEPROM_Loop+0x94>
				//Prepare to write to the EEPROM
				EEPROM.Size--;
     bec:	ec e4       	ldi	r30, 0x4C	; 76
     bee:	f1 e0       	ldi	r31, 0x01	; 1
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	94 83       	std	Z+4, r25	; 0x04
     bf4:	83 83       	std	Z+3, r24	; 0x03
				cli();
     bf6:	f8 94       	cli
				EEPROM_EEAR		=EEPROM.Address++;
     bf8:	81 81       	ldd	r24, Z+1	; 0x01
     bfa:	92 81       	ldd	r25, Z+2	; 0x02
     bfc:	9c 01       	movw	r18, r24
     bfe:	2f 5f       	subi	r18, 0xFF	; 255
     c00:	3f 4f       	sbci	r19, 0xFF	; 255
     c02:	32 83       	std	Z+2, r19	; 0x02
     c04:	21 83       	std	Z+1, r18	; 0x01
     c06:	92 bd       	out	0x22, r25	; 34
     c08:	81 bd       	out	0x21, r24	; 33
				EEPROM_EEDR		=*EEPROM.Data_ptr++;
     c0a:	a6 81       	ldd	r26, Z+6	; 0x06
     c0c:	b7 81       	ldd	r27, Z+7	; 0x07
     c0e:	cd 01       	movw	r24, r26
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	97 83       	std	Z+7, r25	; 0x07
     c14:	86 83       	std	Z+6, r24	; 0x06
     c16:	8c 91       	ld	r24, X
     c18:	80 bd       	out	0x20, r24	; 32
				EEPROM_EECR		|=(1<<EEPROM_EEMPE);//Do we want to write to the EEPROM?
     c1a:	fa 9a       	sbi	0x1f, 2	; 31
				EEPROM_EECR		|=(1<<EEPROM_EEPE);//Yes we do!
     c1c:	f9 9a       	sbi	0x1f, 1	; 31
				sei();
     c1e:	78 94       	sei
				EEPROM.Status	=EEPROM_Status_Write_Wait;//Wait for the writing to finish
     c20:	82 e0       	ldi	r24, 0x02	; 2
     c22:	80 83       	st	Z, r24
     c24:	08 95       	ret
			}
			else{
				EEPROM.Status	=EEPROM_Status_IDLE;
     c26:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <EEPROM>
     c2a:	08 95       	ret
			}
		}//case EEPROM_Status_Write
		break;
		
		case EEPROM_Status_Write_Wait:{
			if ((EEPROM_EECR & (1<<EEPROM_EEPE))==0){
     c2c:	f9 99       	sbic	0x1f, 1	; 31
     c2e:	2f c0       	rjmp	.+94     	; 0xc8e <EEPROM_Loop+0xfc>
				EEPROM.Status	=EEPROM_Status_Write;
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <EEPROM>
     c36:	08 95       	ret
		}//case EEPROM_Status_Read_Wait
		break;

//////////////////////////////////Read data from the EEPROM////////////////////////////////////////
		case EEPROM_Status_Read:{
			if (EEPROM.Size>0){
     c38:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <EEPROM+0x3>
     c3c:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <EEPROM+0x4>
     c40:	00 97       	sbiw	r24, 0x00	; 0
     c42:	d1 f0       	breq	.+52     	; 0xc78 <EEPROM_Loop+0xe6>
				//Prepare to read from the EEPROM
				EEPROM.Size--;
     c44:	ec e4       	ldi	r30, 0x4C	; 76
     c46:	f1 e0       	ldi	r31, 0x01	; 1
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	94 83       	std	Z+4, r25	; 0x04
     c4c:	83 83       	std	Z+3, r24	; 0x03
				EEPROM_EEAR		=EEPROM.Address++;
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	92 81       	ldd	r25, Z+2	; 0x02
     c52:	9c 01       	movw	r18, r24
     c54:	2f 5f       	subi	r18, 0xFF	; 255
     c56:	3f 4f       	sbci	r19, 0xFF	; 255
     c58:	32 83       	std	Z+2, r19	; 0x02
     c5a:	21 83       	std	Z+1, r18	; 0x01
     c5c:	92 bd       	out	0x22, r25	; 34
     c5e:	81 bd       	out	0x21, r24	; 33
				EEPROM_EECR		|=(1<<EEPROM_EERE);//Read from the EEPROM
     c60:	f8 9a       	sbi	0x1f, 0	; 31
				*EEPROM.Data_ptr++ =EEPROM_EEDR;
     c62:	a6 81       	ldd	r26, Z+6	; 0x06
     c64:	b7 81       	ldd	r27, Z+7	; 0x07
     c66:	cd 01       	movw	r24, r26
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	97 83       	std	Z+7, r25	; 0x07
     c6c:	86 83       	std	Z+6, r24	; 0x06
     c6e:	80 b5       	in	r24, 0x20	; 32
     c70:	8c 93       	st	X, r24
				EEPROM.Status	=EEPROM_Status_Read_Wait;//Wait for the writing to finish
     c72:	84 e0       	ldi	r24, 0x04	; 4
     c74:	80 83       	st	Z, r24
     c76:	08 95       	ret
			}
			else{
				EEPROM.Status	=EEPROM_Status_IDLE;
     c78:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <EEPROM>
     c7c:	08 95       	ret
			}
		}//case EEPROM_Status_Read
		break;
		
		case EEPROM_Status_Read_Wait:{
			if ((EEPROM_EECR & (1<<EEPROM_EEPE))==0){
     c7e:	f9 99       	sbic	0x1f, 1	; 31
     c80:	06 c0       	rjmp	.+12     	; 0xc8e <EEPROM_Loop+0xfc>
				EEPROM.Status	=EEPROM_Status_Read;
     c82:	83 e0       	ldi	r24, 0x03	; 3
     c84:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <EEPROM>
     c88:	08 95       	ret
			}
		}//case EEPROM_Status_Read_Wait
		break;

		default:{
			EEPROM.Status=EEPROM_Status_IDLE;
     c8a:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <EEPROM>
     c8e:	08 95       	ret

00000c90 <EEPROM_Status>:
		}
	}//switch(EEPROM.Status)
}//EEPROM_Loop

uint8_t EEPROM_Status(){
	if (EEPROM.Size>0){
     c90:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <EEPROM+0x3>
     c94:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <EEPROM+0x4>
     c98:	89 2b       	or	r24, r25
     c9a:	19 f4       	brne	.+6      	; 0xca2 <EEPROM_Status+0x12>
		return EEPROM_Status_Busy;
	}
	return EEPROM.Status;
     c9c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <EEPROM>
     ca0:	08 95       	ret
	}//switch(EEPROM.Status)
}//EEPROM_Loop

uint8_t EEPROM_Status(){
	if (EEPROM.Size>0){
		return EEPROM_Status_Busy;
     ca2:	83 e6       	ldi	r24, 0x63	; 99
	}
	return EEPROM.Status;
}
     ca4:	08 95       	ret

00000ca6 <EEPROM_Write>:

void EEPROM_Write(uint16_t _Address, uint16_t _Size, uint8_t *_Data_ptr){
	EEPROM.Address	=_Address;
     ca6:	ec e4       	ldi	r30, 0x4C	; 76
     ca8:	f1 e0       	ldi	r31, 0x01	; 1
     caa:	92 83       	std	Z+2, r25	; 0x02
     cac:	81 83       	std	Z+1, r24	; 0x01
	EEPROM.Size		=_Size;
     cae:	74 83       	std	Z+4, r23	; 0x04
     cb0:	63 83       	std	Z+3, r22	; 0x03
	EEPROM.Data_ptr	=_Data_ptr;
     cb2:	57 83       	std	Z+7, r21	; 0x07
     cb4:	46 83       	std	Z+6, r20	; 0x06
	EEPROM.Write++;
     cb6:	85 81       	ldd	r24, Z+5	; 0x05
     cb8:	8f 5f       	subi	r24, 0xFF	; 255
     cba:	85 83       	std	Z+5, r24	; 0x05
     cbc:	08 95       	ret

00000cbe <EEPROM_Read>:
}

void EEPROM_Read(uint16_t _Address, uint16_t _Size, uint8_t *_Data_ptr){
	EEPROM.Address	=_Address;
     cbe:	ec e4       	ldi	r30, 0x4C	; 76
     cc0:	f1 e0       	ldi	r31, 0x01	; 1
     cc2:	92 83       	std	Z+2, r25	; 0x02
     cc4:	81 83       	std	Z+1, r24	; 0x01
	EEPROM.Size		=_Size;
     cc6:	74 83       	std	Z+4, r23	; 0x04
     cc8:	63 83       	std	Z+3, r22	; 0x03
	EEPROM.Data_ptr	=_Data_ptr;
     cca:	57 83       	std	Z+7, r21	; 0x07
     ccc:	46 83       	std	Z+6, r20	; 0x06
	EEPROM.Write	=0;
     cce:	15 82       	std	Z+5, r1	; 0x05
     cd0:	08 95       	ret

00000cd2 <I2C_Loop>:
void I2C_Recieve(uint8_t *_Data_Ptr, uint8_t _Amount, uint8_t _Ident){
	if ((int)_Data_Ptr > RAMSTART && (int)_Data_Ptr < RAMEND){
		TWI.Ident[_Ident].Receive_Data_ptr=_Data_Ptr;
		TWI.Ident[_Ident].Receive_Amount=_Amount;
		TWI.Ident[_Ident].Send=false;
		TWI.Ident[_Ident].Status=State_I2C_Start;
     cd2:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <TWI+0x2>
     cd6:	e4 36       	cpi	r30, 0x64	; 100
     cd8:	10 f4       	brcc	.+4      	; 0xcde <I2C_Loop+0xc>
     cda:	e0 93 57 01 	sts	0x0157, r30	; 0x800157 <TWI+0x3>
     cde:	8e 2f       	mov	r24, r30
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	85 36       	cpi	r24, 0x65	; 101
     ce4:	91 05       	cpc	r25, r1
     ce6:	08 f0       	brcs	.+2      	; 0xcea <I2C_Loop+0x18>
     ce8:	cf c1       	rjmp	.+926    	; 0x1088 <I2C_Loop+0x3b6>
     cea:	fc 01       	movw	r30, r24
     cec:	e2 58       	subi	r30, 0x82	; 130
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	09 94       	ijmp
     cf2:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <TWI>
     cf6:	88 23       	and	r24, r24
     cf8:	09 f4       	brne	.+2      	; 0xcfc <I2C_Loop+0x2a>
     cfa:	c8 c1       	rjmp	.+912    	; 0x108c <I2C_Loop+0x3ba>
     cfc:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <TWI+0x1>
     d00:	88 23       	and	r24, r24
     d02:	09 f4       	brne	.+2      	; 0xd06 <I2C_Loop+0x34>
     d04:	c3 c1       	rjmp	.+902    	; 0x108c <I2C_Loop+0x3ba>
     d06:	e4 e5       	ldi	r30, 0x54	; 84
     d08:	f1 e0       	ldi	r31, 0x01	; 1
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	df 01       	movw	r26, r30
     d0e:	90 a1       	ldd	r25, Z+32	; 0x20
     d10:	91 11       	cpse	r25, r1
     d12:	03 c0       	rjmp	.+6      	; 0xd1a <I2C_Loop+0x48>
     d14:	91 a1       	ldd	r25, Z+33	; 0x21
     d16:	99 23       	and	r25, r25
     d18:	51 f0       	breq	.+20     	; 0xd2e <I2C_Loop+0x5c>
     d1a:	98 96       	adiw	r26, 0x28	; 40
     d1c:	9c 91       	ld	r25, X
     d1e:	99 23       	and	r25, r25
     d20:	31 f0       	breq	.+12     	; 0xd2e <I2C_Loop+0x5c>
     d22:	e4 e5       	ldi	r30, 0x54	; 84
     d24:	f1 e0       	ldi	r31, 0x01	; 1
     d26:	92 e0       	ldi	r25, 0x02	; 2
     d28:	92 83       	std	Z+2, r25	; 0x02
     d2a:	87 83       	std	Z+7, r24	; 0x07
     d2c:	08 95       	ret
     d2e:	8f 5f       	subi	r24, 0xFF	; 255
     d30:	3f 96       	adiw	r30, 0x0f	; 15
     d32:	85 30       	cpi	r24, 0x05	; 5
     d34:	59 f7       	brne	.-42     	; 0xd0c <I2C_Loop+0x3a>
     d36:	08 95       	ret
     d38:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
     d3c:	80 e2       	ldi	r24, 0x20	; 32
     d3e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__EEPROM_REGION_LENGTH__+0x7f00b8>
     d42:	84 e0       	ldi	r24, 0x04	; 4
     d44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
     d48:	88 b1       	in	r24, 0x08	; 8
     d4a:	80 63       	ori	r24, 0x30	; 48
     d4c:	88 b9       	out	0x08, r24	; 8
     d4e:	e4 e5       	ldi	r30, 0x54	; 84
     d50:	f1 e0       	ldi	r31, 0x01	; 1
     d52:	10 a6       	std	Z+40, r1	; 0x28
     d54:	17 aa       	std	Z+55, r1	; 0x37
     d56:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <TWI+0x46>
     d5a:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <TWI+0x55>
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	81 83       	std	Z+1, r24	; 0x01
     d62:	12 82       	std	Z+2, r1	; 0x02
     d64:	08 95       	ret
     d66:	83 e0       	ldi	r24, 0x03	; 3
     d68:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
     d6c:	84 ea       	ldi	r24, 0xA4	; 164
     d6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
     d72:	08 95       	ret
     d74:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
     d78:	88 23       	and	r24, r24
     d7a:	0c f0       	brlt	.+2      	; 0xd7e <I2C_Loop+0xac>
     d7c:	87 c1       	rjmp	.+782    	; 0x108c <I2C_Loop+0x3ba>
     d7e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
     d82:	88 7f       	andi	r24, 0xF8	; 248
     d84:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <TWI+0x8>
     d88:	88 30       	cpi	r24, 0x08	; 8
     d8a:	11 f0       	breq	.+4      	; 0xd90 <I2C_Loop+0xbe>
     d8c:	80 31       	cpi	r24, 0x10	; 16
     d8e:	21 f4       	brne	.+8      	; 0xd98 <I2C_Loop+0xc6>
     d90:	84 e0       	ldi	r24, 0x04	; 4
     d92:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
     d96:	08 95       	ret
     d98:	e4 e5       	ldi	r30, 0x54	; 84
     d9a:	f1 e0       	ldi	r31, 0x01	; 1
     d9c:	94 e6       	ldi	r25, 0x64	; 100
     d9e:	92 83       	std	Z+2, r25	; 0x02
     da0:	83 83       	std	Z+3, r24	; 0x03
     da2:	08 95       	ret
     da4:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <TWI+0x7>
     da8:	2e 2f       	mov	r18, r30
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	8f e0       	ldi	r24, 0x0F	; 15
     dae:	e8 9f       	mul	r30, r24
     db0:	f0 01       	movw	r30, r0
     db2:	11 24       	eor	r1, r1
     db4:	ec 5a       	subi	r30, 0xAC	; 172
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
     db8:	81 89       	ldd	r24, Z+17	; 0x11
     dba:	88 23       	and	r24, r24
     dbc:	99 f0       	breq	.+38     	; 0xde4 <I2C_Loop+0x112>
     dbe:	85 e0       	ldi	r24, 0x05	; 5
     dc0:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
     dc4:	8f e0       	ldi	r24, 0x0F	; 15
     dc6:	82 9f       	mul	r24, r18
     dc8:	f0 01       	movw	r30, r0
     dca:	83 9f       	mul	r24, r19
     dcc:	f0 0d       	add	r31, r0
     dce:	11 24       	eor	r1, r1
     dd0:	ec 5a       	subi	r30, 0xAC	; 172
     dd2:	fe 4f       	sbci	r31, 0xFE	; 254
     dd4:	85 89       	ldd	r24, Z+21	; 0x15
     dd6:	88 0f       	add	r24, r24
     dd8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>
     ddc:	84 e8       	ldi	r24, 0x84	; 132
     dde:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
     de2:	08 95       	ret
     de4:	85 e0       	ldi	r24, 0x05	; 5
     de6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
     dea:	8f e0       	ldi	r24, 0x0F	; 15
     dec:	82 9f       	mul	r24, r18
     dee:	f0 01       	movw	r30, r0
     df0:	83 9f       	mul	r24, r19
     df2:	f0 0d       	add	r31, r0
     df4:	11 24       	eor	r1, r1
     df6:	ec 5a       	subi	r30, 0xAC	; 172
     df8:	fe 4f       	sbci	r31, 0xFE	; 254
     dfa:	85 89       	ldd	r24, Z+21	; 0x15
     dfc:	88 0f       	add	r24, r24
     dfe:	8f 5f       	subi	r24, 0xFF	; 255
     e00:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>
     e04:	84 e8       	ldi	r24, 0x84	; 132
     e06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
     e0a:	08 95       	ret
     e0c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
     e10:	88 23       	and	r24, r24
     e12:	0c f0       	brlt	.+2      	; 0xe16 <I2C_Loop+0x144>
     e14:	3b c1       	rjmp	.+630    	; 0x108c <I2C_Loop+0x3ba>
     e16:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
     e1a:	88 7f       	andi	r24, 0xF8	; 248
     e1c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <TWI+0x8>
     e20:	88 31       	cpi	r24, 0x18	; 24
     e22:	11 f0       	breq	.+4      	; 0xe28 <I2C_Loop+0x156>
     e24:	80 34       	cpi	r24, 0x40	; 64
     e26:	99 f4       	brne	.+38     	; 0xe4e <I2C_Loop+0x17c>
     e28:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <TWI+0x7>
     e2c:	2f e0       	ldi	r18, 0x0F	; 15
     e2e:	e2 9f       	mul	r30, r18
     e30:	f0 01       	movw	r30, r0
     e32:	11 24       	eor	r1, r1
     e34:	ec 5a       	subi	r30, 0xAC	; 172
     e36:	fe 4f       	sbci	r31, 0xFE	; 254
     e38:	81 89       	ldd	r24, Z+17	; 0x11
     e3a:	88 23       	and	r24, r24
     e3c:	21 f0       	breq	.+8      	; 0xe46 <I2C_Loop+0x174>
     e3e:	8a e0       	ldi	r24, 0x0A	; 10
     e40:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
     e44:	08 95       	ret
     e46:	8c e0       	ldi	r24, 0x0C	; 12
     e48:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
     e4c:	08 95       	ret
     e4e:	80 32       	cpi	r24, 0x20	; 32
     e50:	c1 f4       	brne	.+48     	; 0xe82 <I2C_Loop+0x1b0>
     e52:	a4 e5       	ldi	r26, 0x54	; 84
     e54:	b1 e0       	ldi	r27, 0x01	; 1
     e56:	12 96       	adiw	r26, 0x02	; 2
     e58:	1c 92       	st	X, r1
     e5a:	12 97       	sbiw	r26, 0x02	; 2
     e5c:	17 96       	adiw	r26, 0x07	; 7
     e5e:	ec 91       	ld	r30, X
     e60:	17 97       	sbiw	r26, 0x07	; 7
     e62:	8f e0       	ldi	r24, 0x0F	; 15
     e64:	e8 9f       	mul	r30, r24
     e66:	f0 01       	movw	r30, r0
     e68:	11 24       	eor	r1, r1
     e6a:	ec 5a       	subi	r30, 0xAC	; 172
     e6c:	fe 4f       	sbci	r31, 0xFE	; 254
     e6e:	11 8a       	std	Z+17, r1	; 0x11
     e70:	12 8a       	std	Z+18, r1	; 0x12
     e72:	85 e6       	ldi	r24, 0x65	; 101
     e74:	80 8f       	std	Z+24, r24	; 0x18
     e76:	17 96       	adiw	r26, 0x07	; 7
     e78:	1c 92       	st	X, r1
     e7a:	84 e9       	ldi	r24, 0x94	; 148
     e7c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
     e80:	08 95       	ret
     e82:	88 33       	cpi	r24, 0x38	; 56
     e84:	21 f4       	brne	.+8      	; 0xe8e <I2C_Loop+0x1bc>
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
     e8c:	08 95       	ret
     e8e:	e4 e5       	ldi	r30, 0x54	; 84
     e90:	f1 e0       	ldi	r31, 0x01	; 1
     e92:	83 83       	std	Z+3, r24	; 0x03
     e94:	84 e6       	ldi	r24, 0x64	; 100
     e96:	82 83       	std	Z+2, r24	; 0x02
     e98:	08 95       	ret
     e9a:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <TWI+0x7>
     e9e:	8e 2f       	mov	r24, r30
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	2f e0       	ldi	r18, 0x0F	; 15
     ea4:	e2 9f       	mul	r30, r18
     ea6:	f0 01       	movw	r30, r0
     ea8:	11 24       	eor	r1, r1
     eaa:	ec 5a       	subi	r30, 0xAC	; 172
     eac:	fe 4f       	sbci	r31, 0xFE	; 254
     eae:	21 89       	ldd	r18, Z+17	; 0x11
     eb0:	22 23       	and	r18, r18
     eb2:	a9 f0       	breq	.+42     	; 0xede <I2C_Loop+0x20c>
     eb4:	2f e0       	ldi	r18, 0x0F	; 15
     eb6:	28 9f       	mul	r18, r24
     eb8:	f0 01       	movw	r30, r0
     eba:	29 9f       	mul	r18, r25
     ebc:	f0 0d       	add	r31, r0
     ebe:	11 24       	eor	r1, r1
     ec0:	ec 5a       	subi	r30, 0xAC	; 172
     ec2:	fe 4f       	sbci	r31, 0xFE	; 254
     ec4:	03 84       	ldd	r0, Z+11	; 0x0b
     ec6:	f4 85       	ldd	r31, Z+12	; 0x0c
     ec8:	e0 2d       	mov	r30, r0
     eca:	80 81       	ld	r24, Z
     ecc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>
     ed0:	84 e8       	ldi	r24, 0x84	; 132
     ed2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
     ed6:	8b e0       	ldi	r24, 0x0B	; 11
     ed8:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
     edc:	08 95       	ret
     ede:	2f e0       	ldi	r18, 0x0F	; 15
     ee0:	28 9f       	mul	r18, r24
     ee2:	f0 01       	movw	r30, r0
     ee4:	29 9f       	mul	r18, r25
     ee6:	f0 0d       	add	r31, r0
     ee8:	11 24       	eor	r1, r1
     eea:	ec 5a       	subi	r30, 0xAC	; 172
     eec:	fe 4f       	sbci	r31, 0xFE	; 254
     eee:	22 89       	ldd	r18, Z+18	; 0x12
     ef0:	22 23       	and	r18, r18
     ef2:	21 f0       	breq	.+8      	; 0xefc <I2C_Loop+0x22a>
     ef4:	82 e0       	ldi	r24, 0x02	; 2
     ef6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
     efa:	08 95       	ret
     efc:	2f e0       	ldi	r18, 0x0F	; 15
     efe:	28 9f       	mul	r18, r24
     f00:	f0 01       	movw	r30, r0
     f02:	29 9f       	mul	r18, r25
     f04:	f0 0d       	add	r31, r0
     f06:	11 24       	eor	r1, r1
     f08:	ec 5a       	subi	r30, 0xAC	; 172
     f0a:	fe 4f       	sbci	r31, 0xFE	; 254
     f0c:	10 8e       	std	Z+24, r1	; 0x18
     f0e:	84 e9       	ldi	r24, 0x94	; 148
     f10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
     f14:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <TWI+0x2>
     f18:	08 95       	ret
     f1a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
     f1e:	88 23       	and	r24, r24
     f20:	0c f0       	brlt	.+2      	; 0xf24 <I2C_Loop+0x252>
     f22:	b4 c0       	rjmp	.+360    	; 0x108c <I2C_Loop+0x3ba>
     f24:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
     f28:	88 7f       	andi	r24, 0xF8	; 248
     f2a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <TWI+0x8>
     f2e:	88 32       	cpi	r24, 0x28	; 40
     f30:	b9 f4       	brne	.+46     	; 0xf60 <I2C_Loop+0x28e>
     f32:	a4 e5       	ldi	r26, 0x54	; 84
     f34:	b1 e0       	ldi	r27, 0x01	; 1
     f36:	17 96       	adiw	r26, 0x07	; 7
     f38:	ec 91       	ld	r30, X
     f3a:	17 97       	sbiw	r26, 0x07	; 7
     f3c:	8f e0       	ldi	r24, 0x0F	; 15
     f3e:	e8 9f       	mul	r30, r24
     f40:	f0 01       	movw	r30, r0
     f42:	11 24       	eor	r1, r1
     f44:	ec 5a       	subi	r30, 0xAC	; 172
     f46:	fe 4f       	sbci	r31, 0xFE	; 254
     f48:	83 85       	ldd	r24, Z+11	; 0x0b
     f4a:	94 85       	ldd	r25, Z+12	; 0x0c
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	94 87       	std	Z+12, r25	; 0x0c
     f50:	83 87       	std	Z+11, r24	; 0x0b
     f52:	81 89       	ldd	r24, Z+17	; 0x11
     f54:	81 50       	subi	r24, 0x01	; 1
     f56:	81 8b       	std	Z+17, r24	; 0x11
     f58:	8a e0       	ldi	r24, 0x0A	; 10
     f5a:	12 96       	adiw	r26, 0x02	; 2
     f5c:	8c 93       	st	X, r24
     f5e:	08 95       	ret
     f60:	84 e9       	ldi	r24, 0x94	; 148
     f62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
     f66:	a4 e5       	ldi	r26, 0x54	; 84
     f68:	b1 e0       	ldi	r27, 0x01	; 1
     f6a:	17 96       	adiw	r26, 0x07	; 7
     f6c:	ec 91       	ld	r30, X
     f6e:	17 97       	sbiw	r26, 0x07	; 7
     f70:	2f e0       	ldi	r18, 0x0F	; 15
     f72:	e2 9f       	mul	r30, r18
     f74:	f0 01       	movw	r30, r0
     f76:	11 24       	eor	r1, r1
     f78:	ec 5a       	subi	r30, 0xAC	; 172
     f7a:	fe 4f       	sbci	r31, 0xFE	; 254
     f7c:	18 96       	adiw	r26, 0x08	; 8
     f7e:	8c 91       	ld	r24, X
     f80:	18 97       	sbiw	r26, 0x08	; 8
     f82:	80 8f       	std	Z+24, r24	; 0x18
     f84:	14 86       	std	Z+12, r1	; 0x0c
     f86:	13 86       	std	Z+11, r1	; 0x0b
     f88:	11 8a       	std	Z+17, r1	; 0x11
     f8a:	16 86       	std	Z+14, r1	; 0x0e
     f8c:	15 86       	std	Z+13, r1	; 0x0d
     f8e:	12 8a       	std	Z+18, r1	; 0x12
     f90:	12 96       	adiw	r26, 0x02	; 2
     f92:	1c 92       	st	X, r1
     f94:	08 95       	ret
     f96:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <TWI+0x7>
     f9a:	2e 2f       	mov	r18, r30
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	8f e0       	ldi	r24, 0x0F	; 15
     fa0:	e8 9f       	mul	r30, r24
     fa2:	f0 01       	movw	r30, r0
     fa4:	11 24       	eor	r1, r1
     fa6:	ec 5a       	subi	r30, 0xAC	; 172
     fa8:	fe 4f       	sbci	r31, 0xFE	; 254
     faa:	82 89       	ldd	r24, Z+18	; 0x12
     fac:	82 30       	cpi	r24, 0x02	; 2
     fae:	38 f0       	brcs	.+14     	; 0xfbe <I2C_Loop+0x2ec>
     fb0:	84 ec       	ldi	r24, 0xC4	; 196
     fb2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
     fb6:	8d e0       	ldi	r24, 0x0D	; 13
     fb8:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
     fbc:	08 95       	ret
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	39 f4       	brne	.+14     	; 0xfd0 <I2C_Loop+0x2fe>
     fc2:	84 e8       	ldi	r24, 0x84	; 132
     fc4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
     fc8:	8d e0       	ldi	r24, 0x0D	; 13
     fca:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
     fce:	08 95       	ret
     fd0:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <TWI+0x2>
     fd4:	8f e0       	ldi	r24, 0x0F	; 15
     fd6:	82 9f       	mul	r24, r18
     fd8:	f0 01       	movw	r30, r0
     fda:	83 9f       	mul	r24, r19
     fdc:	f0 0d       	add	r31, r0
     fde:	11 24       	eor	r1, r1
     fe0:	ec 5a       	subi	r30, 0xAC	; 172
     fe2:	fe 4f       	sbci	r31, 0xFE	; 254
     fe4:	10 8e       	std	Z+24, r1	; 0x18
     fe6:	84 e9       	ldi	r24, 0x94	; 148
     fe8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
     fec:	08 95       	ret
     fee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
     ff2:	88 23       	and	r24, r24
     ff4:	0c f0       	brlt	.+2      	; 0xff8 <I2C_Loop+0x326>
     ff6:	4a c0       	rjmp	.+148    	; 0x108c <I2C_Loop+0x3ba>
     ff8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
     ffc:	98 2f       	mov	r25, r24
     ffe:	98 7f       	andi	r25, 0xF8	; 248
    1000:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <TWI+0x8>
    1004:	80 7f       	andi	r24, 0xF0	; 240
    1006:	80 35       	cpi	r24, 0x50	; 80
    1008:	29 f5       	brne	.+74     	; 0x1054 <I2C_Loop+0x382>
    100a:	a4 e5       	ldi	r26, 0x54	; 84
    100c:	b1 e0       	ldi	r27, 0x01	; 1
    100e:	17 96       	adiw	r26, 0x07	; 7
    1010:	ec 91       	ld	r30, X
    1012:	17 97       	sbiw	r26, 0x07	; 7
    1014:	8f e0       	ldi	r24, 0x0F	; 15
    1016:	8e 9f       	mul	r24, r30
    1018:	f0 01       	movw	r30, r0
    101a:	11 24       	eor	r1, r1
    101c:	ec 5a       	subi	r30, 0xAC	; 172
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	05 84       	ldd	r0, Z+13	; 0x0d
    1022:	f6 85       	ldd	r31, Z+14	; 0x0e
    1024:	e0 2d       	mov	r30, r0
    1026:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>
    102a:	90 83       	st	Z, r25
    102c:	17 96       	adiw	r26, 0x07	; 7
    102e:	ec 91       	ld	r30, X
    1030:	17 97       	sbiw	r26, 0x07	; 7
    1032:	8e 9f       	mul	r24, r30
    1034:	f0 01       	movw	r30, r0
    1036:	11 24       	eor	r1, r1
    1038:	ec 5a       	subi	r30, 0xAC	; 172
    103a:	fe 4f       	sbci	r31, 0xFE	; 254
    103c:	85 85       	ldd	r24, Z+13	; 0x0d
    103e:	96 85       	ldd	r25, Z+14	; 0x0e
    1040:	01 96       	adiw	r24, 0x01	; 1
    1042:	96 87       	std	Z+14, r25	; 0x0e
    1044:	85 87       	std	Z+13, r24	; 0x0d
    1046:	82 89       	ldd	r24, Z+18	; 0x12
    1048:	81 50       	subi	r24, 0x01	; 1
    104a:	82 8b       	std	Z+18, r24	; 0x12
    104c:	8c e0       	ldi	r24, 0x0C	; 12
    104e:	12 96       	adiw	r26, 0x02	; 2
    1050:	8c 93       	st	X, r24
    1052:	08 95       	ret
    1054:	84 e9       	ldi	r24, 0x94	; 148
    1056:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
    105a:	a4 e5       	ldi	r26, 0x54	; 84
    105c:	b1 e0       	ldi	r27, 0x01	; 1
    105e:	17 96       	adiw	r26, 0x07	; 7
    1060:	ec 91       	ld	r30, X
    1062:	17 97       	sbiw	r26, 0x07	; 7
    1064:	2f e0       	ldi	r18, 0x0F	; 15
    1066:	e2 9f       	mul	r30, r18
    1068:	f0 01       	movw	r30, r0
    106a:	11 24       	eor	r1, r1
    106c:	ec 5a       	subi	r30, 0xAC	; 172
    106e:	fe 4f       	sbci	r31, 0xFE	; 254
    1070:	18 96       	adiw	r26, 0x08	; 8
    1072:	8c 91       	ld	r24, X
    1074:	18 97       	sbiw	r26, 0x08	; 8
    1076:	80 8f       	std	Z+24, r24	; 0x18
    1078:	16 86       	std	Z+14, r1	; 0x0e
    107a:	15 86       	std	Z+13, r1	; 0x0d
    107c:	12 8a       	std	Z+18, r1	; 0x12
    107e:	12 96       	adiw	r26, 0x02	; 2
    1080:	1c 92       	st	X, r1
    1082:	08 95       	ret
    1084:	00 00       	nop
    1086:	08 95       	ret
    1088:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <TWI+0x2>
    108c:	08 95       	ret

0000108e <I2C_Init>:
    108e:	e4 e5       	ldi	r30, 0x54	; 84
    1090:	f1 e0       	ldi	r31, 0x01	; 1
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	81 87       	std	Z+9, r24	; 0x09
    1096:	82 83       	std	Z+2, r24	; 0x02
    1098:	11 82       	std	Z+1, r1	; 0x01
    109a:	08 95       	ret

0000109c <I2C_Enable>:
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <TWI>
    10a2:	08 95       	ret

000010a4 <I2C_ID_State>:
    10a4:	2f e0       	ldi	r18, 0x0F	; 15
    10a6:	82 9f       	mul	r24, r18
    10a8:	c0 01       	movw	r24, r0
    10aa:	11 24       	eor	r1, r1
    10ac:	fc 01       	movw	r30, r24
    10ae:	ec 5a       	subi	r30, 0xAC	; 172
    10b0:	fe 4f       	sbci	r31, 0xFE	; 254
    10b2:	80 8d       	ldd	r24, Z+24	; 0x18
    10b4:	08 95       	ret

000010b6 <I2C_ID_Ack_Error>:
    10b6:	2f e0       	ldi	r18, 0x0F	; 15
    10b8:	82 9f       	mul	r24, r18
    10ba:	c0 01       	movw	r24, r0
    10bc:	11 24       	eor	r1, r1
    10be:	fc 01       	movw	r30, r24
    10c0:	ec 5a       	subi	r30, 0xAC	; 172
    10c2:	fe 4f       	sbci	r31, 0xFE	; 254
    10c4:	10 8e       	std	Z+24, r1	; 0x18
    10c6:	08 95       	ret

000010c8 <I2C_Ready>:
    10c8:	2f e0       	ldi	r18, 0x0F	; 15
    10ca:	82 9f       	mul	r24, r18
    10cc:	c0 01       	movw	r24, r0
    10ce:	11 24       	eor	r1, r1
    10d0:	fc 01       	movw	r30, r24
    10d2:	ec 5a       	subi	r30, 0xAC	; 172
    10d4:	fe 4f       	sbci	r31, 0xFE	; 254
    10d6:	80 8d       	ldd	r24, Z+24	; 0x18
    10d8:	81 11       	cpse	r24, r1
    10da:	07 c0       	rjmp	.+14     	; 0x10ea <I2C_Ready+0x22>
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <TWI+0x1>
    10e2:	91 11       	cpse	r25, r1
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <I2C_Ready+0x24>
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	08 95       	ret
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	08 95       	ret

000010ee <I2C_Send_ST>:
    10ee:	9c 01       	movw	r18, r24
    10f0:	21 50       	subi	r18, 0x01	; 1
    10f2:	31 40       	sbci	r19, 0x01	; 1
    10f4:	2e 3f       	cpi	r18, 0xFE	; 254
    10f6:	33 40       	sbci	r19, 0x03	; 3
    10f8:	80 f4       	brcc	.+32     	; 0x111a <I2C_Send_ST+0x2c>
    10fa:	2f e0       	ldi	r18, 0x0F	; 15
    10fc:	42 9f       	mul	r20, r18
    10fe:	f0 01       	movw	r30, r0
    1100:	11 24       	eor	r1, r1
    1102:	ec 5a       	subi	r30, 0xAC	; 172
    1104:	fe 4f       	sbci	r31, 0xFE	; 254
    1106:	94 87       	std	Z+12, r25	; 0x0c
    1108:	83 87       	std	Z+11, r24	; 0x0b
    110a:	16 86       	std	Z+14, r1	; 0x0e
    110c:	15 86       	std	Z+13, r1	; 0x0d
    110e:	61 8b       	std	Z+17, r22	; 0x11
    1110:	12 8a       	std	Z+18, r1	; 0x12
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	83 8b       	std	Z+19, r24	; 0x13
    1116:	82 e0       	ldi	r24, 0x02	; 2
    1118:	80 8f       	std	Z+24, r24	; 0x18
    111a:	08 95       	ret

0000111c <I2C_Send_STr>:
    111c:	0f 93       	push	r16
    111e:	fc 01       	movw	r30, r24
    1120:	e1 50       	subi	r30, 0x01	; 1
    1122:	f1 40       	sbci	r31, 0x01	; 1
    1124:	ee 3f       	cpi	r30, 0xFE	; 254
    1126:	f3 40       	sbci	r31, 0x03	; 3
    1128:	b0 f4       	brcc	.+44     	; 0x1156 <I2C_Send_STr+0x3a>
    112a:	fb 01       	movw	r30, r22
    112c:	e1 50       	subi	r30, 0x01	; 1
    112e:	f1 40       	sbci	r31, 0x01	; 1
    1130:	ee 3f       	cpi	r30, 0xFE	; 254
    1132:	f3 40       	sbci	r31, 0x03	; 3
    1134:	80 f4       	brcc	.+32     	; 0x1156 <I2C_Send_STr+0x3a>
    1136:	3f e0       	ldi	r19, 0x0F	; 15
    1138:	03 9f       	mul	r16, r19
    113a:	f0 01       	movw	r30, r0
    113c:	11 24       	eor	r1, r1
    113e:	ec 5a       	subi	r30, 0xAC	; 172
    1140:	fe 4f       	sbci	r31, 0xFE	; 254
    1142:	94 87       	std	Z+12, r25	; 0x0c
    1144:	83 87       	std	Z+11, r24	; 0x0b
    1146:	76 87       	std	Z+14, r23	; 0x0e
    1148:	65 87       	std	Z+13, r22	; 0x0d
    114a:	41 8b       	std	Z+17, r20	; 0x11
    114c:	22 8b       	std	Z+18, r18	; 0x12
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	83 8b       	std	Z+19, r24	; 0x13
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	80 8f       	std	Z+24, r24	; 0x18
    1156:	0f 91       	pop	r16
    1158:	08 95       	ret

0000115a <I2C_Get_Ident>:
	}
}

uint8_t I2C_Get_Ident(uint8_t _Adress_Size, uint8_t _Register){
	if (TWI.Init==INIT_OK){
    115a:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <TWI+0x1>
    115e:	91 30       	cpi	r25, 0x01	; 1
    1160:	29 f5       	brne	.+74     	; 0x11ac <I2C_Get_Ident+0x52>
		for (uint8_t x = Min_Ident; x < Max_Ident; x++){
			if (TWI.Ident[x].Ident_given==false){
    1162:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <TWI+0x28>
    1166:	99 23       	and	r25, r25
    1168:	81 f0       	breq	.+32     	; 0x118a <I2C_Get_Ident+0x30>
    116a:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <TWI+0x37>
    116e:	99 23       	and	r25, r25
    1170:	41 f0       	breq	.+16     	; 0x1182 <I2C_Get_Ident+0x28>
    1172:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <TWI+0x46>
    1176:	91 11       	cpse	r25, r1
    1178:	1b c0       	rjmp	.+54     	; 0x11b0 <I2C_Get_Ident+0x56>
	}
}

uint8_t I2C_Get_Ident(uint8_t _Adress_Size, uint8_t _Register){
	if (TWI.Init==INIT_OK){
		for (uint8_t x = Min_Ident; x < Max_Ident; x++){
    117a:	93 e0       	ldi	r25, 0x03	; 3
			if (TWI.Ident[x].Ident_given==false){
    117c:	23 e0       	ldi	r18, 0x03	; 3
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	07 c0       	rjmp	.+14     	; 0x1190 <I2C_Get_Ident+0x36>
	}
}

uint8_t I2C_Get_Ident(uint8_t _Adress_Size, uint8_t _Register){
	if (TWI.Init==INIT_OK){
		for (uint8_t x = Min_Ident; x < Max_Ident; x++){
    1182:	92 e0       	ldi	r25, 0x02	; 2
			if (TWI.Ident[x].Ident_given==false){
    1184:	22 e0       	ldi	r18, 0x02	; 2
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	03 c0       	rjmp	.+6      	; 0x1190 <I2C_Get_Ident+0x36>
    118a:	21 e0       	ldi	r18, 0x01	; 1
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	91 e0       	ldi	r25, 0x01	; 1
				TWI.Ident[x].Ident_given=true;
    1190:	4f e0       	ldi	r20, 0x0F	; 15
    1192:	42 9f       	mul	r20, r18
    1194:	f0 01       	movw	r30, r0
    1196:	43 9f       	mul	r20, r19
    1198:	f0 0d       	add	r31, r0
    119a:	11 24       	eor	r1, r1
    119c:	ec 5a       	subi	r30, 0xAC	; 172
    119e:	fe 4f       	sbci	r31, 0xFE	; 254
    11a0:	21 e0       	ldi	r18, 0x01	; 1
    11a2:	21 8f       	std	Z+25, r18	; 0x19
				TWI.Ident[x].Adress_Size=_Adress_Size;
    11a4:	87 8b       	std	Z+23, r24	; 0x17
				TWI.Ident[x].Adress[0]=_Register;
    11a6:	65 8b       	std	Z+21, r22	; 0x15
				return x;
    11a8:	89 2f       	mov	r24, r25
    11aa:	08 95       	ret
			}
		}
	}
	return 0;
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	08 95       	ret
    11b0:	80 e0       	ldi	r24, 0x00	; 0
}
    11b2:	08 95       	ret

000011b4 <I2C_Free_Ident>:

void I2C_Free_Ident(uint8_t _Ident){
	TWI.Ident[_Ident].Ident_given=false;
    11b4:	2f e0       	ldi	r18, 0x0F	; 15
    11b6:	82 9f       	mul	r24, r18
    11b8:	c0 01       	movw	r24, r0
    11ba:	11 24       	eor	r1, r1
    11bc:	fc 01       	movw	r30, r24
    11be:	ec 5a       	subi	r30, 0xAC	; 172
    11c0:	fe 4f       	sbci	r31, 0xFE	; 254
    11c2:	11 8e       	std	Z+25, r1	; 0x19
    11c4:	08 95       	ret

000011c6 <Next_Nixie>:
	N_Clock.Nixie_Blanking_Timer	-= N_Clock.Nixie_Blanking_Timer && _Pulse_1ms;
	N_Clock.Next_Nixie_Timer		-= N_Clock.Next_Nixie_Timer && N_Clock.Nixie_Blanking_Timer==0 && _Pulse_1ms;
}//Nixie_Loop

void Next_Nixie(void){
	uint8_t _PortB=PORTB;//to prevent flikkering of the nixies we write outputs to a temp value 1st
    11c6:	85 b1       	in	r24, 0x05	; 5
	if (N_Clock.Blink>0){
    11c8:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <N_Clock+0x9>
    11cc:	99 23       	and	r25, r25
    11ce:	11 f0       	breq	.+4      	; 0x11d4 <Next_Nixie+0xe>
		_PortB &= ~((1<<Nixie1_2)|(1<<Nixie3_4)|(1<<Nixie5_6));//disconnect all Nixies
    11d0:	88 7f       	andi	r24, 0xF8	; 248
    11d2:	36 c0       	rjmp	.+108    	; 0x1240 <Next_Nixie+0x7a>
	}
	else{
		if (N_Clock.Next_Nixie_Timer==0){
    11d4:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <N_Clock+0xb>
    11d8:	91 11       	cpse	r25, r1
    11da:	18 c0       	rjmp	.+48     	; 0x120c <Next_Nixie+0x46>
			N_Clock.Nixie_Blanking_Timer=N_Clock.Setting.Blanking_SV;
    11dc:	ed ea       	ldi	r30, 0xAD	; 173
    11de:	f1 e0       	ldi	r31, 0x01	; 1
    11e0:	90 a5       	ldd	r25, Z+40	; 0x28
    11e2:	92 87       	std	Z+10, r25	; 0x0a
			N_Clock.Next_Nixie_Timer=N_Clock.Setting.Time_On_SV;
    11e4:	91 a5       	ldd	r25, Z+41	; 0x29
    11e6:	93 87       	std	Z+11, r25	; 0x0b
			_PortB &= ~((1<<Nixie1_2)|(1<<Nixie3_4)|(1<<Nixie5_6));//disconnect all Nixies
    11e8:	88 7f       	andi	r24, 0xF8	; 248
			PORTD = 0xFF;
    11ea:	9f ef       	ldi	r25, 0xFF	; 255
    11ec:	9b b9       	out	0x0b, r25	; 11
			N_Clock.Cur_Nixie++;
    11ee:	90 81       	ld	r25, Z
    11f0:	9f 5f       	subi	r25, 0xFF	; 255
			if (N_Clock.Cur_Nixie>3){
    11f2:	94 30       	cpi	r25, 0x04	; 4
    11f4:	18 f4       	brcc	.+6      	; 0x11fc <Next_Nixie+0x36>
		if (N_Clock.Next_Nixie_Timer==0){
			N_Clock.Nixie_Blanking_Timer=N_Clock.Setting.Blanking_SV;
			N_Clock.Next_Nixie_Timer=N_Clock.Setting.Time_On_SV;
			_PortB &= ~((1<<Nixie1_2)|(1<<Nixie3_4)|(1<<Nixie5_6));//disconnect all Nixies
			PORTD = 0xFF;
			N_Clock.Cur_Nixie++;
    11f6:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <N_Clock>
    11fa:	08 c0       	rjmp	.+16     	; 0x120c <Next_Nixie+0x46>
			if (N_Clock.Cur_Nixie>3){
				N_Clock.Cur_Nixie=1;
    11fc:	ed ea       	ldi	r30, 0xAD	; 173
    11fe:	f1 e0       	ldi	r31, 0x01	; 1
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	90 83       	st	Z, r25
			}
		}
		if (N_Clock.Nixie_Blanking_Timer==0){
    1204:	92 85       	ldd	r25, Z+10	; 0x0a
    1206:	99 23       	and	r25, r25
    1208:	69 f0       	breq	.+26     	; 0x1224 <Next_Nixie+0x5e>
    120a:	1a c0       	rjmp	.+52     	; 0x1240 <Next_Nixie+0x7a>
    120c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <N_Clock+0xa>
    1210:	91 11       	cpse	r25, r1
    1212:	16 c0       	rjmp	.+44     	; 0x1240 <Next_Nixie+0x7a>
			switch(N_Clock.Cur_Nixie){
    1214:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <N_Clock>
    1218:	92 30       	cpi	r25, 0x02	; 2
    121a:	49 f0       	breq	.+18     	; 0x122e <Next_Nixie+0x68>
    121c:	93 30       	cpi	r25, 0x03	; 3
    121e:	61 f0       	breq	.+24     	; 0x1238 <Next_Nixie+0x72>
    1220:	91 30       	cpi	r25, 0x01	; 1
    1222:	71 f4       	brne	.+28     	; 0x1240 <Next_Nixie+0x7a>
				case 1:{
					//set the correct values
					PORTD = N_Clock.BCD_Nixie1_2;//Nixie 1 + 2
    1224:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <N_Clock+0x1>
    1228:	9b b9       	out	0x0b, r25	; 11
					_PortB |= (1<<Nixie1_2);//Connect the right Nixie
    122a:	81 60       	ori	r24, 0x01	; 1
				}//1
				break;
    122c:	09 c0       	rjmp	.+18     	; 0x1240 <Next_Nixie+0x7a>
				case 2:{
					//set the correct values
					PORTD = N_Clock.BCD_Nixie3_4;//Nixie 3 + 4
    122e:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <N_Clock+0x2>
    1232:	9b b9       	out	0x0b, r25	; 11
					_PortB |= (1<<Nixie3_4);//Connect the right Nixie
    1234:	82 60       	ori	r24, 0x02	; 2
				}//2
				break;
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <Next_Nixie+0x7a>
				case 3:{
					//set the correct values
					PORTD = N_Clock.BCD_Nixie5_6;//Nixie 5 + 6
    1238:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <N_Clock+0x3>
    123c:	9b b9       	out	0x0b, r25	; 11
					_PortB |= (1<<Nixie5_6);//Connect the right nixie
    123e:	84 60       	ori	r24, 0x04	; 4
				}//3
				break;
			}//N_Clock.Cur_Nixie
		}
	}//else
	PORTB = _PortB;//write to the PORT with the temp value.
    1240:	85 b9       	out	0x05, r24	; 5
    1242:	08 95       	ret

00001244 <Nixie_Update>:
}//Next_Nixie

void Nixie_Update(uint8_t _Command){
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
	switch(_Command){
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	91 f0       	breq	.+36     	; 0x1274 <Nixie_Update+0x30>
    1250:	38 f0       	brcs	.+14     	; 0x1260 <Nixie_Update+0x1c>
    1252:	82 30       	cpi	r24, 0x02	; 2
    1254:	09 f4       	brne	.+2      	; 0x1258 <Nixie_Update+0x14>
    1256:	8b c0       	rjmp	.+278    	; 0x136e <Nixie_Update+0x12a>
    1258:	83 30       	cpi	r24, 0x03	; 3
    125a:	09 f4       	brne	.+2      	; 0x125e <Nixie_Update+0x1a>
    125c:	01 c1       	rjmp	.+514    	; 0x1460 <Nixie_Update+0x21c>
    125e:	2e c1       	rjmp	.+604    	; 0x14bc <Nixie_Update+0x278>
		case Show_Nothing:{
			Power_Mode(Power_Mode_OFF);
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	78 d4       	rcall	.+2288   	; 0x1b54 <Power_Mode>
			PORTB &= ~(1<<Colon);//put the colons off
    1264:	2c 98       	cbi	0x05, 4	; 5
			
			//Write a strange value to the Nixies so that they show nothing
			N_Clock.BCD_Nixie1_2=0xAA;
    1266:	ed ea       	ldi	r30, 0xAD	; 173
    1268:	f1 e0       	ldi	r31, 0x01	; 1
    126a:	8a ea       	ldi	r24, 0xAA	; 170
    126c:	81 83       	std	Z+1, r24	; 0x01
			N_Clock.BCD_Nixie3_4=0xAA;
    126e:	82 83       	std	Z+2, r24	; 0x02
			N_Clock.BCD_Nixie5_6=0xAA;
    1270:	83 83       	std	Z+3, r24	; 0x03
		}//Show_Nothing
		break;
    1272:	24 c1       	rjmp	.+584    	; 0x14bc <Nixie_Update+0x278>
			
		case Show_Time:{//Show the time
			Power_Mode(Power_Mode_ON);
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	6e d4       	rcall	.+2268   	; 0x1b54 <Power_Mode>
			if(N_Clock.Status==Status_Nixie_Menu){
    1278:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <N_Clock+0x6>
    127c:	83 30       	cpi	r24, 0x03	; 3
    127e:	41 f4       	brne	.+16     	; 0x1290 <Nixie_Update+0x4c>
					if(Timer_Pulse_100ms()){
    1280:	6c d6       	rcall	.+3288   	; 0x1f5a <Timer_Pulse_100ms>
    1282:	88 23       	and	r24, r24
    1284:	61 f0       	breq	.+24     	; 0x129e <Nixie_Update+0x5a>
				PORTB ^= (1<<Colon);//blink colon
    1286:	95 b1       	in	r25, 0x05	; 5
    1288:	80 e1       	ldi	r24, 0x10	; 16
    128a:	89 27       	eor	r24, r25
    128c:	85 b9       	out	0x05, r24	; 5
    128e:	07 c0       	rjmp	.+14     	; 0x129e <Nixie_Update+0x5a>
				}
			}
			else{
				if(RTC.Time.Second%2){
    1290:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <RTC>
    1294:	80 ff       	sbrs	r24, 0
    1296:	02 c0       	rjmp	.+4      	; 0x129c <Nixie_Update+0x58>
					PORTB |= (1<<Colon);//put power on the colons
    1298:	2c 9a       	sbi	0x05, 4	; 5
    129a:	01 c0       	rjmp	.+2      	; 0x129e <Nixie_Update+0x5a>
				}
				else{
					PORTB &= ~(1<<Colon);//put the colons off
    129c:	2c 98       	cbi	0x05, 4	; 5
				}
			}
			//Update the Nixies
			if(N_Clock.Status==Status_Nixie_Menu){
    129e:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <N_Clock+0x6>
    12a2:	83 30       	cpi	r24, 0x03	; 3
    12a4:	09 f0       	breq	.+2      	; 0x12a8 <Nixie_Update+0x64>
    12a6:	52 c0       	rjmp	.+164    	; 0x134c <Nixie_Update+0x108>
				switch (N_Clock.Menu){
    12a8:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <N_Clock+0x8>
    12ac:	82 30       	cpi	r24, 0x02	; 2
    12ae:	e1 f0       	breq	.+56     	; 0x12e8 <Nixie_Update+0xa4>
    12b0:	83 30       	cpi	r24, 0x03	; 3
    12b2:	91 f1       	breq	.+100    	; 0x1318 <Nixie_Update+0xd4>
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	09 f0       	breq	.+2      	; 0x12ba <Nixie_Update+0x76>
    12b8:	01 c1       	rjmp	.+514    	; 0x14bc <Nixie_Update+0x278>
					case 1:{
						N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Time.Hour);
    12ba:	c7 ed       	ldi	r28, 0xD7	; 215
    12bc:	d1 e0       	ldi	r29, 0x01	; 1
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	b1 d8       	rcall	.-3742   	; 0x424 <DecimalToBCD>
    12c2:	0d ea       	ldi	r16, 0xAD	; 173
    12c4:	11 e0       	ldi	r17, 0x01	; 1
    12c6:	f8 01       	movw	r30, r16
    12c8:	81 83       	std	Z+1, r24	; 0x01
						N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Time.Minute);
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	ab d8       	rcall	.-3754   	; 0x424 <DecimalToBCD>
    12ce:	f8 01       	movw	r30, r16
    12d0:	82 83       	std	Z+2, r24	; 0x02
						if(RTC.Time.Second%2){
    12d2:	88 81       	ld	r24, Y
    12d4:	80 ff       	sbrs	r24, 0
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <Nixie_Update+0x9c>
							N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Time.Second);
    12d8:	a5 d8       	rcall	.-3766   	; 0x424 <DecimalToBCD>
    12da:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <N_Clock+0x3>
    12de:	ee c0       	rjmp	.+476    	; 0x14bc <Nixie_Update+0x278>
						}
						else{
							N_Clock.BCD_Nixie5_6=0xAA;
    12e0:	8a ea       	ldi	r24, 0xAA	; 170
    12e2:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <N_Clock+0x3>
    12e6:	ea c0       	rjmp	.+468    	; 0x14bc <Nixie_Update+0x278>
						}
					}//1
					break;

					case 2:{
						N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Time.Hour);
    12e8:	c7 ed       	ldi	r28, 0xD7	; 215
    12ea:	d1 e0       	ldi	r29, 0x01	; 1
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	9a d8       	rcall	.-3788   	; 0x424 <DecimalToBCD>
    12f0:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <N_Clock+0x1>
						if(RTC.Time.Second%2){
    12f4:	88 81       	ld	r24, Y
    12f6:	80 ff       	sbrs	r24, 0
    12f8:	06 c0       	rjmp	.+12     	; 0x1306 <Nixie_Update+0xc2>
							N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Time.Minute);
    12fa:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <RTC+0x1>
    12fe:	92 d8       	rcall	.-3804   	; 0x424 <DecimalToBCD>
    1300:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <N_Clock+0x2>
    1304:	03 c0       	rjmp	.+6      	; 0x130c <Nixie_Update+0xc8>
						}
						else{
							N_Clock.BCD_Nixie3_4=0xAA;
    1306:	8a ea       	ldi	r24, 0xAA	; 170
    1308:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <N_Clock+0x2>
						}
						N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Time.Second);
    130c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <RTC>
    1310:	89 d8       	rcall	.-3822   	; 0x424 <DecimalToBCD>
    1312:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <N_Clock+0x3>
					}//2
					break;
    1316:	d2 c0       	rjmp	.+420    	; 0x14bc <Nixie_Update+0x278>

					case 3:{
						if(RTC.Time.Second%2){
    1318:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <RTC>
    131c:	80 ff       	sbrs	r24, 0
    131e:	06 c0       	rjmp	.+12     	; 0x132c <Nixie_Update+0xe8>
							N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Time.Hour);
    1320:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <RTC+0x2>
    1324:	7f d8       	rcall	.-3842   	; 0x424 <DecimalToBCD>
    1326:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <N_Clock+0x1>
    132a:	03 c0       	rjmp	.+6      	; 0x1332 <Nixie_Update+0xee>
						}
						else{
							N_Clock.BCD_Nixie1_2=0xAA;
    132c:	8a ea       	ldi	r24, 0xAA	; 170
    132e:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <N_Clock+0x1>
						}
						N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Time.Minute);
    1332:	07 ed       	ldi	r16, 0xD7	; 215
    1334:	11 e0       	ldi	r17, 0x01	; 1
    1336:	f8 01       	movw	r30, r16
    1338:	81 81       	ldd	r24, Z+1	; 0x01
    133a:	74 d8       	rcall	.-3864   	; 0x424 <DecimalToBCD>
    133c:	cd ea       	ldi	r28, 0xAD	; 173
    133e:	d1 e0       	ldi	r29, 0x01	; 1
    1340:	8a 83       	std	Y+2, r24	; 0x02
						N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Time.Second);
    1342:	f8 01       	movw	r30, r16
    1344:	80 81       	ld	r24, Z
    1346:	6e d8       	rcall	.-3876   	; 0x424 <DecimalToBCD>
    1348:	8b 83       	std	Y+3, r24	; 0x03
					}
					break;
    134a:	b8 c0       	rjmp	.+368    	; 0x14bc <Nixie_Update+0x278>

				}
			}
			else{
				N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Time.Hour);
    134c:	07 ed       	ldi	r16, 0xD7	; 215
    134e:	11 e0       	ldi	r17, 0x01	; 1
    1350:	f8 01       	movw	r30, r16
    1352:	82 81       	ldd	r24, Z+2	; 0x02
    1354:	67 d8       	rcall	.-3890   	; 0x424 <DecimalToBCD>
    1356:	cd ea       	ldi	r28, 0xAD	; 173
    1358:	d1 e0       	ldi	r29, 0x01	; 1
    135a:	89 83       	std	Y+1, r24	; 0x01
				N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Time.Minute);
    135c:	f8 01       	movw	r30, r16
    135e:	81 81       	ldd	r24, Z+1	; 0x01
    1360:	61 d8       	rcall	.-3902   	; 0x424 <DecimalToBCD>
    1362:	8a 83       	std	Y+2, r24	; 0x02
				N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Time.Second);
    1364:	f8 01       	movw	r30, r16
    1366:	80 81       	ld	r24, Z
    1368:	5d d8       	rcall	.-3910   	; 0x424 <DecimalToBCD>
    136a:	8b 83       	std	Y+3, r24	; 0x03
    136c:	a7 c0       	rjmp	.+334    	; 0x14bc <Nixie_Update+0x278>
			}
		}
		break;
		
		case Show_Date:{//Show the date
			Power_Mode(Power_Mode_ON);
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	f1 d3       	rcall	.+2018   	; 0x1b54 <Power_Mode>
			if(N_Clock.Status==Status_Nixie_Menu){
    1372:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <N_Clock+0x6>
    1376:	83 30       	cpi	r24, 0x03	; 3
    1378:	41 f4       	brne	.+16     	; 0x138a <Nixie_Update+0x146>
				if(Timer_Pulse_100ms()){
    137a:	ef d5       	rcall	.+3038   	; 0x1f5a <Timer_Pulse_100ms>
    137c:	88 23       	and	r24, r24
    137e:	31 f0       	breq	.+12     	; 0x138c <Nixie_Update+0x148>
					PORTB ^= (1<<Colon);//blink colon
    1380:	95 b1       	in	r25, 0x05	; 5
    1382:	80 e1       	ldi	r24, 0x10	; 16
    1384:	89 27       	eor	r24, r25
    1386:	85 b9       	out	0x05, r24	; 5
    1388:	01 c0       	rjmp	.+2      	; 0x138c <Nixie_Update+0x148>
				}
			}
			else{
				PORTB &= ~(1<<Colon);//put the colons off
    138a:	2c 98       	cbi	0x05, 4	; 5
			}

			//Update the Nixies
			if(N_Clock.Status==Status_Nixie_Menu){
    138c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <N_Clock+0x6>
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	09 f0       	breq	.+2      	; 0x1396 <Nixie_Update+0x152>
    1394:	54 c0       	rjmp	.+168    	; 0x143e <Nixie_Update+0x1fa>
				switch(N_Clock.Menu){
    1396:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <N_Clock+0x8>
    139a:	8c 30       	cpi	r24, 0x0C	; 12
    139c:	f1 f0       	breq	.+60     	; 0x13da <Nixie_Update+0x196>
    139e:	8d 30       	cpi	r24, 0x0D	; 13
    13a0:	a1 f1       	breq	.+104    	; 0x140a <Nixie_Update+0x1c6>
    13a2:	8b 30       	cpi	r24, 0x0B	; 11
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <Nixie_Update+0x164>
    13a6:	8a c0       	rjmp	.+276    	; 0x14bc <Nixie_Update+0x278>
					case 11:{
						N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Date.Day);
    13a8:	c7 ed       	ldi	r28, 0xD7	; 215
    13aa:	d1 e0       	ldi	r29, 0x01	; 1
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	3a d8       	rcall	.-3980   	; 0x424 <DecimalToBCD>
    13b0:	0d ea       	ldi	r16, 0xAD	; 173
    13b2:	11 e0       	ldi	r17, 0x01	; 1
    13b4:	f8 01       	movw	r30, r16
    13b6:	81 83       	std	Z+1, r24	; 0x01
						N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Date.Month);
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	34 d8       	rcall	.-3992   	; 0x424 <DecimalToBCD>
    13bc:	f8 01       	movw	r30, r16
    13be:	82 83       	std	Z+2, r24	; 0x02
						if(RTC.Time.Second%2){
    13c0:	88 81       	ld	r24, Y
    13c2:	80 ff       	sbrs	r24, 0
    13c4:	06 c0       	rjmp	.+12     	; 0x13d2 <Nixie_Update+0x18e>
							N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Date.Year);
    13c6:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <RTC+0x5>
    13ca:	2c d8       	rcall	.-4008   	; 0x424 <DecimalToBCD>
    13cc:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <N_Clock+0x3>
    13d0:	75 c0       	rjmp	.+234    	; 0x14bc <Nixie_Update+0x278>
						}
						else{
							N_Clock.BCD_Nixie5_6=0xAA;
    13d2:	8a ea       	ldi	r24, 0xAA	; 170
    13d4:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <N_Clock+0x3>
    13d8:	71 c0       	rjmp	.+226    	; 0x14bc <Nixie_Update+0x278>
						}
					}//4
					break;

					case 12:{
						N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Date.Day);
    13da:	c7 ed       	ldi	r28, 0xD7	; 215
    13dc:	d1 e0       	ldi	r29, 0x01	; 1
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	21 d8       	rcall	.-4030   	; 0x424 <DecimalToBCD>
    13e2:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <N_Clock+0x1>
						if(RTC.Time.Second%2){
    13e6:	88 81       	ld	r24, Y
    13e8:	80 ff       	sbrs	r24, 0
    13ea:	06 c0       	rjmp	.+12     	; 0x13f8 <Nixie_Update+0x1b4>
							N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Date.Month);
    13ec:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <RTC+0x4>
    13f0:	19 d8       	rcall	.-4046   	; 0x424 <DecimalToBCD>
    13f2:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <N_Clock+0x2>
    13f6:	03 c0       	rjmp	.+6      	; 0x13fe <Nixie_Update+0x1ba>
						}
						else{
							N_Clock.BCD_Nixie3_4=0xAA;
    13f8:	8a ea       	ldi	r24, 0xAA	; 170
    13fa:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <N_Clock+0x2>
						}
						N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Date.Year);
    13fe:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <RTC+0x5>
    1402:	10 d8       	rcall	.-4064   	; 0x424 <DecimalToBCD>
    1404:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <N_Clock+0x3>
					}//5
					break;
    1408:	59 c0       	rjmp	.+178    	; 0x14bc <Nixie_Update+0x278>

					case 13:{
						if(RTC.Time.Second%2){
    140a:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <RTC>
    140e:	80 ff       	sbrs	r24, 0
    1410:	06 c0       	rjmp	.+12     	; 0x141e <Nixie_Update+0x1da>
							N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Date.Day);
    1412:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <RTC+0x3>
    1416:	06 d8       	rcall	.-4084   	; 0x424 <DecimalToBCD>
    1418:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <N_Clock+0x1>
    141c:	03 c0       	rjmp	.+6      	; 0x1424 <Nixie_Update+0x1e0>
						}
						else{
							N_Clock.BCD_Nixie1_2=0xAA;
    141e:	8a ea       	ldi	r24, 0xAA	; 170
    1420:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <N_Clock+0x1>
						}
						N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Date.Month);
    1424:	07 ed       	ldi	r16, 0xD7	; 215
    1426:	11 e0       	ldi	r17, 0x01	; 1
    1428:	f8 01       	movw	r30, r16
    142a:	84 81       	ldd	r24, Z+4	; 0x04
    142c:	fb d7       	rcall	.+4086   	; 0x2424 <__TEXT_REGION_LENGTH__+0x424>
    142e:	cd ea       	ldi	r28, 0xAD	; 173
    1430:	d1 e0       	ldi	r29, 0x01	; 1
    1432:	8a 83       	std	Y+2, r24	; 0x02
						N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Date.Year);
    1434:	f8 01       	movw	r30, r16
    1436:	85 81       	ldd	r24, Z+5	; 0x05
    1438:	f5 d7       	rcall	.+4074   	; 0x2424 <__TEXT_REGION_LENGTH__+0x424>
    143a:	8b 83       	std	Y+3, r24	; 0x03
					}//6
					break;
    143c:	3f c0       	rjmp	.+126    	; 0x14bc <Nixie_Update+0x278>
					
				}
			}
			else{
				N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Date.Day);
    143e:	07 ed       	ldi	r16, 0xD7	; 215
    1440:	11 e0       	ldi	r17, 0x01	; 1
    1442:	f8 01       	movw	r30, r16
    1444:	83 81       	ldd	r24, Z+3	; 0x03
    1446:	ee d7       	rcall	.+4060   	; 0x2424 <__TEXT_REGION_LENGTH__+0x424>
    1448:	cd ea       	ldi	r28, 0xAD	; 173
    144a:	d1 e0       	ldi	r29, 0x01	; 1
    144c:	89 83       	std	Y+1, r24	; 0x01
				N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Date.Month);
    144e:	f8 01       	movw	r30, r16
    1450:	84 81       	ldd	r24, Z+4	; 0x04
    1452:	e8 d7       	rcall	.+4048   	; 0x2424 <__TEXT_REGION_LENGTH__+0x424>
    1454:	8a 83       	std	Y+2, r24	; 0x02
				N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Date.Year);
    1456:	f8 01       	movw	r30, r16
    1458:	85 81       	ldd	r24, Z+5	; 0x05
    145a:	e4 d7       	rcall	.+4040   	; 0x2424 <__TEXT_REGION_LENGTH__+0x424>
    145c:	8b 83       	std	Y+3, r24	; 0x03
    145e:	2e c0       	rjmp	.+92     	; 0x14bc <Nixie_Update+0x278>
			}
		}
		break;
		
		case Show_Menu:{
			Power_Mode(Power_Mode_ON);
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	78 d3       	rcall	.+1776   	; 0x1b54 <Power_Mode>
			
			if (Timer_Pulse_100ms()){
    1464:	7a d5       	rcall	.+2804   	; 0x1f5a <Timer_Pulse_100ms>
    1466:	88 23       	and	r24, r24
    1468:	21 f0       	breq	.+8      	; 0x1472 <Nixie_Update+0x22e>
				PORTB ^= (1<<Colon);//blink colon
    146a:	95 b1       	in	r25, 0x05	; 5
    146c:	80 e1       	ldi	r24, 0x10	; 16
    146e:	89 27       	eor	r24, r25
    1470:	85 b9       	out	0x05, r24	; 5
			}
			
			//Update the Nixies
			N_Clock.BCD_Nixie1_2=DecimalToBCD(N_Clock.Menu);
    1472:	cd ea       	ldi	r28, 0xAD	; 173
    1474:	d1 e0       	ldi	r29, 0x01	; 1
    1476:	88 85       	ldd	r24, Y+8	; 0x08
    1478:	d5 d7       	rcall	.+4010   	; 0x2424 <__TEXT_REGION_LENGTH__+0x424>
    147a:	89 83       	std	Y+1, r24	; 0x01
			
			if (N_Clock.Menu_Nixie3_4>9){
    147c:	8c 81       	ldd	r24, Y+4	; 0x04
    147e:	8a 30       	cpi	r24, 0x0A	; 10
    1480:	20 f0       	brcs	.+8      	; 0x148a <Nixie_Update+0x246>
				N_Clock.BCD_Nixie3_4=DecimalToBCD(N_Clock.Menu_Nixie3_4);
    1482:	d0 d7       	rcall	.+4000   	; 0x2424 <__TEXT_REGION_LENGTH__+0x424>
    1484:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <N_Clock+0x2>
    1488:	0c c0       	rjmp	.+24     	; 0x14a2 <Nixie_Update+0x25e>
			}
			else if (N_Clock.BCD_Nixie3_4>0){
    148a:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <N_Clock+0x2>
    148e:	99 23       	and	r25, r25
    1490:	29 f0       	breq	.+10     	; 0x149c <Nixie_Update+0x258>
				N_Clock.BCD_Nixie3_4=DecimalToBCD(N_Clock.Menu_Nixie3_4);
    1492:	c8 d7       	rcall	.+3984   	; 0x2424 <__TEXT_REGION_LENGTH__+0x424>
				N_Clock.BCD_Nixie3_4+=0xA0;//Mask out the Nixie that don't need to show anything
    1494:	80 56       	subi	r24, 0x60	; 96
    1496:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <N_Clock+0x2>
    149a:	03 c0       	rjmp	.+6      	; 0x14a2 <Nixie_Update+0x25e>
			}
			else{//Otherwise show nothing
				N_Clock.BCD_Nixie3_4=0xAA;
    149c:	8a ea       	ldi	r24, 0xAA	; 170
    149e:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <N_Clock+0x2>
			}
			
			if (N_Clock.BCD_Nixie5_6>0){//Show the value
    14a2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <N_Clock+0x3>
    14a6:	88 23       	and	r24, r24
    14a8:	31 f0       	breq	.+12     	; 0x14b6 <Nixie_Update+0x272>
				N_Clock.BCD_Nixie5_6=DecimalToBCD(N_Clock.Menu_Nixie5_6);			
    14aa:	cd ea       	ldi	r28, 0xAD	; 173
    14ac:	d1 e0       	ldi	r29, 0x01	; 1
    14ae:	8d 81       	ldd	r24, Y+5	; 0x05
    14b0:	b9 d7       	rcall	.+3954   	; 0x2424 <__TEXT_REGION_LENGTH__+0x424>
    14b2:	8b 83       	std	Y+3, r24	; 0x03
    14b4:	03 c0       	rjmp	.+6      	; 0x14bc <Nixie_Update+0x278>
			}
			else{//or show only one 0
				N_Clock.BCD_Nixie5_6=0xA0;
    14b6:	80 ea       	ldi	r24, 0xA0	; 160
    14b8:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <N_Clock+0x3>
			}
		}
		break;
	}	
}
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	0f 91       	pop	r16
    14c4:	08 95       	ret

000014c6 <Nixie_Loop>:
	//init power circuit
	Power_Init();
	Setting_Init();
}//Nixie_Init

void Nixie_Loop(void){
    14c6:	ef 92       	push	r14
    14c8:	ff 92       	push	r15
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
	switch (N_Clock.Status){
    14d2:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <N_Clock+0x6>
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	29 f0       	breq	.+10     	; 0x14e4 <Nixie_Loop+0x1e>
    14da:	08 f4       	brcc	.+2      	; 0x14de <Nixie_Loop+0x18>
    14dc:	df c1       	rjmp	.+958    	; 0x189c <Nixie_Loop+0x3d6>
    14de:	85 30       	cpi	r24, 0x05	; 5
    14e0:	60 f0       	brcs	.+24     	; 0x14fa <Nixie_Loop+0x34>
    14e2:	dc c1       	rjmp	.+952    	; 0x189c <Nixie_Loop+0x3d6>
		
		case Status_Nixie_Start:{
			if (N_Clock.Setting.Init==Nixie_Init_OK){
    14e4:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <N_Clock+0xc>
    14e8:	82 30       	cpi	r24, 0x02	; 2
    14ea:	09 f0       	breq	.+2      	; 0x14ee <Nixie_Loop+0x28>
    14ec:	d7 c1       	rjmp	.+942    	; 0x189c <Nixie_Loop+0x3d6>
				Power_Mode(Power_Mode_ON);
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	31 d3       	rcall	.+1634   	; 0x1b54 <Power_Mode>
				N_Clock.Status=Status_Nixie_Run;
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <N_Clock+0x6>
    14f8:	d1 c1       	rjmp	.+930    	; 0x189c <Nixie_Loop+0x3d6>
		break;
		
		case Status_Nixie_Run:
		case Status_Nixie_Menu:
		case Status_Nixie_Save:{
			Next_Nixie();
    14fa:	65 de       	rcall	.-822    	; 0x11c6 <Next_Nixie>
			//See if we want to go in or out of the menu...
			if ((PINC & (1<<Button1)) || (PINC & (1<<Button2))){
    14fc:	31 99       	sbic	0x06, 1	; 6
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <Nixie_Loop+0x3e>
    1500:	32 9b       	sbis	0x06, 2	; 6
    1502:	04 c0       	rjmp	.+8      	; 0x150c <Nixie_Loop+0x46>
				Debounce.Menu=200;//2s
    1504:	88 ec       	ldi	r24, 0xC8	; 200
    1506:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <Debounce>
    150a:	21 c0       	rjmp	.+66     	; 0x154e <Nixie_Loop+0x88>
			}
		
			if (Debounce.Menu==0){
    150c:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <Debounce>
    1510:	81 11       	cpse	r24, r1
    1512:	1d c0       	rjmp	.+58     	; 0x154e <Nixie_Loop+0x88>
				if (N_Clock.Status==Status_Nixie_Run){
    1514:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <N_Clock+0x6>
    1518:	82 30       	cpi	r24, 0x02	; 2
    151a:	71 f4       	brne	.+28     	; 0x1538 <Nixie_Loop+0x72>
					N_Clock.Status=Status_Nixie_Menu;
    151c:	ed ea       	ldi	r30, 0xAD	; 173
    151e:	f1 e0       	ldi	r31, 0x01	; 1
    1520:	83 e0       	ldi	r24, 0x03	; 3
    1522:	86 83       	std	Z+6, r24	; 0x06
					Debounce.Menu=200;//2s
    1524:	aa ea       	ldi	r26, 0xAA	; 170
    1526:	b1 e0       	ldi	r27, 0x01	; 1
    1528:	88 ec       	ldi	r24, 0xC8	; 200
    152a:	8c 93       	st	X, r24
					Debounce.Sub_Menu=100;//1sec
    152c:	84 e6       	ldi	r24, 0x64	; 100
    152e:	11 96       	adiw	r26, 0x01	; 1
    1530:	8c 93       	st	X, r24
					N_Clock.Menu=1;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	80 87       	std	Z+8, r24	; 0x08
    1536:	92 c0       	rjmp	.+292    	; 0x165c <Nixie_Loop+0x196>
				}
				else{
					N_Clock.Status=Status_Nixie_Run;
    1538:	ed ea       	ldi	r30, 0xAD	; 173
    153a:	f1 e0       	ldi	r31, 0x01	; 1
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	86 83       	std	Z+6, r24	; 0x06
					Debounce.Menu=200;
    1540:	88 ec       	ldi	r24, 0xC8	; 200
    1542:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <Debounce>
					N_Clock.Setting.Write_Settings++;
    1546:	85 85       	ldd	r24, Z+13	; 0x0d
    1548:	8f 5f       	subi	r24, 0xFF	; 255
    154a:	85 87       	std	Z+13, r24	; 0x0d
    154c:	08 c0       	rjmp	.+16     	; 0x155e <Nixie_Loop+0x98>
				}
			}

			switch(N_Clock.Status){
    154e:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <N_Clock+0x6>
    1552:	82 30       	cpi	r24, 0x02	; 2
    1554:	21 f0       	breq	.+8      	; 0x155e <Nixie_Loop+0x98>
    1556:	83 30       	cpi	r24, 0x03	; 3
    1558:	09 f0       	breq	.+2      	; 0x155c <Nixie_Loop+0x96>
    155a:	a0 c1       	rjmp	.+832    	; 0x189c <Nixie_Loop+0x3d6>
    155c:	7f c0       	rjmp	.+254    	; 0x165c <Nixie_Loop+0x196>
				case Status_Nixie_Run:{
					N_Clock.Menu=0;
    155e:	ed ea       	ldi	r30, 0xAD	; 173
    1560:	f1 e0       	ldi	r31, 0x01	; 1
    1562:	10 86       	std	Z+8, r1	; 0x08
					N_Clock.Blink=0;
    1564:	11 86       	std	Z+9, r1	; 0x09
					
					//Are we going into save mode?
					//1st read the channel if a new conversion is ready
					if(Analog_Channel_Ready(Power_Analog_Save_Channel)){
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	39 d7       	rcall	.+3698   	; 0x23dc <__TEXT_REGION_LENGTH__+0x3dc>
    156a:	88 23       	and	r24, r24
    156c:	31 f0       	breq	.+12     	; 0x157a <Nixie_Loop+0xb4>
						N_Clock.Setting.Save_AI=Analog_Channel_Read(Power_Analog_Save_Channel);
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	10 d7       	rcall	.+3616   	; 0x2392 <__TEXT_REGION_LENGTH__+0x392>
    1572:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <N_Clock+0x18>
    1576:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <N_Clock+0x17>
					}
					//Update the Nixies with what we want to show.
					switch(N_Clock.Show){
    157a:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <N_Clock+0x7>
    157e:	81 30       	cpi	r24, 0x01	; 1
    1580:	51 f1       	breq	.+84     	; 0x15d6 <Nixie_Loop+0x110>
    1582:	20 f0       	brcs	.+8      	; 0x158c <Nixie_Loop+0xc6>
    1584:	82 30       	cpi	r24, 0x02	; 2
    1586:	09 f4       	brne	.+2      	; 0x158a <Nixie_Loop+0xc4>
    1588:	58 c0       	rjmp	.+176    	; 0x163a <Nixie_Loop+0x174>
    158a:	64 c0       	rjmp	.+200    	; 0x1654 <Nixie_Loop+0x18e>
						case Show_Nothing:{
							//Check if we need to activate the clock again.
							if(N_Clock.Setting.Save_On_Threshold<=N_Clock.Setting.Save_AI){
    158c:	ed ea       	ldi	r30, 0xAD	; 173
    158e:	f1 e0       	ldi	r31, 0x01	; 1
    1590:	25 89       	ldd	r18, Z+21	; 0x15
    1592:	36 89       	ldd	r19, Z+22	; 0x16
    1594:	87 89       	ldd	r24, Z+23	; 0x17
    1596:	90 8d       	ldd	r25, Z+24	; 0x18
    1598:	82 17       	cp	r24, r18
    159a:	93 07       	cpc	r25, r19
    159c:	70 f0       	brcs	.+28     	; 0x15ba <Nixie_Loop+0xf4>
								N_Clock.Setting.Save_Timeout-= Timer_Pulse_1s();
    159e:	e0 d4       	rcall	.+2496   	; 0x1f60 <Timer_Pulse_1s>
    15a0:	ed ea       	ldi	r30, 0xAD	; 173
    15a2:	f1 e0       	ldi	r31, 0x01	; 1
    15a4:	21 8d       	ldd	r18, Z+25	; 0x19
    15a6:	32 8d       	ldd	r19, Z+26	; 0x1a
    15a8:	a9 01       	movw	r20, r18
    15aa:	48 1b       	sub	r20, r24
    15ac:	51 09       	sbc	r21, r1
    15ae:	ca 01       	movw	r24, r20
    15b0:	52 8f       	std	Z+26, r21	; 0x1a
    15b2:	41 8f       	std	Z+25, r20	; 0x19
							}
							else{
								N_Clock.Setting.Save_Timeout = Power_Save_Timeout;//5 minutes timeout
							}
							if (N_Clock.Setting.Save_Timeout == 0 || (PINC & (1<<Button1)) || (PINC & (1<<Button2))){
    15b4:	89 2b       	or	r24, r25
    15b6:	59 f0       	breq	.+22     	; 0x15ce <Nixie_Loop+0x108>
    15b8:	06 c0       	rjmp	.+12     	; 0x15c6 <Nixie_Loop+0x100>
							//Check if we need to activate the clock again.
							if(N_Clock.Setting.Save_On_Threshold<=N_Clock.Setting.Save_AI){
								N_Clock.Setting.Save_Timeout-= Timer_Pulse_1s();
							}
							else{
								N_Clock.Setting.Save_Timeout = Power_Save_Timeout;//5 minutes timeout
    15ba:	8c e2       	ldi	r24, 0x2C	; 44
    15bc:	91 e0       	ldi	r25, 0x01	; 1
    15be:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <N_Clock+0x1a>
    15c2:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <N_Clock+0x19>
							}
							if (N_Clock.Setting.Save_Timeout == 0 || (PINC & (1<<Button1)) || (PINC & (1<<Button2))){
    15c6:	31 99       	sbic	0x06, 1	; 6
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <Nixie_Loop+0x108>
    15ca:	32 9b       	sbis	0x06, 2	; 6
    15cc:	43 c0       	rjmp	.+134    	; 0x1654 <Nixie_Loop+0x18e>
								N_Clock.Show=Show_Time;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <N_Clock+0x7>
    15d4:	3f c0       	rjmp	.+126    	; 0x1654 <Nixie_Loop+0x18e>
						}//Show_Nothing
						break;
						
						case Show_Time:{
							//Alternate between date and time?
							if (N_Clock.Setting.Date_Show){
    15d6:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <N_Clock+0xe>
    15da:	88 23       	and	r24, r24
    15dc:	69 f0       	breq	.+26     	; 0x15f8 <Nixie_Loop+0x132>
								if (N_Clock.Setting.Date_Show_SV>0 && N_Clock.Setting.Date_Timeout_PV==0){
    15de:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <N_Clock+0x11>
    15e2:	88 23       	and	r24, r24
    15e4:	49 f0       	breq	.+18     	; 0x15f8 <Nixie_Loop+0x132>
    15e6:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <N_Clock+0x10>
    15ea:	91 11       	cpse	r25, r1
    15ec:	05 c0       	rjmp	.+10     	; 0x15f8 <Nixie_Loop+0x132>
									N_Clock.Setting.Date_Show_PV=N_Clock.Setting.Date_Show_SV;
    15ee:	ed ea       	ldi	r30, 0xAD	; 173
    15f0:	f1 e0       	ldi	r31, 0x01	; 1
    15f2:	82 8b       	std	Z+18, r24	; 0x12
									N_Clock.Show=Show_Date;
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	87 83       	std	Z+7, r24	; 0x07
								}
							}

							//Determen if we need to go into power save mode
							if (N_Clock.Setting.Save_Off_Threshold<N_Clock.Setting.Save_AI){
    15f8:	ed ea       	ldi	r30, 0xAD	; 173
    15fa:	f1 e0       	ldi	r31, 0x01	; 1
    15fc:	23 89       	ldd	r18, Z+19	; 0x13
    15fe:	34 89       	ldd	r19, Z+20	; 0x14
    1600:	87 89       	ldd	r24, Z+23	; 0x17
    1602:	90 8d       	ldd	r25, Z+24	; 0x18
    1604:	28 17       	cp	r18, r24
    1606:	39 07       	cpc	r19, r25
    1608:	70 f4       	brcc	.+28     	; 0x1626 <Nixie_Loop+0x160>
								N_Clock.Setting.Save_Timeout -= Timer_Pulse_1s();
    160a:	aa d4       	rcall	.+2388   	; 0x1f60 <Timer_Pulse_1s>
    160c:	ed ea       	ldi	r30, 0xAD	; 173
    160e:	f1 e0       	ldi	r31, 0x01	; 1
    1610:	21 8d       	ldd	r18, Z+25	; 0x19
    1612:	32 8d       	ldd	r19, Z+26	; 0x1a
    1614:	a9 01       	movw	r20, r18
    1616:	48 1b       	sub	r20, r24
    1618:	51 09       	sbc	r21, r1
    161a:	ca 01       	movw	r24, r20
    161c:	52 8f       	std	Z+26, r21	; 0x1a
    161e:	41 8f       	std	Z+25, r20	; 0x19
							}
							else{
								N_Clock.Setting.Save_Timeout = Power_Save_Timeout;//5 minutes timeout
							}
							//Go into power save mode
							if (N_Clock.Setting.Save_Timeout == 0){
    1620:	89 2b       	or	r24, r25
    1622:	41 f0       	breq	.+16     	; 0x1634 <Nixie_Loop+0x16e>
    1624:	17 c0       	rjmp	.+46     	; 0x1654 <Nixie_Loop+0x18e>
							//Determen if we need to go into power save mode
							if (N_Clock.Setting.Save_Off_Threshold<N_Clock.Setting.Save_AI){
								N_Clock.Setting.Save_Timeout -= Timer_Pulse_1s();
							}
							else{
								N_Clock.Setting.Save_Timeout = Power_Save_Timeout;//5 minutes timeout
    1626:	8c e2       	ldi	r24, 0x2C	; 44
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <N_Clock+0x1a>
    162e:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <N_Clock+0x19>
    1632:	10 c0       	rjmp	.+32     	; 0x1654 <Nixie_Loop+0x18e>
							}
							//Go into power save mode
							if (N_Clock.Setting.Save_Timeout == 0){
								N_Clock.Show=Show_Nothing;
    1634:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <N_Clock+0x7>
    1638:	0d c0       	rjmp	.+26     	; 0x1654 <Nixie_Loop+0x18e>
						}//Show_Time
						break;
						
						case Show_Date:{
							//After a timeout cycle back to showing the time
							if (N_Clock.Setting.Date_Timeout_SV>0 && N_Clock.Setting.Date_Show_PV==0){
    163a:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <N_Clock+0xf>
    163e:	88 23       	and	r24, r24
    1640:	49 f0       	breq	.+18     	; 0x1654 <Nixie_Loop+0x18e>
    1642:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <N_Clock+0x12>
    1646:	91 11       	cpse	r25, r1
    1648:	05 c0       	rjmp	.+10     	; 0x1654 <Nixie_Loop+0x18e>
								N_Clock.Setting.Date_Timeout_PV=N_Clock.Setting.Date_Timeout_SV;
    164a:	ed ea       	ldi	r30, 0xAD	; 173
    164c:	f1 e0       	ldi	r31, 0x01	; 1
    164e:	80 8b       	std	Z+16, r24	; 0x10
								N_Clock.Show=Show_Time;
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	87 83       	std	Z+7, r24	; 0x07
							}
						}//Show_Date
						break;
					}//N_Clock.Show
					Nixie_Update(N_Clock.Show);
    1654:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <N_Clock+0x7>
    1658:	f5 dd       	rcall	.-1046   	; 0x1244 <Nixie_Update>

				}//Status_Nixie_Run
				break;
    165a:	20 c1       	rjmp	.+576    	; 0x189c <Nixie_Loop+0x3d6>
				
				case Status_Nixie_Menu:{

					//Is there a button pressed?					
					if((PINC & (1<<Button1)) && (PINC & (1<<Button2))){
    165c:	31 9b       	sbis	0x06, 1	; 6
    165e:	06 c0       	rjmp	.+12     	; 0x166c <Nixie_Loop+0x1a6>
    1660:	32 9b       	sbis	0x06, 2	; 6
    1662:	04 c0       	rjmp	.+8      	; 0x166c <Nixie_Loop+0x1a6>
						Debounce.Sub_Menu=10;//100ms debounce
    1664:	8a e0       	ldi	r24, 0x0A	; 10
    1666:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <Debounce+0x1>
    166a:	c0 c0       	rjmp	.+384    	; 0x17ec <Nixie_Loop+0x326>
					}
					else if(~(PINC & (1<<Button1)) && (PINC & (1<<Button2)) && Debounce.Sub_Menu==0){
    166c:	86 b1       	in	r24, 0x06	; 6
    166e:	32 9b       	sbis	0x06, 2	; 6
    1670:	1f c0       	rjmp	.+62     	; 0x16b0 <Nixie_Loop+0x1ea>
    1672:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <Debounce+0x1>
    1676:	81 11       	cpse	r24, r1
    1678:	62 c1       	rjmp	.+708    	; 0x193e <Nixie_Loop+0x478>
						N_Clock.Menu++;
    167a:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <N_Clock+0x8>
    167e:	8f 5f       	subi	r24, 0xFF	; 255
						if (N_Clock.Menu==4){
    1680:	84 30       	cpi	r24, 0x04	; 4
    1682:	21 f4       	brne	.+8      	; 0x168c <Nixie_Loop+0x1c6>
							N_Clock.Menu=11;
    1684:	8b e0       	ldi	r24, 0x0B	; 11
    1686:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <N_Clock+0x8>
    168a:	0e c0       	rjmp	.+28     	; 0x16a8 <Nixie_Loop+0x1e2>
						}
						else if (N_Clock.Menu==14){
    168c:	8e 30       	cpi	r24, 0x0E	; 14
    168e:	21 f4       	brne	.+8      	; 0x1698 <Nixie_Loop+0x1d2>
							N_Clock.Menu=20;
    1690:	84 e1       	ldi	r24, 0x14	; 20
    1692:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <N_Clock+0x8>
    1696:	08 c0       	rjmp	.+16     	; 0x16a8 <Nixie_Loop+0x1e2>
						}
						else if (N_Clock.Menu>24){
    1698:	89 31       	cpi	r24, 0x19	; 25
    169a:	18 f4       	brcc	.+6      	; 0x16a2 <Nixie_Loop+0x1dc>
					//Is there a button pressed?					
					if((PINC & (1<<Button1)) && (PINC & (1<<Button2))){
						Debounce.Sub_Menu=10;//100ms debounce
					}
					else if(~(PINC & (1<<Button1)) && (PINC & (1<<Button2)) && Debounce.Sub_Menu==0){
						N_Clock.Menu++;
    169c:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <N_Clock+0x8>
    16a0:	03 c0       	rjmp	.+6      	; 0x16a8 <Nixie_Loop+0x1e2>
						}
						else if (N_Clock.Menu==14){
							N_Clock.Menu=20;
						}
						else if (N_Clock.Menu>24){
							N_Clock.Menu=1;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <N_Clock+0x8>
						}
						Debounce.Sub_Menu=30;//set debounce to 300ms to prevent overshoot
    16a8:	8e e1       	ldi	r24, 0x1E	; 30
    16aa:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <Debounce+0x1>
    16ae:	9e c0       	rjmp	.+316    	; 0x17ec <Nixie_Loop+0x326>
					}
					else if ((PINC & (1<<Button1)) && ~(PINC & (1<<Button2)) && Debounce.Sub_Menu==0){
    16b0:	31 9b       	sbis	0x06, 1	; 6
    16b2:	9c c0       	rjmp	.+312    	; 0x17ec <Nixie_Loop+0x326>
    16b4:	86 b1       	in	r24, 0x06	; 6
    16b6:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <Debounce+0x1>
    16ba:	81 11       	cpse	r24, r1
    16bc:	97 c0       	rjmp	.+302    	; 0x17ec <Nixie_Loop+0x326>
						RTC_time_struct _Time = RTC.Time;
    16be:	e7 ed       	ldi	r30, 0xD7	; 215
    16c0:	f1 e0       	ldi	r31, 0x01	; 1
    16c2:	f0 80       	ld	r15, Z
    16c4:	11 81       	ldd	r17, Z+1	; 0x01
    16c6:	d2 81       	ldd	r29, Z+2	; 0x02
						RTC_date_struct _Date = RTC.Date;
    16c8:	c3 81       	ldd	r28, Z+3	; 0x03
    16ca:	04 81       	ldd	r16, Z+4	; 0x04
    16cc:	e5 80       	ldd	r14, Z+5	; 0x05

						switch(N_Clock.Menu){
    16ce:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <N_Clock+0x8>
    16d2:	8e 2f       	mov	r24, r30
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	fc 01       	movw	r30, r24
    16d8:	31 97       	sbiw	r30, 0x01	; 1
    16da:	e8 31       	cpi	r30, 0x18	; 24
    16dc:	f1 05       	cpc	r31, r1
    16de:	08 f0       	brcs	.+2      	; 0x16e2 <Nixie_Loop+0x21c>
    16e0:	80 c0       	rjmp	.+256    	; 0x17e2 <Nixie_Loop+0x31c>
    16e2:	ed 51       	subi	r30, 0x1D	; 29
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	09 94       	ijmp
							case 1:{
								if (++_Time.Second>=60){//protect the seconds from beeing wrong
    16e8:	f3 94       	inc	r15
    16ea:	5b e3       	ldi	r21, 0x3B	; 59
    16ec:	5f 15       	cp	r21, r15
    16ee:	08 f4       	brcc	.+2      	; 0x16f2 <Nixie_Loop+0x22c>
									_Time.Second=0;
    16f0:	f1 2c       	mov	r15, r1
								}
								Debounce.Sub_Menu=30;//Set debounce to 300ms to prevent overshoot.
    16f2:	8e e1       	ldi	r24, 0x1E	; 30
    16f4:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <Debounce+0x1>
							}//1
							break;
    16f8:	74 c0       	rjmp	.+232    	; 0x17e2 <Nixie_Loop+0x31c>
							case 2:{
								if (++_Time.Minute>=60){//protect the minutes from beeing wrong
    16fa:	1f 5f       	subi	r17, 0xFF	; 255
    16fc:	1c 33       	cpi	r17, 0x3C	; 60
    16fe:	08 f0       	brcs	.+2      	; 0x1702 <Nixie_Loop+0x23c>
									_Time.Minute=0;
    1700:	10 e0       	ldi	r17, 0x00	; 0
								}
								Debounce.Sub_Menu=30;//Set debounce to 300ms to prevent overshoot.
    1702:	8e e1       	ldi	r24, 0x1E	; 30
    1704:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <Debounce+0x1>
							}//2
							break;
    1708:	6c c0       	rjmp	.+216    	; 0x17e2 <Nixie_Loop+0x31c>
							case 3:{
								_Time.Hour++;//update the hours
    170a:	df 5f       	subi	r29, 0xFF	; 255
								if (_Time.Hour>=24){//protect the hours from beeing wrong
    170c:	d8 31       	cpi	r29, 0x18	; 24
    170e:	08 f0       	brcs	.+2      	; 0x1712 <Nixie_Loop+0x24c>
									_Time.Hour=0;
    1710:	d0 e0       	ldi	r29, 0x00	; 0
								}
								Debounce.Sub_Menu=30;//Set debounce to 300ms to prevent overshoot.
    1712:	8e e1       	ldi	r24, 0x1E	; 30
    1714:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <Debounce+0x1>
							}//3
							break;
    1718:	64 c0       	rjmp	.+200    	; 0x17e2 <Nixie_Loop+0x31c>
							case 11:{
								_Date.Year++;//update the years
    171a:	e3 94       	inc	r14
								if (_Date.Year>99){//protect the year from beeing wrong
    171c:	83 e6       	ldi	r24, 0x63	; 99
    171e:	8e 15       	cp	r24, r14
    1720:	08 f4       	brcc	.+2      	; 0x1724 <Nixie_Loop+0x25e>
									_Date.Year=0;
    1722:	e1 2c       	mov	r14, r1
								}
								Debounce.Sub_Menu=30;//Set debounce to 300ms to prevent overshoot.
    1724:	8e e1       	ldi	r24, 0x1E	; 30
    1726:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <Debounce+0x1>
							}//4
							break;
    172a:	5b c0       	rjmp	.+182    	; 0x17e2 <Nixie_Loop+0x31c>
							case 12:{
								_Date.Month++;//update the month
    172c:	0f 5f       	subi	r16, 0xFF	; 255
								if (_Date.Month>12){//protect the month from beeing wrong
    172e:	0d 30       	cpi	r16, 0x0D	; 13
    1730:	08 f0       	brcs	.+2      	; 0x1734 <Nixie_Loop+0x26e>
									_Date.Month=1;
    1732:	01 e0       	ldi	r16, 0x01	; 1
								}
								Debounce.Sub_Menu=30;//Set debounce to 300ms to prevent overshoot.
    1734:	8e e1       	ldi	r24, 0x1E	; 30
    1736:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <Debounce+0x1>
							}//5
							break;
    173a:	53 c0       	rjmp	.+166    	; 0x17e2 <Nixie_Loop+0x31c>
							case 13:{
								_Date.Day++;//update the day
    173c:	cf 5f       	subi	r28, 0xFF	; 255
								//protect the day from beeing wrong.
								if ((_Date.Month==2) && (_Date.Day>28) && (RTC_not_leap())){//February and not a leap year
    173e:	02 30       	cpi	r16, 0x02	; 2
    1740:	09 f0       	breq	.+2      	; 0x1744 <Nixie_Loop+0x27e>
    1742:	04 c1       	rjmp	.+520    	; 0x194c <Nixie_Loop+0x486>
    1744:	cd 31       	cpi	r28, 0x1D	; 29
    1746:	08 f4       	brcc	.+2      	; 0x174a <Nixie_Loop+0x284>
    1748:	fd c0       	rjmp	.+506    	; 0x1944 <Nixie_Loop+0x47e>
    174a:	28 d2       	rcall	.+1104   	; 0x1b9c <RTC_not_leap>
    174c:	81 11       	cpse	r24, r1
    174e:	0b c0       	rjmp	.+22     	; 0x1766 <Nixie_Loop+0x2a0>
    1750:	f9 c0       	rjmp	.+498    	; 0x1944 <Nixie_Loop+0x47e>
									_Date.Day=1;
								}
								else if ((_Date.Month==2) && (_Date.Day>29)){//February in a leap year
									_Date.Day=1;
								}
								else if ((_Date.Day>30) && ((_Date.Month==4)||(_Date.Month==6)||(_Date.Month==9)||(_Date.Month==11))){//30 day months
    1752:	80 2f       	mov	r24, r16
    1754:	8d 7f       	andi	r24, 0xFD	; 253
    1756:	84 30       	cpi	r24, 0x04	; 4
    1758:	41 f0       	breq	.+16     	; 0x176a <Nixie_Loop+0x2a4>
    175a:	89 30       	cpi	r24, 0x09	; 9
    175c:	41 f0       	breq	.+16     	; 0x176e <Nixie_Loop+0x2a8>
									_Date.Day=1;
								}
								else if (_Date.Day>31){//31 day months
    175e:	c0 32       	cpi	r28, 0x20	; 32
    1760:	48 f0       	brcs	.+18     	; 0x1774 <Nixie_Loop+0x2ae>
									_Date.Day=1;
    1762:	c1 e0       	ldi	r28, 0x01	; 1
    1764:	07 c0       	rjmp	.+14     	; 0x1774 <Nixie_Loop+0x2ae>
							break;
							case 13:{
								_Date.Day++;//update the day
								//protect the day from beeing wrong.
								if ((_Date.Month==2) && (_Date.Day>28) && (RTC_not_leap())){//February and not a leap year
									_Date.Day=1;
    1766:	c1 e0       	ldi	r28, 0x01	; 1
    1768:	05 c0       	rjmp	.+10     	; 0x1774 <Nixie_Loop+0x2ae>
								}
								else if ((_Date.Month==2) && (_Date.Day>29)){//February in a leap year
									_Date.Day=1;
								}
								else if ((_Date.Day>30) && ((_Date.Month==4)||(_Date.Month==6)||(_Date.Month==9)||(_Date.Month==11))){//30 day months
									_Date.Day=1;
    176a:	c1 e0       	ldi	r28, 0x01	; 1
    176c:	03 c0       	rjmp	.+6      	; 0x1774 <Nixie_Loop+0x2ae>
    176e:	c1 e0       	ldi	r28, 0x01	; 1
    1770:	01 c0       	rjmp	.+2      	; 0x1774 <Nixie_Loop+0x2ae>
								//protect the day from beeing wrong.
								if ((_Date.Month==2) && (_Date.Day>28) && (RTC_not_leap())){//February and not a leap year
									_Date.Day=1;
								}
								else if ((_Date.Month==2) && (_Date.Day>29)){//February in a leap year
									_Date.Day=1;
    1772:	c1 e0       	ldi	r28, 0x01	; 1
									_Date.Day=1;
								}
								else if (_Date.Day>31){//31 day months
									_Date.Day=1;
								}
								Debounce.Sub_Menu=30;//Set debounce to 300ms to prevent overshoot.
    1774:	8e e1       	ldi	r24, 0x1E	; 30
    1776:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <Debounce+0x1>
							}//13
							break;
    177a:	33 c0       	rjmp	.+102    	; 0x17e2 <Nixie_Loop+0x31c>
							
							case 20:{
								if (N_Clock.Setting.Date_Show){
    177c:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <N_Clock+0xe>
    1780:	88 23       	and	r24, r24
    1782:	19 f0       	breq	.+6      	; 0x178a <Nixie_Loop+0x2c4>
									N_Clock.Setting.Date_Show=0;
    1784:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <N_Clock+0xe>
    1788:	03 c0       	rjmp	.+6      	; 0x1790 <Nixie_Loop+0x2ca>
								}
								else {
									N_Clock.Setting.Date_Show++;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <N_Clock+0xe>
								}
								Debounce.Sub_Menu=30;//Set debounce to 300ms to prevent overshoot.
    1790:	8e e1       	ldi	r24, 0x1E	; 30
    1792:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <Debounce+0x1>
							}//20
							break;
    1796:	25 c0       	rjmp	.+74     	; 0x17e2 <Nixie_Loop+0x31c>
														
							case 21:{
								N_Clock.Setting.Date_Show_SV++;
    1798:	ed ea       	ldi	r30, 0xAD	; 173
    179a:	f1 e0       	ldi	r31, 0x01	; 1
    179c:	81 89       	ldd	r24, Z+17	; 0x11
    179e:	8f 5f       	subi	r24, 0xFF	; 255
    17a0:	81 8b       	std	Z+17, r24	; 0x11
								Debounce.Sub_Menu=30;//Set debounce to 300ms to prevent overshoot.
    17a2:	8e e1       	ldi	r24, 0x1E	; 30
    17a4:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <Debounce+0x1>
							}//21
							break;
    17a8:	1c c0       	rjmp	.+56     	; 0x17e2 <Nixie_Loop+0x31c>
							
							case 22:{
								N_Clock.Setting.Date_Timeout_SV++;
    17aa:	ed ea       	ldi	r30, 0xAD	; 173
    17ac:	f1 e0       	ldi	r31, 0x01	; 1
    17ae:	87 85       	ldd	r24, Z+15	; 0x0f
    17b0:	8f 5f       	subi	r24, 0xFF	; 255
    17b2:	87 87       	std	Z+15, r24	; 0x0f
								Debounce.Sub_Menu=30;//Set debounce to 300ms to prevent overshoot.
    17b4:	8e e1       	ldi	r24, 0x1E	; 30
    17b6:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <Debounce+0x1>
							}//22
							break;
    17ba:	13 c0       	rjmp	.+38     	; 0x17e2 <Nixie_Loop+0x31c>
							
							case 23:{
								N_Clock.Setting.Save_On_Threshold=N_Clock.Setting.Save_AI;
    17bc:	ed ea       	ldi	r30, 0xAD	; 173
    17be:	f1 e0       	ldi	r31, 0x01	; 1
    17c0:	87 89       	ldd	r24, Z+23	; 0x17
    17c2:	90 8d       	ldd	r25, Z+24	; 0x18
    17c4:	96 8b       	std	Z+22, r25	; 0x16
    17c6:	85 8b       	std	Z+21, r24	; 0x15
								Debounce.Sub_Menu=30;//Set debounce to 300ms to prevent overshoot.
    17c8:	8e e1       	ldi	r24, 0x1E	; 30
    17ca:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <Debounce+0x1>
							}//23
							break;
    17ce:	09 c0       	rjmp	.+18     	; 0x17e2 <Nixie_Loop+0x31c>
							
							case 24:{
								N_Clock.Setting.Save_Off_Threshold=N_Clock.Setting.Save_AI;
    17d0:	ed ea       	ldi	r30, 0xAD	; 173
    17d2:	f1 e0       	ldi	r31, 0x01	; 1
    17d4:	87 89       	ldd	r24, Z+23	; 0x17
    17d6:	90 8d       	ldd	r25, Z+24	; 0x18
    17d8:	94 8b       	std	Z+20, r25	; 0x14
    17da:	83 8b       	std	Z+19, r24	; 0x13
								Debounce.Sub_Menu=30;//Set debounce to 300ms to prevent overshoot.
    17dc:	8e e1       	ldi	r24, 0x1E	; 30
    17de:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <Debounce+0x1>
							break;
							
						}//N_Clock.Menu
						
						//Save the time and date
						RTC_Set_DateTime(_Time.Second, _Time.Minute, _Time.Hour, _Date.Day, _Date.Month, _Date.Year);
    17e2:	2c 2f       	mov	r18, r28
    17e4:	4d 2f       	mov	r20, r29
    17e6:	61 2f       	mov	r22, r17
    17e8:	8f 2d       	mov	r24, r15
    17ea:	19 d3       	rcall	.+1586   	; 0x1e1e <RTC_Set_DateTime>
					}
					
					//What do we need to show on the Nixies?
					switch(N_Clock.Menu){
    17ec:	40 91 b5 01 	lds	r20, 0x01B5	; 0x8001b5 <N_Clock+0x8>
    17f0:	46 31       	cpi	r20, 0x16	; 22
    17f2:	f9 f0       	breq	.+62     	; 0x1832 <Nixie_Loop+0x36c>
    17f4:	28 f4       	brcc	.+10     	; 0x1800 <Nixie_Loop+0x33a>
    17f6:	44 31       	cpi	r20, 0x14	; 20
    17f8:	31 f0       	breq	.+12     	; 0x1806 <Nixie_Loop+0x340>
    17fa:	45 31       	cpi	r20, 0x15	; 21
    17fc:	51 f0       	breq	.+20     	; 0x1812 <Nixie_Loop+0x34c>
    17fe:	41 c0       	rjmp	.+130    	; 0x1882 <Nixie_Loop+0x3bc>
    1800:	49 31       	cpi	r20, 0x19	; 25
    1802:	38 f1       	brcs	.+78     	; 0x1852 <Nixie_Loop+0x38c>
    1804:	3e c0       	rjmp	.+124    	; 0x1882 <Nixie_Loop+0x3bc>
						case 20:{
							N_Clock.Menu_Nixie3_4=0;
    1806:	ed ea       	ldi	r30, 0xAD	; 173
    1808:	f1 e0       	ldi	r31, 0x01	; 1
    180a:	14 82       	std	Z+4, r1	; 0x04
							N_Clock.Menu_Nixie5_6=N_Clock.Setting.Date_Show;
    180c:	86 85       	ldd	r24, Z+14	; 0x0e
    180e:	85 83       	std	Z+5, r24	; 0x05
						}//20
						break;
    1810:	43 c0       	rjmp	.+134    	; 0x1898 <Nixie_Loop+0x3d2>
						case 21:{
							N_Clock.Menu_Nixie3_4=N_Clock.Setting.Date_Show_SV/100;
    1812:	ed ea       	ldi	r30, 0xAD	; 173
    1814:	f1 e0       	ldi	r31, 0x01	; 1
    1816:	91 89       	ldd	r25, Z+17	; 0x11
    1818:	89 e2       	ldi	r24, 0x29	; 41
    181a:	98 9f       	mul	r25, r24
    181c:	81 2d       	mov	r24, r1
    181e:	11 24       	eor	r1, r1
    1820:	82 95       	swap	r24
    1822:	8f 70       	andi	r24, 0x0F	; 15
    1824:	84 83       	std	Z+4, r24	; 0x04
							N_Clock.Menu_Nixie5_6=N_Clock.Setting.Date_Show_SV%100;
    1826:	24 e6       	ldi	r18, 0x64	; 100
    1828:	82 9f       	mul	r24, r18
    182a:	90 19       	sub	r25, r0
    182c:	11 24       	eor	r1, r1
    182e:	95 83       	std	Z+5, r25	; 0x05
						}
						break;
    1830:	33 c0       	rjmp	.+102    	; 0x1898 <Nixie_Loop+0x3d2>
						case 22:{
							N_Clock.Menu_Nixie3_4=N_Clock.Setting.Date_Timeout_SV/100;
    1832:	ed ea       	ldi	r30, 0xAD	; 173
    1834:	f1 e0       	ldi	r31, 0x01	; 1
    1836:	97 85       	ldd	r25, Z+15	; 0x0f
    1838:	89 e2       	ldi	r24, 0x29	; 41
    183a:	98 9f       	mul	r25, r24
    183c:	81 2d       	mov	r24, r1
    183e:	11 24       	eor	r1, r1
    1840:	82 95       	swap	r24
    1842:	8f 70       	andi	r24, 0x0F	; 15
    1844:	84 83       	std	Z+4, r24	; 0x04
							N_Clock.Menu_Nixie5_6=N_Clock.Setting.Date_Timeout_SV%100;
    1846:	44 e6       	ldi	r20, 0x64	; 100
    1848:	84 9f       	mul	r24, r20
    184a:	90 19       	sub	r25, r0
    184c:	11 24       	eor	r1, r1
    184e:	95 83       	std	Z+5, r25	; 0x05
						}//22
						break;
    1850:	23 c0       	rjmp	.+70     	; 0x1898 <Nixie_Loop+0x3d2>
						case 23:
						case 24:{
							N_Clock.Menu_Nixie3_4=N_Clock.Setting.Save_AI/100;
    1852:	cd ea       	ldi	r28, 0xAD	; 173
    1854:	d1 e0       	ldi	r29, 0x01	; 1
    1856:	ef 89       	ldd	r30, Y+23	; 0x17
    1858:	f8 8d       	ldd	r31, Y+24	; 0x18
    185a:	9f 01       	movw	r18, r30
    185c:	36 95       	lsr	r19
    185e:	27 95       	ror	r18
    1860:	36 95       	lsr	r19
    1862:	27 95       	ror	r18
    1864:	ab e7       	ldi	r26, 0x7B	; 123
    1866:	b4 e1       	ldi	r27, 0x14	; 20
    1868:	a2 d3       	rcall	.+1860   	; 0x1fae <__umulhisi3>
    186a:	96 95       	lsr	r25
    186c:	87 95       	ror	r24
    186e:	8c 83       	std	Y+4, r24	; 0x04
							N_Clock.Menu_Nixie5_6=N_Clock.Setting.Save_AI%100;		
    1870:	54 e6       	ldi	r21, 0x64	; 100
    1872:	58 9f       	mul	r21, r24
    1874:	90 01       	movw	r18, r0
    1876:	59 9f       	mul	r21, r25
    1878:	30 0d       	add	r19, r0
    187a:	11 24       	eor	r1, r1
    187c:	e2 1b       	sub	r30, r18
    187e:	f3 0b       	sbc	r31, r19
    1880:	ed 83       	std	Y+5, r30	; 0x05
						}//23 & 24
						break;	
					}//switch
					
					if (N_Clock.Menu<4){
    1882:	44 30       	cpi	r20, 0x04	; 4
    1884:	18 f4       	brcc	.+6      	; 0x188c <Nixie_Loop+0x3c6>
						Nixie_Update(Show_Time);
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	dd dc       	rcall	.-1606   	; 0x1244 <Nixie_Update>
    188a:	08 c0       	rjmp	.+16     	; 0x189c <Nixie_Loop+0x3d6>
					}
					else if (N_Clock.Menu>9 && N_Clock.Menu<20){
    188c:	4a 50       	subi	r20, 0x0A	; 10
    188e:	4a 30       	cpi	r20, 0x0A	; 10
    1890:	18 f4       	brcc	.+6      	; 0x1898 <Nixie_Loop+0x3d2>
						Nixie_Update(Show_Date);
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	d7 dc       	rcall	.-1618   	; 0x1244 <Nixie_Update>
    1896:	02 c0       	rjmp	.+4      	; 0x189c <Nixie_Loop+0x3d6>
					}
					else{
						Nixie_Update(Show_Menu);
    1898:	83 e0       	ldi	r24, 0x03	; 3
    189a:	d4 dc       	rcall	.-1624   	; 0x1244 <Nixie_Update>
		break;
	}//N_Clock.Status

	//Timers
	//Debounce timers
	uint8_t _Pulse_10ms = Timer_Pulse_10ms();
    189c:	5b d3       	rcall	.+1718   	; 0x1f54 <Timer_Pulse_10ms>
	Debounce.Menu					-= Debounce.Menu && _Pulse_10ms;
    189e:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <Debounce>
    18a2:	99 23       	and	r25, r25
    18a4:	11 f0       	breq	.+4      	; 0x18aa <Nixie_Loop+0x3e4>
    18a6:	81 11       	cpse	r24, r1
    18a8:	65 c0       	rjmp	.+202    	; 0x1974 <Nixie_Loop+0x4ae>
    18aa:	ea ea       	ldi	r30, 0xAA	; 170
    18ac:	f1 e0       	ldi	r31, 0x01	; 1
    18ae:	90 83       	st	Z, r25
	Debounce.Sub_Menu				-= Debounce.Sub_Menu && _Pulse_10ms;
    18b0:	91 81       	ldd	r25, Z+1	; 0x01
    18b2:	99 23       	and	r25, r25
    18b4:	11 f0       	breq	.+4      	; 0x18ba <Nixie_Loop+0x3f4>
    18b6:	81 11       	cpse	r24, r1
    18b8:	4d c0       	rjmp	.+154    	; 0x1954 <Nixie_Loop+0x48e>
	Debounce.Timer					-= Debounce.Timer && _Pulse_10ms;
    18ba:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <Debounce+0x2>
    18be:	99 23       	and	r25, r25
    18c0:	11 f0       	breq	.+4      	; 0x18c6 <Nixie_Loop+0x400>
    18c2:	81 11       	cpse	r24, r1
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <Nixie_Loop+0x404>
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	03 c0       	rjmp	.+6      	; 0x18d0 <Nixie_Loop+0x40a>
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <Nixie_Loop+0x40a>
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	98 1b       	sub	r25, r24
    18d2:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <Debounce+0x2>

	//Setting timers
	uint8_t _Pulse_1s = Timer_Pulse_1s();
    18d6:	44 d3       	rcall	.+1672   	; 0x1f60 <Timer_Pulse_1s>
	N_Clock.Setting.Date_Show_PV	-= N_Clock.Setting.Date_Show_PV && _Pulse_1s;
    18d8:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <N_Clock+0x12>
    18dc:	99 23       	and	r25, r25
    18de:	11 f0       	breq	.+4      	; 0x18e4 <Nixie_Loop+0x41e>
    18e0:	81 11       	cpse	r24, r1
    18e2:	40 c0       	rjmp	.+128    	; 0x1964 <Nixie_Loop+0x49e>
	N_Clock.Setting.Date_Timeout_PV -= N_Clock.Setting.Date_Timeout_PV && _Pulse_1s;
    18e4:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <N_Clock+0x10>
    18e8:	99 23       	and	r25, r25
    18ea:	11 f0       	breq	.+4      	; 0x18f0 <Nixie_Loop+0x42a>
    18ec:	81 11       	cpse	r24, r1
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <Nixie_Loop+0x42e>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	03 c0       	rjmp	.+6      	; 0x18fa <Nixie_Loop+0x434>
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	01 c0       	rjmp	.+2      	; 0x18fa <Nixie_Loop+0x434>
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	cd ea       	ldi	r28, 0xAD	; 173
    18fc:	d1 e0       	ldi	r29, 0x01	; 1
    18fe:	98 1b       	sub	r25, r24
    1900:	98 8b       	std	Y+16, r25	; 0x10

	//Misc timers
	uint8_t _Pulse_1ms = Timer_Pulse_1ms();
    1902:	25 d3       	rcall	.+1610   	; 0x1f4e <Timer_Pulse_1ms>
	N_Clock.Nixie_Blanking_Timer	-= N_Clock.Nixie_Blanking_Timer && _Pulse_1ms;
    1904:	9a 85       	ldd	r25, Y+10	; 0x0a
    1906:	99 23       	and	r25, r25
    1908:	09 f4       	brne	.+2      	; 0x190c <Nixie_Loop+0x446>
    190a:	42 c0       	rjmp	.+132    	; 0x1990 <Nixie_Loop+0x4ca>
    190c:	88 23       	and	r24, r24
    190e:	d1 f1       	breq	.+116    	; 0x1984 <Nixie_Loop+0x4be>
    1910:	2f ef       	ldi	r18, 0xFF	; 255
    1912:	29 0f       	add	r18, r25
    1914:	2a 87       	std	Y+10, r18	; 0x0a
	N_Clock.Next_Nixie_Timer		-= N_Clock.Next_Nixie_Timer && N_Clock.Nixie_Blanking_Timer==0 && _Pulse_1ms;
    1916:	9b 85       	ldd	r25, Y+11	; 0x0b
    1918:	99 23       	and	r25, r25
    191a:	41 f0       	breq	.+16     	; 0x192c <Nixie_Loop+0x466>
    191c:	21 11       	cpse	r18, r1
    191e:	08 c0       	rjmp	.+16     	; 0x1930 <Nixie_Loop+0x46a>
    1920:	21 e0       	ldi	r18, 0x01	; 1
    1922:	81 11       	cpse	r24, r1
    1924:	01 c0       	rjmp	.+2      	; 0x1928 <Nixie_Loop+0x462>
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	82 2f       	mov	r24, r18
    192a:	03 c0       	rjmp	.+6      	; 0x1932 <Nixie_Loop+0x46c>
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	01 c0       	rjmp	.+2      	; 0x1932 <Nixie_Loop+0x46c>
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	98 1b       	sub	r25, r24
    1934:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <N_Clock+0xb>
}//Nixie_Loop
    1938:	33 c0       	rjmp	.+102    	; 0x19a0 <Nixie_Loop+0x4da>
						else if (N_Clock.Menu>24){
							N_Clock.Menu=1;
						}
						Debounce.Sub_Menu=30;//set debounce to 300ms to prevent overshoot
					}
					else if ((PINC & (1<<Button1)) && ~(PINC & (1<<Button2)) && Debounce.Sub_Menu==0){
    193a:	86 b1       	in	r24, 0x06	; 6
    193c:	57 cf       	rjmp	.-338    	; 0x17ec <Nixie_Loop+0x326>
    193e:	31 99       	sbic	0x06, 1	; 6
    1940:	fc cf       	rjmp	.-8      	; 0x193a <Nixie_Loop+0x474>
    1942:	54 cf       	rjmp	.-344    	; 0x17ec <Nixie_Loop+0x326>
								_Date.Day++;//update the day
								//protect the day from beeing wrong.
								if ((_Date.Month==2) && (_Date.Day>28) && (RTC_not_leap())){//February and not a leap year
									_Date.Day=1;
								}
								else if ((_Date.Month==2) && (_Date.Day>29)){//February in a leap year
    1944:	ce 31       	cpi	r28, 0x1E	; 30
    1946:	08 f0       	brcs	.+2      	; 0x194a <Nixie_Loop+0x484>
    1948:	14 cf       	rjmp	.-472    	; 0x1772 <Nixie_Loop+0x2ac>
    194a:	09 cf       	rjmp	.-494    	; 0x175e <Nixie_Loop+0x298>
									_Date.Day=1;
								}
								else if ((_Date.Day>30) && ((_Date.Month==4)||(_Date.Month==6)||(_Date.Month==9)||(_Date.Month==11))){//30 day months
    194c:	cf 31       	cpi	r28, 0x1F	; 31
    194e:	08 f0       	brcs	.+2      	; 0x1952 <Nixie_Loop+0x48c>
    1950:	00 cf       	rjmp	.-512    	; 0x1752 <Nixie_Loop+0x28c>
    1952:	05 cf       	rjmp	.-502    	; 0x175e <Nixie_Loop+0x298>

	//Timers
	//Debounce timers
	uint8_t _Pulse_10ms = Timer_Pulse_10ms();
	Debounce.Menu					-= Debounce.Menu && _Pulse_10ms;
	Debounce.Sub_Menu				-= Debounce.Sub_Menu && _Pulse_10ms;
    1954:	ea ea       	ldi	r30, 0xAA	; 170
    1956:	f1 e0       	ldi	r31, 0x01	; 1
    1958:	91 50       	subi	r25, 0x01	; 1
    195a:	91 83       	std	Z+1, r25	; 0x01
	Debounce.Timer					-= Debounce.Timer && _Pulse_10ms;
    195c:	92 81       	ldd	r25, Z+2	; 0x02
    195e:	91 11       	cpse	r25, r1
    1960:	b6 cf       	rjmp	.-148    	; 0x18ce <Nixie_Loop+0x408>
    1962:	b1 cf       	rjmp	.-158    	; 0x18c6 <Nixie_Loop+0x400>

	//Setting timers
	uint8_t _Pulse_1s = Timer_Pulse_1s();
	N_Clock.Setting.Date_Show_PV	-= N_Clock.Setting.Date_Show_PV && _Pulse_1s;
    1964:	ed ea       	ldi	r30, 0xAD	; 173
    1966:	f1 e0       	ldi	r31, 0x01	; 1
    1968:	91 50       	subi	r25, 0x01	; 1
    196a:	92 8b       	std	Z+18, r25	; 0x12
	N_Clock.Setting.Date_Timeout_PV -= N_Clock.Setting.Date_Timeout_PV && _Pulse_1s;
    196c:	90 89       	ldd	r25, Z+16	; 0x10
    196e:	91 11       	cpse	r25, r1
    1970:	c3 cf       	rjmp	.-122    	; 0x18f8 <Nixie_Loop+0x432>
    1972:	be cf       	rjmp	.-132    	; 0x18f0 <Nixie_Loop+0x42a>
	}//N_Clock.Status

	//Timers
	//Debounce timers
	uint8_t _Pulse_10ms = Timer_Pulse_10ms();
	Debounce.Menu					-= Debounce.Menu && _Pulse_10ms;
    1974:	ea ea       	ldi	r30, 0xAA	; 170
    1976:	f1 e0       	ldi	r31, 0x01	; 1
    1978:	91 50       	subi	r25, 0x01	; 1
    197a:	90 83       	st	Z, r25
	Debounce.Sub_Menu				-= Debounce.Sub_Menu && _Pulse_10ms;
    197c:	91 81       	ldd	r25, Z+1	; 0x01
    197e:	91 11       	cpse	r25, r1
    1980:	e9 cf       	rjmp	.-46     	; 0x1954 <Nixie_Loop+0x48e>
    1982:	9b cf       	rjmp	.-202    	; 0x18ba <Nixie_Loop+0x3f4>
	N_Clock.Setting.Date_Show_PV	-= N_Clock.Setting.Date_Show_PV && _Pulse_1s;
	N_Clock.Setting.Date_Timeout_PV -= N_Clock.Setting.Date_Timeout_PV && _Pulse_1s;

	//Misc timers
	uint8_t _Pulse_1ms = Timer_Pulse_1ms();
	N_Clock.Nixie_Blanking_Timer	-= N_Clock.Nixie_Blanking_Timer && _Pulse_1ms;
    1984:	ed ea       	ldi	r30, 0xAD	; 173
    1986:	f1 e0       	ldi	r31, 0x01	; 1
    1988:	92 87       	std	Z+10, r25	; 0x0a
	N_Clock.Next_Nixie_Timer		-= N_Clock.Next_Nixie_Timer && N_Clock.Nixie_Blanking_Timer==0 && _Pulse_1ms;
    198a:	93 85       	ldd	r25, Z+11	; 0x0b
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	d1 cf       	rjmp	.-94     	; 0x1932 <Nixie_Loop+0x46c>
	N_Clock.Setting.Date_Show_PV	-= N_Clock.Setting.Date_Show_PV && _Pulse_1s;
	N_Clock.Setting.Date_Timeout_PV -= N_Clock.Setting.Date_Timeout_PV && _Pulse_1s;

	//Misc timers
	uint8_t _Pulse_1ms = Timer_Pulse_1ms();
	N_Clock.Nixie_Blanking_Timer	-= N_Clock.Nixie_Blanking_Timer && _Pulse_1ms;
    1990:	ed ea       	ldi	r30, 0xAD	; 173
    1992:	f1 e0       	ldi	r31, 0x01	; 1
    1994:	92 87       	std	Z+10, r25	; 0x0a
	N_Clock.Next_Nixie_Timer		-= N_Clock.Next_Nixie_Timer && N_Clock.Nixie_Blanking_Timer==0 && _Pulse_1ms;
    1996:	93 85       	ldd	r25, Z+11	; 0x0b
    1998:	91 11       	cpse	r25, r1
    199a:	c2 cf       	rjmp	.-124    	; 0x1920 <Nixie_Loop+0x45a>
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	c9 cf       	rjmp	.-110    	; 0x1932 <Nixie_Loop+0x46c>
}//Nixie_Loop
    19a0:	df 91       	pop	r29
    19a2:	cf 91       	pop	r28
    19a4:	1f 91       	pop	r17
    19a6:	0f 91       	pop	r16
    19a8:	ff 90       	pop	r15
    19aa:	ef 90       	pop	r14
    19ac:	08 95       	ret

000019ae <Setting_Init>:
	}	
}

//Setting functions
void Setting_Init(void){
	N_Clock.Setting.Init=INIT_NOK;	
    19ae:	ed ea       	ldi	r30, 0xAD	; 173
    19b0:	f1 e0       	ldi	r31, 0x01	; 1
    19b2:	14 86       	std	Z+12, r1	; 0x0c
	N_Clock.Setting.EEPROM_File_Size=sizeof(N_Clock.Setting.EEPROM);
    19b4:	8b e0       	ldi	r24, 0x0B	; 11
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	94 8f       	std	Z+28, r25	; 0x1c
    19ba:	83 8f       	std	Z+27, r24	; 0x1b
    19bc:	08 95       	ret

000019be <Nixie_Init>:
		EEPROM_Loop();
    }
}//main

//Nixie functions
void Nixie_Init(){
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
	//Set the correct data direction bits
	DDRD |= (1<<BCD1_0)|(1<<BCD1_1)|(1<<BCD1_2)|(1<<BCD1_3)|(1<<BCD2_0)|(1<<BCD2_1)|(1<<BCD2_2)|(1<<BCD2_3);
    19c2:	8a b1       	in	r24, 0x0a	; 10
    19c4:	8f ef       	ldi	r24, 0xFF	; 255
    19c6:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<Nixie1_2)|(1<<Nixie3_4)|(1<<Nixie5_6)|(1<<Colon);
    19c8:	84 b1       	in	r24, 0x04	; 4
    19ca:	87 61       	ori	r24, 0x17	; 23
    19cc:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~((1<<Button1)|(1<<Button2));
    19ce:	87 b1       	in	r24, 0x07	; 7
    19d0:	89 7f       	andi	r24, 0xF9	; 249
    19d2:	87 b9       	out	0x07, r24	; 7
	// Set machine states
	N_Clock.Cur_Nixie=0;
    19d4:	cd ea       	ldi	r28, 0xAD	; 173
    19d6:	d1 e0       	ldi	r29, 0x01	; 1
    19d8:	18 82       	st	Y, r1
	Power_Mode(Power_Mode_OFF);
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	bb d0       	rcall	.+374    	; 0x1b54 <Power_Mode>
	N_Clock.Status=Status_Nixie_Start;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	8e 83       	std	Y+6, r24	; 0x06
	N_Clock.Setting.Blanking_SV = Nixie_Blanking;
    19e2:	83 e0       	ldi	r24, 0x03	; 3
    19e4:	88 a7       	std	Y+40, r24	; 0x28
	N_Clock.Setting.Time_On_SV = Next_Nixie_Time_on;
    19e6:	85 e0       	ldi	r24, 0x05	; 5
    19e8:	89 a7       	std	Y+41, r24	; 0x29
	//init power circuit
	Power_Init();
    19ea:	6d d0       	rcall	.+218    	; 0x1ac6 <Power_Init>
	Setting_Init();
    19ec:	e0 df       	rcall	.-64     	; 0x19ae <Setting_Init>
}//Nixie_Init
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	08 95       	ret

000019f4 <Setting_Loop>:
void Setting_Init(void){
	N_Clock.Setting.Init=INIT_NOK;	
	N_Clock.Setting.EEPROM_File_Size=sizeof(N_Clock.Setting.EEPROM);
}//Setting_Init

void Setting_Loop(void){
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
	switch (N_Clock.Setting.Init){
    19f8:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <N_Clock+0xc>
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	81 f0       	breq	.+32     	; 0x1a20 <Setting_Loop+0x2c>
    1a00:	18 f0       	brcs	.+6      	; 0x1a08 <Setting_Loop+0x14>
    1a02:	82 30       	cpi	r24, 0x02	; 2
    1a04:	39 f1       	breq	.+78     	; 0x1a54 <Setting_Loop+0x60>
    1a06:	49 c0       	rjmp	.+146    	; 0x1a9a <Setting_Loop+0xa6>
		case Nixie_Init_NOK:{
			EEPROM_Read(Nixie_EEPROM_Settings_Adress, N_Clock.Setting.EEPROM_File_Size, (uint8_t *)&N_Clock.Setting.EEPROM);
    1a08:	cd ea       	ldi	r28, 0xAD	; 173
    1a0a:	d1 e0       	ldi	r29, 0x01	; 1
    1a0c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1a0e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1a10:	4a ec       	ldi	r20, 0xCA	; 202
    1a12:	51 e0       	ldi	r21, 0x01	; 1
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	52 d9       	rcall	.-3420   	; 0xcbe <EEPROM_Read>
			N_Clock.Setting.Init=Nixie_Init_Wait;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	8c 87       	std	Y+12, r24	; 0x0c
		}//Nixie_Init_NOK
		break;
    1a1e:	3d c0       	rjmp	.+122    	; 0x1a9a <Setting_Loop+0xa6>
		
		case Nixie_Init_Wait:{
			if (EEPROM_Status()==EEPROM_Status_IDLE){
    1a20:	37 d9       	rcall	.-3474   	; 0xc90 <EEPROM_Status>
    1a22:	81 11       	cpse	r24, r1
    1a24:	3a c0       	rjmp	.+116    	; 0x1a9a <Setting_Loop+0xa6>
				//Copy the file to the structure
				N_Clock.Setting.Date_Show			=N_Clock.Setting.EEPROM.Date_Show;
    1a26:	ed ea       	ldi	r30, 0xAD	; 173
    1a28:	f1 e0       	ldi	r31, 0x01	; 1
    1a2a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a2c:	86 87       	std	Z+14, r24	; 0x0e
				N_Clock.Setting.Date_Show_SV		=N_Clock.Setting.EEPROM.Date_Show_SV;
    1a2e:	87 8d       	ldd	r24, Z+31	; 0x1f
    1a30:	81 8b       	std	Z+17, r24	; 0x11
				N_Clock.Setting.Date_Timeout_SV		=N_Clock.Setting.EEPROM.Date_Timeout_SV;
    1a32:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a34:	87 87       	std	Z+15, r24	; 0x0f
				N_Clock.Setting.Save_Off_Threshold	=N_Clock.Setting.EEPROM.Save_Off_Threshold;
    1a36:	80 a1       	ldd	r24, Z+32	; 0x20
    1a38:	91 a1       	ldd	r25, Z+33	; 0x21
    1a3a:	94 8b       	std	Z+20, r25	; 0x14
    1a3c:	83 8b       	std	Z+19, r24	; 0x13
				N_Clock.Setting.Save_On_Threshold	=N_Clock.Setting.EEPROM.Save_On_Threshold;
    1a3e:	82 a1       	ldd	r24, Z+34	; 0x22
    1a40:	93 a1       	ldd	r25, Z+35	; 0x23
    1a42:	96 8b       	std	Z+22, r25	; 0x16
    1a44:	85 8b       	std	Z+21, r24	; 0x15
				N_Clock.Setting.Save_Timeout		=N_Clock.Setting.EEPROM.Save_Timeout;
    1a46:	86 a1       	ldd	r24, Z+38	; 0x26
    1a48:	97 a1       	ldd	r25, Z+39	; 0x27
    1a4a:	92 8f       	std	Z+26, r25	; 0x1a
    1a4c:	81 8f       	std	Z+25, r24	; 0x19
				N_Clock.Setting.Init=Nixie_Init_OK;
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
    1a50:	84 87       	std	Z+12, r24	; 0x0c
    1a52:	23 c0       	rjmp	.+70     	; 0x1a9a <Setting_Loop+0xa6>
			}
		}//Nixie_Init_Wait
		break;
		
		case Nixie_Init_OK:{
			if (N_Clock.Setting.Write_Settings && EEPROM_Status()==EEPROM_Status_IDLE){
    1a54:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <N_Clock+0xd>
    1a58:	88 23       	and	r24, r24
    1a5a:	f9 f0       	breq	.+62     	; 0x1a9a <Setting_Loop+0xa6>
    1a5c:	19 d9       	rcall	.-3534   	; 0xc90 <EEPROM_Status>
    1a5e:	81 11       	cpse	r24, r1
    1a60:	1c c0       	rjmp	.+56     	; 0x1a9a <Setting_Loop+0xa6>
				N_Clock.Setting.Write_Settings				=0;
    1a62:	ed ea       	ldi	r30, 0xAD	; 173
    1a64:	f1 e0       	ldi	r31, 0x01	; 1
    1a66:	15 86       	std	Z+13, r1	; 0x0d
				N_Clock.Setting.EEPROM.Date_Show			=N_Clock.Setting.Date_Show;
    1a68:	86 85       	ldd	r24, Z+14	; 0x0e
    1a6a:	85 8f       	std	Z+29, r24	; 0x1d
				N_Clock.Setting.EEPROM.Date_Show_SV			=N_Clock.Setting.Date_Show_SV;
    1a6c:	81 89       	ldd	r24, Z+17	; 0x11
    1a6e:	87 8f       	std	Z+31, r24	; 0x1f
				N_Clock.Setting.EEPROM.Date_Timeout_SV		=N_Clock.Setting.Date_Timeout_SV;
    1a70:	87 85       	ldd	r24, Z+15	; 0x0f
    1a72:	86 8f       	std	Z+30, r24	; 0x1e
				N_Clock.Setting.EEPROM.Save_Off_Threshold	=N_Clock.Setting.Save_Off_Threshold;
    1a74:	83 89       	ldd	r24, Z+19	; 0x13
    1a76:	94 89       	ldd	r25, Z+20	; 0x14
    1a78:	91 a3       	std	Z+33, r25	; 0x21
    1a7a:	80 a3       	std	Z+32, r24	; 0x20
				N_Clock.Setting.EEPROM.Save_On_Threshold	=N_Clock.Setting.Save_On_Threshold;
    1a7c:	85 89       	ldd	r24, Z+21	; 0x15
    1a7e:	96 89       	ldd	r25, Z+22	; 0x16
    1a80:	93 a3       	std	Z+35, r25	; 0x23
    1a82:	82 a3       	std	Z+34, r24	; 0x22
				N_Clock.Setting.EEPROM.Save_Timeout			=N_Clock.Setting.Save_Timeout;
    1a84:	81 8d       	ldd	r24, Z+25	; 0x19
    1a86:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a88:	97 a3       	std	Z+39, r25	; 0x27
    1a8a:	86 a3       	std	Z+38, r24	; 0x26
				EEPROM_Write(Nixie_EEPROM_Settings_Adress, N_Clock.Setting.EEPROM_File_Size, (uint8_t *) &N_Clock.Setting.EEPROM);
    1a8c:	63 8d       	ldd	r22, Z+27	; 0x1b
    1a8e:	74 8d       	ldd	r23, Z+28	; 0x1c
    1a90:	4a ec       	ldi	r20, 0xCA	; 202
    1a92:	51 e0       	ldi	r21, 0x01	; 1
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	06 d9       	rcall	.-3572   	; 0xca6 <EEPROM_Write>
			}
		}//Nixie_Init_OK
		break;
	}
    1a9a:	df 91       	pop	r29
    1a9c:	cf 91       	pop	r28
    1a9e:	08 95       	ret

00001aa0 <main>:
Nixie_struct N_Clock;

//Main program
int main(void)
{
	Timer_Init();
    1aa0:	11 d2       	rcall	.+1058   	; 0x1ec4 <Timer_Init>
	I2C_Init();
    1aa2:	f5 da       	rcall	.-2582   	; 0x108e <I2C_Init>
	I2C_Enable();
    1aa4:	fb da       	rcall	.-2570   	; 0x109c <I2C_Enable>
	DS1307_Init();
    1aa6:	fa d7       	rcall	.+4084   	; 0x2a9c <__TEXT_REGION_LENGTH__+0xa9c>
	RTC_Init();
    1aa8:	58 d0       	rcall	.+176    	; 0x1b5a <RTC_Init>
	Analog_Init();
    1aaa:	b6 d3       	rcall	.+1900   	; 0x2218 <__TEXT_REGION_LENGTH__+0x218>
	Setting_Init();
    1aac:	80 df       	rcall	.-256    	; 0x19ae <Setting_Init>
	Nixie_Init();
    1aae:	87 df       	rcall	.-242    	; 0x19be <Nixie_Init>
	sei();
    1ab0:	78 94       	sei
		
    while(1)
    {
		Timer_loop();
    1ab2:	1c d2       	rcall	.+1080   	; 0x1eec <Timer_loop>
 		I2C_Loop();
    1ab4:	0e d9       	rcall	.-3556   	; 0xcd2 <I2C_Loop>
		DS1307_Loop();
    1ab6:	d5 d4       	rcall	.+2474   	; 0x2462 <__TEXT_REGION_LENGTH__+0x462>
		RTC_Loop();
    1ab8:	8c d0       	rcall	.+280    	; 0x1bd2 <RTC_Loop>
		Analog_loop();
    1aba:	be d3       	rcall	.+1916   	; 0x2238 <__TEXT_REGION_LENGTH__+0x238>
		Setting_Loop();
    1abc:	9b df       	rcall	.-202    	; 0x19f4 <Setting_Loop>
		Nixie_Loop();
    1abe:	03 dd       	rcall	.-1530   	; 0x14c6 <Nixie_Loop>
		Power_Loop();
    1ac0:	1b d0       	rcall	.+54     	; 0x1af8 <Power_Loop>
		EEPROM_Loop();
    1ac2:	67 d8       	rcall	.-3890   	; 0xb92 <EEPROM_Loop>
    1ac4:	f6 cf       	rjmp	.-20     	; 0x1ab2 <main+0x12>

00001ac6 <Power_Init>:

//Power functions
void Power_Init(void){
	//The required voltage for the Nixies is created by a boost converter. From the website https://learn.adafruit.com/diy-boost-calc/the-calculator I calculated that
	// when you use a 330uH coil you have to generate a 60KHZ block wave to get 170~190V.
	Power_TCCRA = Power_TCCRA_Setting;//See .h file
    1ac6:	82 e0       	ldi	r24, 0x02	; 2
    1ac8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__EEPROM_REGION_LENGTH__+0x7f00b0>
	#ifdef Power_TCCRB
	Power_TCCRB = Power_TCCRB_Setting;//See .h file
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__EEPROM_REGION_LENGTH__+0x7f00b1>
	#endif
	Power_OCR = 0x78;//8MHZ/66(0x42) = ~121.2121/2 = a block wave of ~60.6060KHZ
    1ad2:	88 e7       	ldi	r24, 0x78	; 120
    1ad4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__EEPROM_REGION_LENGTH__+0x7f00b3>
	Power_DDR |= (1<<Power_Pin);//Make the powerpin output
    1ad8:	23 9a       	sbi	0x04, 3	; 4
	N_Power.Power_Threshold_SV = Power_Threshold;
    1ada:	8b e2       	ldi	r24, 0x2B	; 43
    1adc:	92 e0       	ldi	r25, 0x02	; 2
    1ade:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <N_Power+0x4>
    1ae2:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <N_Power+0x3>
	Analog_Channel_Init(Power_Analog_Channel, Power_Analog_Timeout);
    1ae6:	61 e0       	ldi	r22, 0x01	; 1
    1ae8:	70 e0       	ldi	r23, 0x00	; 0
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	44 d4       	rcall	.+2184   	; 0x2376 <__TEXT_REGION_LENGTH__+0x376>
	Analog_Channel_Init(Power_Analog_Save_Channel, Power_Analog_Save_Timeout);
    1aee:	68 e5       	ldi	r22, 0x58	; 88
    1af0:	72 e0       	ldi	r23, 0x02	; 2
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	40 c4       	rjmp	.+2176   	; 0x2376 <__TEXT_REGION_LENGTH__+0x376>
    1af6:	08 95       	ret

00001af8 <Power_Loop>:
}//Power_Init

void Power_Loop(void){
	if (Analog_Channel_Ready(Power_Analog_Channel)){
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	70 d4       	rcall	.+2272   	; 0x23dc <__TEXT_REGION_LENGTH__+0x3dc>
    1afc:	88 23       	and	r24, r24
    1afe:	31 f0       	breq	.+12     	; 0x1b0c <Power_Loop+0x14>
		N_Power.Analog_In=Analog_Channel_Read(Power_Analog_Channel);
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	47 d4       	rcall	.+2190   	; 0x2392 <__TEXT_REGION_LENGTH__+0x392>
    1b04:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <N_Power+0x2>
    1b08:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <N_Power+0x1>
	}
	switch(N_Power.mode){	
    1b0c:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <N_Power>
    1b10:	88 23       	and	r24, r24
    1b12:	19 f0       	breq	.+6      	; 0x1b1a <Power_Loop+0x22>
    1b14:	81 30       	cpi	r24, 0x01	; 1
    1b16:	41 f0       	breq	.+16     	; 0x1b28 <Power_Loop+0x30>
    1b18:	08 95       	ret
		case Power_Mode_OFF:{
			Power_TCCRA &= ~((1<<Power_COMx1)|(1<<Power_COMx0));//Disconnect the output pin
    1b1a:	e0 eb       	ldi	r30, 0xB0	; 176
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	8f 73       	andi	r24, 0x3F	; 63
    1b22:	80 83       	st	Z, r24
			Power_Port &= ~(1<<Power_Pin);//Make sure it is really low
    1b24:	2b 98       	cbi	0x05, 3	; 5
		}//Mode_Power_OFF
		break;
    1b26:	08 95       	ret
		case Power_Mode_ON:{//This has to be tested. Will shutting the frequency on and off work or do I need to change the OCR2 value?
			if (N_Power.Analog_In>N_Power.Power_Threshold_SV)//if the voltage is to high
    1b28:	e5 ef       	ldi	r30, 0xF5	; 245
    1b2a:	f1 e0       	ldi	r31, 0x01	; 1
    1b2c:	21 81       	ldd	r18, Z+1	; 0x01
    1b2e:	32 81       	ldd	r19, Z+2	; 0x02
    1b30:	83 81       	ldd	r24, Z+3	; 0x03
    1b32:	94 81       	ldd	r25, Z+4	; 0x04
    1b34:	82 17       	cp	r24, r18
    1b36:	93 07       	cpc	r25, r19
    1b38:	38 f4       	brcc	.+14     	; 0x1b48 <Power_Loop+0x50>
			{
				Power_TCCRA &= ~((1<<Power_COMx1)|(1<<Power_COMx0));//Disconnect the output pin
    1b3a:	e0 eb       	ldi	r30, 0xB0	; 176
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	8f 73       	andi	r24, 0x3F	; 63
    1b42:	80 83       	st	Z, r24
				Power_Port &= ~(1<<Power_Pin);//Make sure it is really low
    1b44:	2b 98       	cbi	0x05, 3	; 5
    1b46:	08 95       	ret
			}
			else{
				Power_TCCRA |= (1<<Power_COMx0);//Else toggle PB3(OC2)
    1b48:	e0 eb       	ldi	r30, 0xB0	; 176
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	80 64       	ori	r24, 0x40	; 64
    1b50:	80 83       	st	Z, r24
    1b52:	08 95       	ret

00001b54 <Power_Mode>:
		break;
	}//N_Power.mode
}//Power_Loop

void Power_Mode(uint8_t _Command){
	N_Power.mode=_Command;
    1b54:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <N_Power>
    1b58:	08 95       	ret

00001b5a <RTC_Init>:
void RTC_Set_IS_PM_Function(Set_Ext_IS_PM_Function _Function_Ptr){
	RTC.Set_Ext_IS_PM_Function_Ptr=_Function_Ptr;
}

void RTC_Get_IS_PM_Function(Get_Ext_IS_PM_Function _Function_Ptr){
	RTC.Get_Ext_IS_PM_Function_Ptr=_Function_Ptr;
    1b5a:	e7 ed       	ldi	r30, 0xD7	; 215
    1b5c:	f1 e0       	ldi	r31, 0x01	; 1
    1b5e:	83 e6       	ldi	r24, 0x63	; 99
    1b60:	95 e0       	ldi	r25, 0x05	; 5
    1b62:	95 87       	std	Z+13, r25	; 0x0d
    1b64:	84 87       	std	Z+12, r24	; 0x0c
    1b66:	87 e8       	ldi	r24, 0x87	; 135
    1b68:	95 e0       	ldi	r25, 0x05	; 5
    1b6a:	97 87       	std	Z+15, r25	; 0x0f
    1b6c:	86 87       	std	Z+14, r24	; 0x0e
    1b6e:	85 e7       	ldi	r24, 0x75	; 117
    1b70:	95 e0       	ldi	r25, 0x05	; 5
    1b72:	91 8b       	std	Z+17, r25	; 0x11
    1b74:	80 8b       	std	Z+16, r24	; 0x10
    1b76:	8d e9       	ldi	r24, 0x9D	; 157
    1b78:	95 e0       	ldi	r25, 0x05	; 5
    1b7a:	93 8b       	std	Z+19, r25	; 0x13
    1b7c:	82 8b       	std	Z+18, r24	; 0x12
    1b7e:	81 e8       	ldi	r24, 0x81	; 129
    1b80:	95 e0       	ldi	r25, 0x05	; 5
    1b82:	95 8b       	std	Z+21, r25	; 0x15
    1b84:	84 8b       	std	Z+20, r24	; 0x14
    1b86:	83 ec       	ldi	r24, 0xC3	; 195
    1b88:	95 e0       	ldi	r25, 0x05	; 5
    1b8a:	97 8b       	std	Z+23, r25	; 0x17
    1b8c:	86 8b       	std	Z+22, r24	; 0x16
    1b8e:	84 e8       	ldi	r24, 0x84	; 132
    1b90:	95 e0       	ldi	r25, 0x05	; 5
    1b92:	91 8f       	std	Z+25, r25	; 0x19
    1b94:	80 8f       	std	Z+24, r24	; 0x18
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	87 83       	std	Z+7, r24	; 0x07
    1b9a:	08 95       	ret

00001b9c <RTC_not_leap>:
}


char RTC_not_leap(void){      //check for leap year
	int year = RTC.Date.Year + 2000;
    1b9c:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <RTC+0x5>
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	20 53       	subi	r18, 0x30	; 48
    1ba4:	38 4f       	sbci	r19, 0xF8	; 248
	if (!(year%100))
    1ba6:	c9 01       	movw	r24, r18
    1ba8:	64 e6       	ldi	r22, 0x64	; 100
    1baa:	70 e0       	ldi	r23, 0x00	; 0
    1bac:	ed d1       	rcall	.+986    	; 0x1f88 <__divmodhi4>
    1bae:	89 2b       	or	r24, r25
    1bb0:	21 f4       	brne	.+8      	; 0x1bba <RTC_not_leap+0x1e>
	return (char)(year%400);
    1bb2:	c9 01       	movw	r24, r18
    1bb4:	60 e9       	ldi	r22, 0x90	; 144
    1bb6:	71 e0       	ldi	r23, 0x01	; 1
    1bb8:	e7 c1       	rjmp	.+974    	; 0x1f88 <__divmodhi4>
	else
	return (char)(year%4);
    1bba:	23 70       	andi	r18, 0x03	; 3
    1bbc:	30 78       	andi	r19, 0x80	; 128
    1bbe:	33 23       	and	r19, r19
    1bc0:	34 f4       	brge	.+12     	; 0x1bce <RTC_not_leap+0x32>
    1bc2:	21 50       	subi	r18, 0x01	; 1
    1bc4:	31 09       	sbc	r19, r1
    1bc6:	2c 6f       	ori	r18, 0xFC	; 252
    1bc8:	3f 6f       	ori	r19, 0xFF	; 255
    1bca:	2f 5f       	subi	r18, 0xFF	; 255
    1bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bce:	82 2f       	mov	r24, r18
}
    1bd0:	08 95       	ret

00001bd2 <RTC_Loop>:
#include <stdlib.h>
#include "Timers/timers.h"
#include "RTClib/RTC.h"


void RTC_Loop(void){
    1bd2:	1f 93       	push	r17
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
	uint8_t _Pulse_1S = Timer_Pulse_1s();
    1bd8:	c3 d1       	rcall	.+902    	; 0x1f60 <Timer_Pulse_1s>
    1bda:	c8 2f       	mov	r28, r24
	//uint8_t _Pulse_1S = Timers.Pulse_1s;
	
	switch(RTC.Status){
    1bdc:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <RTC+0x7>
    1be0:	81 30       	cpi	r24, 0x01	; 1
    1be2:	41 f0       	breq	.+16     	; 0x1bf4 <RTC_Loop+0x22>
    1be4:	08 f4       	brcc	.+2      	; 0x1be8 <RTC_Loop+0x16>
    1be6:	f0 c0       	rjmp	.+480    	; 0x1dc8 <RTC_Loop+0x1f6>
    1be8:	82 30       	cpi	r24, 0x02	; 2
    1bea:	81 f0       	breq	.+32     	; 0x1c0c <RTC_Loop+0x3a>
    1bec:	83 30       	cpi	r24, 0x03	; 3
    1bee:	09 f4       	brne	.+2      	; 0x1bf2 <RTC_Loop+0x20>
    1bf0:	be c0       	rjmp	.+380    	; 0x1d6e <RTC_Loop+0x19c>
    1bf2:	e8 c0       	rjmp	.+464    	; 0x1dc4 <RTC_Loop+0x1f2>
			//no init yet, do nothing
		}
		break;
		
		case Status_RTC_Init:{
			RTC.Init=RTC_Init_OK;
    1bf4:	e7 ed       	ldi	r30, 0xD7	; 215
    1bf6:	f1 e0       	ldi	r31, 0x01	; 1
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	86 83       	std	Z+6, r24	; 0x06
			RTC.WorkInterval=1;
			RTC.Sync=0;
    1bfc:	13 86       	std	Z+11, r1	; 0x0b
			RTC.Get_Sync=RTC_GetSync;
    1bfe:	82 e0       	ldi	r24, 0x02	; 2
    1c00:	82 87       	std	Z+10, r24	; 0x0a
			RTC.Status=Status_RTC_Sync;
    1c02:	83 e0       	ldi	r24, 0x03	; 3
    1c04:	87 83       	std	Z+7, r24	; 0x07
		default:{//something went wrong
			RTC.Status=Status_RTC_Idle;
		}//Default
		break;
	}//switch(RTC.Status)
	RTC.WorkInterval -= RTC.WorkInterval && _Pulse_1S;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	e4 c0       	rjmp	.+456    	; 0x1dd4 <RTC_Loop+0x202>
		}//RTC_Init
		break;
		
		case Status_RTC_Run:{
			//1st see if we need to sync with an external time keeper
			if (RTC.Get_Sync==RTC_SetSync){
    1c0c:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <RTC+0xa>
    1c10:	81 30       	cpi	r24, 0x01	; 1
    1c12:	21 f4       	brne	.+8      	; 0x1c1c <RTC_Loop+0x4a>
				RTC.Status=Status_RTC_Sync;
    1c14:	83 e0       	ldi	r24, 0x03	; 3
    1c16:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <RTC+0x7>
				break;
    1c1a:	d6 c0       	rjmp	.+428    	; 0x1dc8 <RTC_Loop+0x1f6>
			}
			else if (RTC.WorkInterval==0){
    1c1c:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <RTC+0x1c>
    1c20:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <RTC+0x1d>
    1c24:	89 2b       	or	r24, r25
    1c26:	c9 f4       	brne	.+50     	; 0x1c5a <RTC_Loop+0x88>
				if (RTC.Interval>0){
    1c28:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <RTC+0x1a>
    1c2c:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <RTC+0x1b>
    1c30:	18 16       	cp	r1, r24
    1c32:	19 06       	cpc	r1, r25
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <RTC_Loop+0x6e>
					RTC.WorkInterval=RTC.Interval;
    1c36:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <RTC+0x1d>
    1c3a:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <RTC+0x1c>
    1c3e:	06 c0       	rjmp	.+12     	; 0x1c4c <RTC_Loop+0x7a>
				}
				else if (timeout){
					RTC.WorkInterval=timeout;
    1c40:	8a e0       	ldi	r24, 0x0A	; 10
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <RTC+0x1d>
    1c48:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <RTC+0x1c>
				}
				RTC.Get_Sync=RTC_GetSync;
    1c4c:	e7 ed       	ldi	r30, 0xD7	; 215
    1c4e:	f1 e0       	ldi	r31, 0x01	; 1
    1c50:	82 e0       	ldi	r24, 0x02	; 2
    1c52:	82 87       	std	Z+10, r24	; 0x0a
				RTC.Status=Status_RTC_Sync;
    1c54:	83 e0       	ldi	r24, 0x03	; 3
    1c56:	87 83       	std	Z+7, r24	; 0x07
				break;
    1c58:	b7 c0       	rjmp	.+366    	; 0x1dc8 <RTC_Loop+0x1f6>
			}
			else if (RTC.Ext_Sync_Ready_Ptr() && !RTC.Sync){
    1c5a:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <RTC+0xc>
    1c5e:	f0 91 e4 01 	lds	r31, 0x01E4	; 0x8001e4 <RTC+0xd>
    1c62:	09 95       	icall
    1c64:	88 23       	and	r24, r24
    1c66:	01 f1       	breq	.+64     	; 0x1ca8 <RTC_Loop+0xd6>
    1c68:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <RTC+0xb>
    1c6c:	81 11       	cpse	r24, r1
    1c6e:	1c c0       	rjmp	.+56     	; 0x1ca8 <RTC_Loop+0xd6>
				RTC.Sync=1;
    1c70:	e7 ed       	ldi	r30, 0xD7	; 215
    1c72:	f1 e0       	ldi	r31, 0x01	; 1
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	83 87       	std	Z+11, r24	; 0x0b
				RTC.IS_TWLF=RTC.Get_Ext_IS_TWLF_Function_Ptr()>0;
    1c78:	04 88       	ldd	r0, Z+20	; 0x14
    1c7a:	f5 89       	ldd	r31, Z+21	; 0x15
    1c7c:	e0 2d       	mov	r30, r0
    1c7e:	09 95       	icall
    1c80:	91 e0       	ldi	r25, 0x01	; 1
    1c82:	81 11       	cpse	r24, r1
    1c84:	01 c0       	rjmp	.+2      	; 0x1c88 <RTC_Loop+0xb6>
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <RTC+0x8>
				if (RTC.IS_TWLF){
    1c8c:	88 23       	and	r24, r24
    1c8e:	61 f0       	breq	.+24     	; 0x1ca8 <RTC_Loop+0xd6>
					RTC.IS_PM=RTC.Get_Ext_IS_PM_Function_Ptr()>0;
    1c90:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <RTC+0x18>
    1c94:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <RTC+0x19>
    1c98:	fc 01       	movw	r30, r24
    1c9a:	09 95       	icall
    1c9c:	91 e0       	ldi	r25, 0x01	; 1
    1c9e:	81 11       	cpse	r24, r1
    1ca0:	01 c0       	rjmp	.+2      	; 0x1ca4 <RTC_Loop+0xd2>
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <RTC+0x9>
				}
				
			}

			RTC.Time.Second += _Pulse_1S;
    1ca8:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <RTC>
    1cac:	8c 0f       	add	r24, r28
			//RTC.Time.Second += _Pulse_1S;
			//Update the time
			//if( _Pulse_1S>0 && RTC.Init>0){
				//RTC.Time.Second++;
				if (RTC.Time.Second>59){
    1cae:	8c 33       	cpi	r24, 0x3C	; 60
    1cb0:	18 f4       	brcc	.+6      	; 0x1cb8 <RTC_Loop+0xe6>
					RTC.IS_PM=RTC.Get_Ext_IS_PM_Function_Ptr()>0;
				}
				
			}

			RTC.Time.Second += _Pulse_1S;
    1cb2:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <RTC>
    1cb6:	88 c0       	rjmp	.+272    	; 0x1dc8 <RTC_Loop+0x1f6>
			//RTC.Time.Second += _Pulse_1S;
			//Update the time
			//if( _Pulse_1S>0 && RTC.Init>0){
				//RTC.Time.Second++;
				if (RTC.Time.Second>59){
					RTC.Time.Second=0;
    1cb8:	e7 ed       	ldi	r30, 0xD7	; 215
    1cba:	f1 e0       	ldi	r31, 0x01	; 1
    1cbc:	10 82       	st	Z, r1
					if (++RTC.Time.Minute>59){
    1cbe:	81 81       	ldd	r24, Z+1	; 0x01
    1cc0:	8f 5f       	subi	r24, 0xFF	; 255
    1cc2:	81 83       	std	Z+1, r24	; 0x01
    1cc4:	8c 33       	cpi	r24, 0x3C	; 60
    1cc6:	08 f4       	brcc	.+2      	; 0x1cca <RTC_Loop+0xf8>
    1cc8:	7f c0       	rjmp	.+254    	; 0x1dc8 <RTC_Loop+0x1f6>
						RTC.Time.Hour++;
    1cca:	82 81       	ldd	r24, Z+2	; 0x02
    1ccc:	8f 5f       	subi	r24, 0xFF	; 255
    1cce:	82 83       	std	Z+2, r24	; 0x02
						uint8_t _Next_Day=0;
						if (RTC.IS_TWLF){
    1cd0:	90 85       	ldd	r25, Z+8	; 0x08
    1cd2:	99 23       	and	r25, r25
    1cd4:	99 f0       	breq	.+38     	; 0x1cfc <RTC_Loop+0x12a>
							if (RTC.IS_PM && RTC.Time.Hour>11){
    1cd6:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <RTC+0x9>
    1cda:	99 23       	and	r25, r25
    1cdc:	29 f0       	breq	.+10     	; 0x1ce8 <RTC_Loop+0x116>
    1cde:	8c 30       	cpi	r24, 0x0C	; 12
    1ce0:	18 f0       	brcs	.+6      	; 0x1ce8 <RTC_Loop+0x116>
								RTC.Time.Hour=0;
    1ce2:	12 82       	std	Z+2, r1	; 0x02
								RTC.IS_PM=0;
    1ce4:	11 86       	std	Z+9, r1	; 0x09
								_Next_Day++;
    1ce6:	84 c0       	rjmp	.+264    	; 0x1df0 <RTC_Loop+0x21e>
							}
							else if (RTC.Time.Hour>12){
    1ce8:	8d 30       	cpi	r24, 0x0D	; 13
    1cea:	08 f4       	brcc	.+2      	; 0x1cee <RTC_Loop+0x11c>
    1cec:	6d c0       	rjmp	.+218    	; 0x1dc8 <RTC_Loop+0x1f6>
								RTC.Time.Hour=1;
    1cee:	e7 ed       	ldi	r30, 0xD7	; 215
    1cf0:	f1 e0       	ldi	r31, 0x01	; 1
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	82 83       	std	Z+2, r24	; 0x02
								RTC.IS_PM++;
    1cf6:	9f 5f       	subi	r25, 0xFF	; 255
    1cf8:	91 87       	std	Z+9, r25	; 0x09
    1cfa:	66 c0       	rjmp	.+204    	; 0x1dc8 <RTC_Loop+0x1f6>
							}
						}
						else if (RTC.Time.Hour>23){
    1cfc:	88 31       	cpi	r24, 0x18	; 24
    1cfe:	08 f4       	brcc	.+2      	; 0x1d02 <RTC_Loop+0x130>
    1d00:	63 c0       	rjmp	.+198    	; 0x1dc8 <RTC_Loop+0x1f6>
							RTC.Time.Hour=0;
    1d02:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <RTC+0x2>
    1d06:	74 c0       	rjmp	.+232    	; 0x1df0 <RTC_Loop+0x21e>
						}
						if (_Next_Day){
							uint8_t _Next_Month=0;
							RTC.Date.Day++;
							if (RTC.Date.Month==2){
								if (RTC.Date.Day>=28 && RTC_not_leap()){
    1d08:	dc 31       	cpi	r29, 0x1C	; 28
    1d0a:	38 f0       	brcs	.+14     	; 0x1d1a <RTC_Loop+0x148>
    1d0c:	47 df       	rcall	.-370    	; 0x1b9c <RTC_not_leap>
    1d0e:	88 23       	and	r24, r24
    1d10:	21 f0       	breq	.+8      	; 0x1d1a <RTC_Loop+0x148>
									RTC.Date.Day=1;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <RTC+0x3>
									_Next_Month++;
    1d18:	7c c0       	rjmp	.+248    	; 0x1e12 <RTC_Loop+0x240>
								}
								else if (RTC.Date.Day>=29){
    1d1a:	dd 31       	cpi	r29, 0x1D	; 29
    1d1c:	08 f4       	brcc	.+2      	; 0x1d20 <RTC_Loop+0x14e>
    1d1e:	54 c0       	rjmp	.+168    	; 0x1dc8 <RTC_Loop+0x1f6>
									RTC.Date.Day=1;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <RTC+0x3>
    1d26:	75 c0       	rjmp	.+234    	; 0x1e12 <RTC_Loop+0x240>
									_Next_Month++;
								}
							}
							else if (RTC.Date.Day>=30 && (RTC.Date.Month==4 || RTC.Date.Month==7 || RTC.Date.Month==9 || RTC.Date.Month==11)){
    1d28:	de 31       	cpi	r29, 0x1E	; 30
    1d2a:	60 f0       	brcs	.+24     	; 0x1d44 <RTC_Loop+0x172>
    1d2c:	14 30       	cpi	r17, 0x04	; 4
    1d2e:	31 f0       	breq	.+12     	; 0x1d3c <RTC_Loop+0x16a>
    1d30:	17 30       	cpi	r17, 0x07	; 7
    1d32:	21 f0       	breq	.+8      	; 0x1d3c <RTC_Loop+0x16a>
    1d34:	81 2f       	mov	r24, r17
    1d36:	8d 7f       	andi	r24, 0xFD	; 253
    1d38:	89 30       	cpi	r24, 0x09	; 9
    1d3a:	21 f4       	brne	.+8      	; 0x1d44 <RTC_Loop+0x172>
									RTC.Date.Day=1;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <RTC+0x3>
									_Next_Month++;
    1d42:	60 c0       	rjmp	.+192    	; 0x1e04 <RTC_Loop+0x232>
							}
							else if (RTC.Date.Day>=31){
    1d44:	df 31       	cpi	r29, 0x1F	; 31
    1d46:	08 f4       	brcc	.+2      	; 0x1d4a <RTC_Loop+0x178>
    1d48:	3f c0       	rjmp	.+126    	; 0x1dc8 <RTC_Loop+0x1f6>
									RTC.Date.Day=1;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <RTC+0x3>
    1d50:	59 c0       	rjmp	.+178    	; 0x1e04 <RTC_Loop+0x232>
									_Next_Month++;
							}
							if (_Next_Month){
								if (++RTC.Date.Month>12){
									RTC.Date.Month=1;
    1d52:	e7 ed       	ldi	r30, 0xD7	; 215
    1d54:	f1 e0       	ldi	r31, 0x01	; 1
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	84 83       	std	Z+4, r24	; 0x04
									if (++RTC.Date.Year>99){
    1d5a:	85 81       	ldd	r24, Z+5	; 0x05
    1d5c:	8f 5f       	subi	r24, 0xFF	; 255
    1d5e:	84 36       	cpi	r24, 0x64	; 100
    1d60:	18 f4       	brcc	.+6      	; 0x1d68 <RTC_Loop+0x196>
    1d62:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <RTC+0x5>
    1d66:	30 c0       	rjmp	.+96     	; 0x1dc8 <RTC_Loop+0x1f6>
										RTC.Date.Year=0;
    1d68:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <RTC+0x5>
    1d6c:	2d c0       	rjmp	.+90     	; 0x1dc8 <RTC_Loop+0x1f6>
			//}//if(Timers.Pulse_1s && RTC.Init)
		}//RTC_Run
		break;
		
		case Status_RTC_Sync:{//we need to sync with whatever we need to sync with.
			if(RTC.Ext_Sync_Ready_Ptr>0 && RTC.Ext_Sync_Ready_Ptr()){
    1d6e:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <RTC+0xc>
    1d72:	f0 91 e4 01 	lds	r31, 0x01E4	; 0x8001e4 <RTC+0xd>
    1d76:	30 97       	sbiw	r30, 0x00	; 0
    1d78:	f1 f0       	breq	.+60     	; 0x1db6 <RTC_Loop+0x1e4>
    1d7a:	09 95       	icall
    1d7c:	88 23       	and	r24, r24
    1d7e:	d9 f0       	breq	.+54     	; 0x1db6 <RTC_Loop+0x1e4>
				if (RTC.Set_Ext_Time_Function_Ptr>0 && RTC.Get_Sync==RTC_SetSync){
    1d80:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <RTC+0xe>
    1d84:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <RTC+0xf>
    1d88:	30 97       	sbiw	r30, 0x00	; 0
    1d8a:	41 f0       	breq	.+16     	; 0x1d9c <RTC_Loop+0x1ca>
    1d8c:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <RTC+0xa>
    1d90:	81 30       	cpi	r24, 0x01	; 1
    1d92:	21 f4       	brne	.+8      	; 0x1d9c <RTC_Loop+0x1ca>
					RTC.Set_Ext_Time_Function_Ptr((uint8_t *) &RTC.Time.Second);
    1d94:	87 ed       	ldi	r24, 0xD7	; 215
    1d96:	91 e0       	ldi	r25, 0x01	; 1
    1d98:	09 95       	icall
    1d9a:	0d c0       	rjmp	.+26     	; 0x1db6 <RTC_Loop+0x1e4>
				}
				else if (RTC.Get_Ext_Time_Function_Ptr>0 && RTC.Get_Sync==RTC_GetSync){
    1d9c:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <RTC+0x10>
    1da0:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <RTC+0x11>
    1da4:	30 97       	sbiw	r30, 0x00	; 0
    1da6:	39 f0       	breq	.+14     	; 0x1db6 <RTC_Loop+0x1e4>
    1da8:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <RTC+0xa>
    1dac:	82 30       	cpi	r24, 0x02	; 2
    1dae:	19 f4       	brne	.+6      	; 0x1db6 <RTC_Loop+0x1e4>
					RTC.Get_Ext_Time_Function_Ptr((uint8_t *) &RTC.Time.Second);
    1db0:	87 ed       	ldi	r24, 0xD7	; 215
    1db2:	91 e0       	ldi	r25, 0x01	; 1
    1db4:	09 95       	icall
				}
			}
			//Even if the external sync fails, keep running the RTC
			RTC.Get_Sync=RTC_SyncIdle;
    1db6:	e7 ed       	ldi	r30, 0xD7	; 215
    1db8:	f1 e0       	ldi	r31, 0x01	; 1
    1dba:	12 86       	std	Z+10, r1	; 0x0a
			RTC.Sync=0;
    1dbc:	13 86       	std	Z+11, r1	; 0x0b
			RTC.Status=Status_RTC_Run;
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	87 83       	std	Z+7, r24	; 0x07
		}//RTC_Sync
		break;
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <RTC_Loop+0x1f6>
		
		default:{//something went wrong
			RTC.Status=Status_RTC_Idle;
    1dc4:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <RTC+0x7>
		}//Default
		break;
	}//switch(RTC.Status)
	RTC.WorkInterval -= RTC.WorkInterval && _Pulse_1S;
    1dc8:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <RTC+0x1c>
    1dcc:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <RTC+0x1d>
    1dd0:	00 97       	sbiw	r24, 0x00	; 0
    1dd2:	11 f0       	breq	.+4      	; 0x1dd8 <RTC_Loop+0x206>
    1dd4:	c1 11       	cpse	r28, r1
    1dd6:	03 c0       	rjmp	.+6      	; 0x1dde <RTC_Loop+0x20c>
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <RTC_Loop+0x210>
    1dde:	21 e0       	ldi	r18, 0x01	; 1
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	82 1b       	sub	r24, r18
    1de4:	93 0b       	sbc	r25, r19
    1de6:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <RTC+0x1d>
    1dea:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <RTC+0x1c>
}//RTC_Loop()
    1dee:	13 c0       	rjmp	.+38     	; 0x1e16 <RTC_Loop+0x244>
							RTC.Time.Hour=0;
							_Next_Day++;
						}
						if (_Next_Day){
							uint8_t _Next_Month=0;
							RTC.Date.Day++;
    1df0:	e7 ed       	ldi	r30, 0xD7	; 215
    1df2:	f1 e0       	ldi	r31, 0x01	; 1
    1df4:	d3 81       	ldd	r29, Z+3	; 0x03
    1df6:	df 5f       	subi	r29, 0xFF	; 255
    1df8:	d3 83       	std	Z+3, r29	; 0x03
							if (RTC.Date.Month==2){
    1dfa:	14 81       	ldd	r17, Z+4	; 0x04
    1dfc:	12 30       	cpi	r17, 0x02	; 2
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <RTC_Loop+0x230>
    1e00:	93 cf       	rjmp	.-218    	; 0x1d28 <RTC_Loop+0x156>
    1e02:	82 cf       	rjmp	.-252    	; 0x1d08 <RTC_Loop+0x136>
							else if (RTC.Date.Day>=31){
									RTC.Date.Day=1;
									_Next_Month++;
							}
							if (_Next_Month){
								if (++RTC.Date.Month>12){
    1e04:	1f 5f       	subi	r17, 0xFF	; 255
    1e06:	1d 30       	cpi	r17, 0x0D	; 13
    1e08:	08 f0       	brcs	.+2      	; 0x1e0c <RTC_Loop+0x23a>
    1e0a:	a3 cf       	rjmp	.-186    	; 0x1d52 <RTC_Loop+0x180>
    1e0c:	10 93 db 01 	sts	0x01DB, r17	; 0x8001db <RTC+0x4>
    1e10:	db cf       	rjmp	.-74     	; 0x1dc8 <RTC_Loop+0x1f6>
    1e12:	1f 5f       	subi	r17, 0xFF	; 255
    1e14:	fb cf       	rjmp	.-10     	; 0x1e0c <RTC_Loop+0x23a>
			RTC.Status=Status_RTC_Idle;
		}//Default
		break;
	}//switch(RTC.Status)
	RTC.WorkInterval -= RTC.WorkInterval && _Pulse_1S;
}//RTC_Loop()
    1e16:	df 91       	pop	r29
    1e18:	cf 91       	pop	r28
    1e1a:	1f 91       	pop	r17
    1e1c:	08 95       	ret

00001e1e <RTC_Set_DateTime>:

void RTC_Set_DateTime(uint8_t _Second, uint8_t _Minute, uint8_t _Hour, uint8_t _Day, uint8_t _Month, uint8_t _Year){
    1e1e:	ef 92       	push	r14
    1e20:	0f 93       	push	r16
    1e22:	cf 93       	push	r28
	//Time values
	//Set the given seconds
	if(_Second<60){//Check if the value is not out of bound.
    1e24:	8c 33       	cpi	r24, 0x3C	; 60
    1e26:	10 f4       	brcc	.+4      	; 0x1e2c <RTC_Set_DateTime+0xe>
		RTC.Time.Second=_Second;
    1e28:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <RTC>
	}
	//Set the given minutes
	if (_Minute<60){//Check if the value is not out of bound.
    1e2c:	6c 33       	cpi	r22, 0x3C	; 60
    1e2e:	10 f4       	brcc	.+4      	; 0x1e34 <RTC_Set_DateTime+0x16>
		RTC.Time.Minute=_Minute;
    1e30:	60 93 d8 01 	sts	0x01D8, r22	; 0x8001d8 <RTC+0x1>
	}
	//Set the given hour
	if (!RTC.IS_TWLF && _Hour<24){//Check if the value is not out of bound.
    1e34:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <RTC+0x8>
    1e38:	81 11       	cpse	r24, r1
    1e3a:	05 c0       	rjmp	.+10     	; 0x1e46 <RTC_Set_DateTime+0x28>
    1e3c:	48 31       	cpi	r20, 0x18	; 24
    1e3e:	18 f4       	brcc	.+6      	; 0x1e46 <RTC_Set_DateTime+0x28>
		RTC.Time.Hour=_Hour;
    1e40:	40 93 d9 01 	sts	0x01D9, r20	; 0x8001d9 <RTC+0x2>
    1e44:	0d c0       	rjmp	.+26     	; 0x1e60 <RTC_Set_DateTime+0x42>
	}
	else if (RTC.IS_PM && _Hour<12){
    1e46:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <RTC+0x9>
    1e4a:	88 23       	and	r24, r24
    1e4c:	29 f0       	breq	.+10     	; 0x1e58 <RTC_Set_DateTime+0x3a>
    1e4e:	4c 30       	cpi	r20, 0x0C	; 12
    1e50:	38 f4       	brcc	.+14     	; 0x1e60 <RTC_Set_DateTime+0x42>
		RTC.Time.Hour=_Hour;
    1e52:	40 93 d9 01 	sts	0x01D9, r20	; 0x8001d9 <RTC+0x2>
    1e56:	04 c0       	rjmp	.+8      	; 0x1e60 <RTC_Set_DateTime+0x42>
	}
	else if(!RTC.IS_PM && _Hour<13){
    1e58:	4d 30       	cpi	r20, 0x0D	; 13
    1e5a:	10 f4       	brcc	.+4      	; 0x1e60 <RTC_Set_DateTime+0x42>
		RTC.Time.Hour=_Hour;
    1e5c:	40 93 d9 01 	sts	0x01D9, r20	; 0x8001d9 <RTC+0x2>
	}
	
	//Date values
	//Set the given year
	if (_Year<100){
    1e60:	83 e6       	ldi	r24, 0x63	; 99
    1e62:	8e 15       	cp	r24, r14
    1e64:	10 f0       	brcs	.+4      	; 0x1e6a <RTC_Set_DateTime+0x4c>
		RTC.Date.Year=_Year;
    1e66:	e0 92 dc 01 	sts	0x01DC, r14	; 0x8001dc <RTC+0x5>
	}
	//Set the given month
	if (_Month<13){
    1e6a:	0d 30       	cpi	r16, 0x0D	; 13
    1e6c:	10 f4       	brcc	.+4      	; 0x1e72 <RTC_Set_DateTime+0x54>
		RTC.Date.Month=_Month;
    1e6e:	00 93 db 01 	sts	0x01DB, r16	; 0x8001db <RTC+0x4>
	}
	//set the given day
	if (RTC.Date.Month==2){
    1e72:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <RTC+0x4>
    1e76:	82 30       	cpi	r24, 0x02	; 2
    1e78:	71 f4       	brne	.+28     	; 0x1e96 <RTC_Set_DateTime+0x78>
    1e7a:	c2 2f       	mov	r28, r18
		if (RTC_not_leap() && _Day<29){
    1e7c:	8f de       	rcall	.-738    	; 0x1b9c <RTC_not_leap>
    1e7e:	88 23       	and	r24, r24
    1e80:	29 f0       	breq	.+10     	; 0x1e8c <RTC_Set_DateTime+0x6e>
    1e82:	cd 31       	cpi	r28, 0x1D	; 29
    1e84:	18 f4       	brcc	.+6      	; 0x1e8c <RTC_Set_DateTime+0x6e>
			RTC.Date.Day=_Day;
    1e86:	c0 93 da 01 	sts	0x01DA, r28	; 0x8001da <RTC+0x3>
    1e8a:	15 c0       	rjmp	.+42     	; 0x1eb6 <RTC_Set_DateTime+0x98>
		}
		else if (_Day<30){
    1e8c:	ce 31       	cpi	r28, 0x1E	; 30
    1e8e:	98 f4       	brcc	.+38     	; 0x1eb6 <RTC_Set_DateTime+0x98>
			RTC.Date.Day=_Day;
    1e90:	c0 93 da 01 	sts	0x01DA, r28	; 0x8001da <RTC+0x3>
    1e94:	10 c0       	rjmp	.+32     	; 0x1eb6 <RTC_Set_DateTime+0x98>
		}
	}
	else if (_Day<31 && (RTC.Date.Month==4 || RTC.Date.Month==7 || RTC.Date.Month==9 || RTC.Date.Month==11)){
    1e96:	2f 31       	cpi	r18, 0x1F	; 31
    1e98:	50 f4       	brcc	.+20     	; 0x1eae <RTC_Set_DateTime+0x90>
    1e9a:	84 30       	cpi	r24, 0x04	; 4
    1e9c:	29 f0       	breq	.+10     	; 0x1ea8 <RTC_Set_DateTime+0x8a>
    1e9e:	87 30       	cpi	r24, 0x07	; 7
    1ea0:	19 f0       	breq	.+6      	; 0x1ea8 <RTC_Set_DateTime+0x8a>
    1ea2:	8d 7f       	andi	r24, 0xFD	; 253
    1ea4:	89 30       	cpi	r24, 0x09	; 9
    1ea6:	19 f4       	brne	.+6      	; 0x1eae <RTC_Set_DateTime+0x90>
		RTC.Date.Day=_Day;
    1ea8:	20 93 da 01 	sts	0x01DA, r18	; 0x8001da <RTC+0x3>
    1eac:	04 c0       	rjmp	.+8      	; 0x1eb6 <RTC_Set_DateTime+0x98>
	}
	else if (_Day<32){
    1eae:	20 32       	cpi	r18, 0x20	; 32
    1eb0:	10 f4       	brcc	.+4      	; 0x1eb6 <RTC_Set_DateTime+0x98>
		RTC.Date.Day=_Day;
    1eb2:	20 93 da 01 	sts	0x01DA, r18	; 0x8001da <RTC+0x3>
	}
	//RTC has been updated, sync it with an external device if needed
	RTC.Get_Sync=RTC_SetSync;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <RTC+0xa>
	//RTC.Status=Status_RTC_Sync;
}//RTC_Set_DateTime
    1ebc:	cf 91       	pop	r28
    1ebe:	0f 91       	pop	r16
    1ec0:	ef 90       	pop	r14
    1ec2:	08 95       	ret

00001ec4 <Timer_Init>:

}

void Timer_Init(void){
	//TCCR0	|=	(1 << WGM01);//CTC mode
	Timer_TCCR_A			= Timer_TCCR_A_Setting;//See timers.h file for settings
    1ec4:	82 e0       	ldi	r24, 0x02	; 2
    1ec6:	84 bd       	out	0x24, r24	; 36
	#ifdef Timer_TCCR_B
	Timer_TCCR_B			= Timer_TCCR_B_Setting;
    1ec8:	83 e0       	ldi	r24, 0x03	; 3
    1eca:	85 bd       	out	0x25, r24	; 37
	#endif
	Timer_TIMSK 			|= (1 << Timer_Overflow_Interrupt);//Enable interrupt
    1ecc:	ee e6       	ldi	r30, 0x6E	; 110
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	82 60       	ori	r24, 0x02	; 2
    1ed4:	80 83       	st	Z, r24
	Timer_Counter_Register	=  Timer_Reload; //Overflow value
    1ed6:	8d e7       	ldi	r24, 0x7D	; 125
    1ed8:	87 bd       	out	0x27, r24	; 39
	TIFR0 |= (1<<OCF0B)|(1<<OCF0B);
    1eda:	aa 9a       	sbi	0x15, 2	; 21
    1edc:	08 95       	ret

00001ede <Pulse_reset>:
}

void Pulse_reset(void){
	//Timers.Pulse_100us = 0;
	Timers.Pulse_1ms = 0;
    1ede:	ea ef       	ldi	r30, 0xFA	; 250
    1ee0:	f1 e0       	ldi	r31, 0x01	; 1
    1ee2:	10 82       	st	Z, r1
	Timers.Pulse_10ms = 0;
    1ee4:	11 82       	std	Z+1, r1	; 0x01
	Timers.Pulse_100ms = 0;
    1ee6:	12 82       	std	Z+2, r1	; 0x02
	Timers.Pulse_1s = 0;
    1ee8:	13 82       	std	Z+3, r1	; 0x03
    1eea:	08 95       	ret

00001eec <Timer_loop>:
Timers_struct Timers;

void Timer_loop (void)
{
	//First reset the timers
	Pulse_reset();
    1eec:	f8 df       	rcall	.-16     	; 0x1ede <Pulse_reset>
	
	if(Timer_Flank > 0)
    1eee:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <Timer_Flank>
    1ef2:	88 23       	and	r24, r24
    1ef4:	59 f1       	breq	.+86     	; 0x1f4c <Timer_loop+0x60>
	{
		Timer_Flank = 0;
    1ef6:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <Timer_Flank>
		Timers.Pulse_1ms=1;
    1efa:	ea ef       	ldi	r30, 0xFA	; 250
    1efc:	f1 e0       	ldi	r31, 0x01	; 1
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	80 83       	st	Z, r24
		//Timers.Count_1ms++;
		Timers.Count_10ms++;
    1f02:	44 81       	ldd	r20, Z+4	; 0x04
    1f04:	4f 5f       	subi	r20, 0xFF	; 255
    1f06:	44 83       	std	Z+4, r20	; 0x04
		Timers.Count_100ms++;
    1f08:	25 81       	ldd	r18, Z+5	; 0x05
    1f0a:	36 81       	ldd	r19, Z+6	; 0x06
    1f0c:	2f 5f       	subi	r18, 0xFF	; 255
    1f0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f10:	36 83       	std	Z+6, r19	; 0x06
    1f12:	25 83       	std	Z+5, r18	; 0x05
		Timers.Count_1s++;
    1f14:	87 81       	ldd	r24, Z+7	; 0x07
    1f16:	90 85       	ldd	r25, Z+8	; 0x08
    1f18:	01 96       	adiw	r24, 0x01	; 1
    1f1a:	90 87       	std	Z+8, r25	; 0x08
    1f1c:	87 83       	std	Z+7, r24	; 0x07

		//if (Timers.Count_1ms > 9){
		//	Timers.Count_1ms=0;
		//	Timers.Pulse_1ms=1;
		//}
		if(Timers.Count_10ms > 9){
    1f1e:	4a 30       	cpi	r20, 0x0A	; 10
    1f20:	18 f0       	brcs	.+6      	; 0x1f28 <Timer_loop+0x3c>
			Timers.Count_10ms = 0;
    1f22:	14 82       	std	Z+4, r1	; 0x04
			Timers.Pulse_10ms = 1;
    1f24:	41 e0       	ldi	r20, 0x01	; 1
    1f26:	41 83       	std	Z+1, r20	; 0x01
		}
		if(Timers.Count_100ms > 99){
    1f28:	24 36       	cpi	r18, 0x64	; 100
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	30 f0       	brcs	.+12     	; 0x1f3a <Timer_loop+0x4e>
			Timers.Count_100ms = 0;
    1f2e:	ea ef       	ldi	r30, 0xFA	; 250
    1f30:	f1 e0       	ldi	r31, 0x01	; 1
    1f32:	16 82       	std	Z+6, r1	; 0x06
    1f34:	15 82       	std	Z+5, r1	; 0x05
			Timers.Pulse_100ms = 1;
    1f36:	21 e0       	ldi	r18, 0x01	; 1
    1f38:	22 83       	std	Z+2, r18	; 0x02
		}
		if(Timers.Count_1s > 999){
    1f3a:	88 3e       	cpi	r24, 0xE8	; 232
    1f3c:	93 40       	sbci	r25, 0x03	; 3
    1f3e:	30 f0       	brcs	.+12     	; 0x1f4c <Timer_loop+0x60>
			Timers.Count_1s = 0;
    1f40:	ea ef       	ldi	r30, 0xFA	; 250
    1f42:	f1 e0       	ldi	r31, 0x01	; 1
    1f44:	10 86       	std	Z+8, r1	; 0x08
    1f46:	17 82       	std	Z+7, r1	; 0x07
			Timers.Pulse_1s = 1;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	83 83       	std	Z+3, r24	; 0x03
    1f4c:	08 95       	ret

00001f4e <Timer_Pulse_1ms>:
//	return Timers.Pulse_100us;
//}

uint8_t Timer_Pulse_1ms(void){
	return Timers.Pulse_1ms;
}
    1f4e:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <Timers>
    1f52:	08 95       	ret

00001f54 <Timer_Pulse_10ms>:

uint8_t Timer_Pulse_10ms(void){
	return Timers.Pulse_10ms;
}
    1f54:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <Timers+0x1>
    1f58:	08 95       	ret

00001f5a <Timer_Pulse_100ms>:

uint8_t Timer_Pulse_100ms(void){
	return Timers.Pulse_100ms;
}
    1f5a:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <Timers+0x2>
    1f5e:	08 95       	ret

00001f60 <Timer_Pulse_1s>:

uint8_t Timer_Pulse_1s(void){
	return Timers.Pulse_1s;
}
    1f60:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <Timers+0x3>
    1f64:	08 95       	ret

00001f66 <__vector_14>:

ISR(Timer_Overvlow_Vector){
    1f66:	1f 92       	push	r1
    1f68:	0f 92       	push	r0
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	0f 92       	push	r0
    1f6e:	11 24       	eor	r1, r1
    1f70:	8f 93       	push	r24
	//Timer_Counter_Register=Timer_Reload; //Overflow value
	Timer_Flank++;
    1f72:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <Timer_Flank>
    1f76:	8f 5f       	subi	r24, 0xFF	; 255
    1f78:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Timer_Flank>
	//TIFR0 |= (1<<OCF0A)|(1<<OCF0B)|(1<<TOV0);
}
    1f7c:	8f 91       	pop	r24
    1f7e:	0f 90       	pop	r0
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	0f 90       	pop	r0
    1f84:	1f 90       	pop	r1
    1f86:	18 95       	reti

00001f88 <__divmodhi4>:
    1f88:	97 fb       	bst	r25, 7
    1f8a:	07 2e       	mov	r0, r23
    1f8c:	16 f4       	brtc	.+4      	; 0x1f92 <__divmodhi4+0xa>
    1f8e:	00 94       	com	r0
    1f90:	06 d0       	rcall	.+12     	; 0x1f9e <__divmodhi4_neg1>
    1f92:	77 fd       	sbrc	r23, 7
    1f94:	08 d0       	rcall	.+16     	; 0x1fa6 <__divmodhi4_neg2>
    1f96:	17 d0       	rcall	.+46     	; 0x1fc6 <__udivmodhi4>
    1f98:	07 fc       	sbrc	r0, 7
    1f9a:	05 d0       	rcall	.+10     	; 0x1fa6 <__divmodhi4_neg2>
    1f9c:	3e f4       	brtc	.+14     	; 0x1fac <__divmodhi4_exit>

00001f9e <__divmodhi4_neg1>:
    1f9e:	90 95       	com	r25
    1fa0:	81 95       	neg	r24
    1fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa4:	08 95       	ret

00001fa6 <__divmodhi4_neg2>:
    1fa6:	70 95       	com	r23
    1fa8:	61 95       	neg	r22
    1faa:	7f 4f       	sbci	r23, 0xFF	; 255

00001fac <__divmodhi4_exit>:
    1fac:	08 95       	ret

00001fae <__umulhisi3>:
    1fae:	a2 9f       	mul	r26, r18
    1fb0:	b0 01       	movw	r22, r0
    1fb2:	b3 9f       	mul	r27, r19
    1fb4:	c0 01       	movw	r24, r0
    1fb6:	a3 9f       	mul	r26, r19
    1fb8:	01 d0       	rcall	.+2      	; 0x1fbc <__umulhisi3+0xe>
    1fba:	b2 9f       	mul	r27, r18
    1fbc:	70 0d       	add	r23, r0
    1fbe:	81 1d       	adc	r24, r1
    1fc0:	11 24       	eor	r1, r1
    1fc2:	91 1d       	adc	r25, r1
    1fc4:	08 95       	ret

00001fc6 <__udivmodhi4>:
    1fc6:	aa 1b       	sub	r26, r26
    1fc8:	bb 1b       	sub	r27, r27
    1fca:	51 e1       	ldi	r21, 0x11	; 17
    1fcc:	07 c0       	rjmp	.+14     	; 0x1fdc <__udivmodhi4_ep>

00001fce <__udivmodhi4_loop>:
    1fce:	aa 1f       	adc	r26, r26
    1fd0:	bb 1f       	adc	r27, r27
    1fd2:	a6 17       	cp	r26, r22
    1fd4:	b7 07       	cpc	r27, r23
    1fd6:	10 f0       	brcs	.+4      	; 0x1fdc <__udivmodhi4_ep>
    1fd8:	a6 1b       	sub	r26, r22
    1fda:	b7 0b       	sbc	r27, r23

00001fdc <__udivmodhi4_ep>:
    1fdc:	88 1f       	adc	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	5a 95       	dec	r21
    1fe2:	a9 f7       	brne	.-22     	; 0x1fce <__udivmodhi4_loop>
    1fe4:	80 95       	com	r24
    1fe6:	90 95       	com	r25
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	08 95       	ret

00001fee <_exit>:
    1fee:	f8 94       	cli

00001ff0 <__stop_program>:
    1ff0:	ff cf       	rjmp	.-2      	; 0x1ff0 <__stop_program>
