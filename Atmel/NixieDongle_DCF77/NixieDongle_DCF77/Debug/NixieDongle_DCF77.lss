
NixieDongle_DCF77.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000572  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000572  00000606  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  00800068  00800068  0000060e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000060e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b77  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000795  00000000  00000000  000012cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000983  00000000  00000000  00001a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  000023e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f0  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ea  00000000  00000000  00002b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002d52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4f c0       	rjmp	.+158    	; 0xa0 <__ctors_end>
   2:	67 c0       	rjmp	.+206    	; 0xd2 <__bad_interrupt>
   4:	7f c1       	rjmp	.+766    	; 0x304 <__vector_2>
   6:	65 c0       	rjmp	.+202    	; 0xd2 <__bad_interrupt>
   8:	e3 c1       	rjmp	.+966    	; 0x3d0 <__vector_4>
   a:	63 c0       	rjmp	.+198    	; 0xd2 <__bad_interrupt>
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	61 c0       	rjmp	.+194    	; 0xd2 <__bad_interrupt>
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	5f c0       	rjmp	.+190    	; 0xd2 <__bad_interrupt>
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	5d c0       	rjmp	.+186    	; 0xd2 <__bad_interrupt>
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	5b c0       	rjmp	.+182    	; 0xd2 <__bad_interrupt>
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	f5 c1       	rjmp	.+1002   	; 0x40a <__vector_15>
  20:	10 c2       	rjmp	.+1056   	; 0x442 <__vector_16>
  22:	57 c0       	rjmp	.+174    	; 0xd2 <__bad_interrupt>
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	55 c0       	rjmp	.+170    	; 0xd2 <__bad_interrupt>
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	ca c0       	rjmp	.+404    	; 0x1c0 <DCF_LOOP+0xa0>
  2c:	6a c1       	rjmp	.+724    	; 0x302 <DCF_LOOP+0x1e2>
  2e:	69 c1       	rjmp	.+722    	; 0x302 <DCF_LOOP+0x1e2>
  30:	68 c1       	rjmp	.+720    	; 0x302 <DCF_LOOP+0x1e2>
  32:	67 c1       	rjmp	.+718    	; 0x302 <DCF_LOOP+0x1e2>
  34:	66 c1       	rjmp	.+716    	; 0x302 <DCF_LOOP+0x1e2>
  36:	65 c1       	rjmp	.+714    	; 0x302 <DCF_LOOP+0x1e2>
  38:	64 c1       	rjmp	.+712    	; 0x302 <DCF_LOOP+0x1e2>
  3a:	63 c1       	rjmp	.+710    	; 0x302 <DCF_LOOP+0x1e2>
  3c:	62 c1       	rjmp	.+708    	; 0x302 <DCF_LOOP+0x1e2>
  3e:	61 c1       	rjmp	.+706    	; 0x302 <DCF_LOOP+0x1e2>
  40:	60 c1       	rjmp	.+704    	; 0x302 <DCF_LOOP+0x1e2>
  42:	5f c1       	rjmp	.+702    	; 0x302 <DCF_LOOP+0x1e2>
  44:	5e c1       	rjmp	.+700    	; 0x302 <DCF_LOOP+0x1e2>
  46:	5d c1       	rjmp	.+698    	; 0x302 <DCF_LOOP+0x1e2>
  48:	5c c1       	rjmp	.+696    	; 0x302 <DCF_LOOP+0x1e2>
  4a:	5b c1       	rjmp	.+694    	; 0x302 <DCF_LOOP+0x1e2>
  4c:	c9 c0       	rjmp	.+402    	; 0x1e0 <DCF_LOOP+0xc0>
  4e:	cb c0       	rjmp	.+406    	; 0x1e6 <DCF_LOOP+0xc6>
  50:	d7 c0       	rjmp	.+430    	; 0x200 <DCF_LOOP+0xe0>
  52:	dd c0       	rjmp	.+442    	; 0x20e <DCF_LOOP+0xee>
  54:	e3 c0       	rjmp	.+454    	; 0x21c <DCF_LOOP+0xfc>
  56:	e6 c0       	rjmp	.+460    	; 0x224 <DCF_LOOP+0x104>
  58:	e5 c0       	rjmp	.+458    	; 0x224 <DCF_LOOP+0x104>
  5a:	e4 c0       	rjmp	.+456    	; 0x224 <DCF_LOOP+0x104>
  5c:	e3 c0       	rjmp	.+454    	; 0x224 <DCF_LOOP+0x104>
  5e:	e2 c0       	rjmp	.+452    	; 0x224 <DCF_LOOP+0x104>
  60:	e1 c0       	rjmp	.+450    	; 0x224 <DCF_LOOP+0x104>
  62:	f0 c0       	rjmp	.+480    	; 0x244 <DCF_LOOP+0x124>
  64:	f7 c0       	rjmp	.+494    	; 0x254 <DCF_LOOP+0x134>
  66:	fa c0       	rjmp	.+500    	; 0x25c <DCF_LOOP+0x13c>
  68:	f9 c0       	rjmp	.+498    	; 0x25c <DCF_LOOP+0x13c>
  6a:	f8 c0       	rjmp	.+496    	; 0x25c <DCF_LOOP+0x13c>
  6c:	f7 c0       	rjmp	.+494    	; 0x25c <DCF_LOOP+0x13c>
  6e:	f6 c0       	rjmp	.+492    	; 0x25c <DCF_LOOP+0x13c>
  70:	05 c1       	rjmp	.+522    	; 0x27c <DCF_LOOP+0x15c>
  72:	0c c1       	rjmp	.+536    	; 0x28c <DCF_LOOP+0x16c>
  74:	0f c1       	rjmp	.+542    	; 0x294 <DCF_LOOP+0x174>
  76:	0e c1       	rjmp	.+540    	; 0x294 <DCF_LOOP+0x174>
  78:	0d c1       	rjmp	.+538    	; 0x294 <DCF_LOOP+0x174>
  7a:	0c c1       	rjmp	.+536    	; 0x294 <DCF_LOOP+0x174>
  7c:	0b c1       	rjmp	.+534    	; 0x294 <DCF_LOOP+0x174>
  7e:	41 c1       	rjmp	.+642    	; 0x302 <DCF_LOOP+0x1e2>
  80:	40 c1       	rjmp	.+640    	; 0x302 <DCF_LOOP+0x1e2>
  82:	3f c1       	rjmp	.+638    	; 0x302 <DCF_LOOP+0x1e2>
  84:	16 c1       	rjmp	.+556    	; 0x2b2 <DCF_LOOP+0x192>
  86:	17 c1       	rjmp	.+558    	; 0x2b6 <DCF_LOOP+0x196>
  88:	16 c1       	rjmp	.+556    	; 0x2b6 <DCF_LOOP+0x196>
  8a:	15 c1       	rjmp	.+554    	; 0x2b6 <DCF_LOOP+0x196>
  8c:	14 c1       	rjmp	.+552    	; 0x2b6 <DCF_LOOP+0x196>
  8e:	22 c1       	rjmp	.+580    	; 0x2d4 <DCF_LOOP+0x1b4>
  90:	23 c1       	rjmp	.+582    	; 0x2d8 <DCF_LOOP+0x1b8>
  92:	22 c1       	rjmp	.+580    	; 0x2d8 <DCF_LOOP+0x1b8>
  94:	21 c1       	rjmp	.+578    	; 0x2d8 <DCF_LOOP+0x1b8>
  96:	20 c1       	rjmp	.+576    	; 0x2d8 <DCF_LOOP+0x1b8>
  98:	1f c1       	rjmp	.+574    	; 0x2d8 <DCF_LOOP+0x1b8>
  9a:	1e c1       	rjmp	.+572    	; 0x2d8 <DCF_LOOP+0x1b8>
  9c:	1d c1       	rjmp	.+570    	; 0x2d8 <DCF_LOOP+0x1b8>
  9e:	2b c1       	rjmp	.+598    	; 0x2f6 <DCF_LOOP+0x1d6>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ed       	ldi	r28, 0xDF	; 223
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	10 e0       	ldi	r17, 0x00	; 0
  aa:	a0 e6       	ldi	r26, 0x60	; 96
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	e2 e7       	ldi	r30, 0x72	; 114
  b0:	f5 e0       	ldi	r31, 0x05	; 5
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x10>
  b4:	05 90       	lpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a8 36       	cpi	r26, 0x68	; 104
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0xc>

000000be <__do_clear_bss>:
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	a8 e6       	ldi	r26, 0x68	; 104
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a6 39       	cpi	r26, 0x96	; 150
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	2e d1       	rcall	.+604    	; 0x32c <main>
  d0:	4e c2       	rjmp	.+1180   	; 0x56e <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <DCF_INIT>:
#include "../NixieDongle_DCF77/USI_I2C_Slave/usi_i2c_slave.h"

DCF_struct DCF77;

void DCF_INIT(){
	Timer_Flank=0;
  d4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <Timer_Flank>
	DCF77.InSync=0;
  d8:	ec e7       	ldi	r30, 0x7C	; 124
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	12 86       	std	Z+10, r1	; 0x0a
	DCF77.Timer=0;	
  de:	10 82       	st	Z, r1
	DCF77.StartSignal=0;
  e0:	13 86       	std	Z+11, r1	; 0x0b
	GIMSK |= (1<<INT1);//Enable Interrupt
  e2:	8b b7       	in	r24, 0x3b	; 59
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC10);//Up or down
  e8:	85 b7       	in	r24, 0x35	; 53
  ea:	84 60       	ori	r24, 0x04	; 4
  ec:	85 bf       	out	0x35, r24	; 53
	DDRD &= ~(1<<PORTD3);//Input
  ee:	8b 98       	cbi	0x11, 3	; 17
	PORTD |= (1<<PORTD3);//With pullup enabled
  f0:	93 9a       	sbi	0x12, 3	; 18
	USI_Slave_register_buffer[1] = &DCF77.Minute;
  f2:	ec e6       	ldi	r30, 0x6C	; 108
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	82 e8       	ldi	r24, 0x82	; 130
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	93 83       	std	Z+3, r25	; 0x03
  fc:	82 83       	std	Z+2, r24	; 0x02
	USI_Slave_register_buffer[2] = &DCF77.Hour;
  fe:	83 e8       	ldi	r24, 0x83	; 131
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	95 83       	std	Z+5, r25	; 0x05
 104:	84 83       	std	Z+4, r24	; 0x04
	USI_Slave_register_buffer[4] = &DCF77.Day;
 106:	8e e7       	ldi	r24, 0x7E	; 126
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	91 87       	std	Z+9, r25	; 0x09
 10c:	80 87       	std	Z+8, r24	; 0x08
	USI_Slave_register_buffer[5] = &DCF77.Month;
 10e:	8f e7       	ldi	r24, 0x7F	; 127
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	93 87       	std	Z+11, r25	; 0x0b
 114:	82 87       	std	Z+10, r24	; 0x0a
	USI_Slave_register_buffer[6] = &DCF77.Year;
 116:	80 e8       	ldi	r24, 0x80	; 128
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	95 87       	std	Z+13, r25	; 0x0d
 11c:	84 87       	std	Z+12, r24	; 0x0c
 11e:	08 95       	ret

00000120 <DCF_LOOP>:
}

void DCF_LOOP(){
    static const uint8_t xBCD[] = { 1, 2, 4, 8, 10, 20, 40, 80 };
		  static uint8_t xParity = 0;
				 uint8_t x10ms = Timer_Pulse_10ms();
 120:	54 d1       	rcall	.+680    	; 0x3ca <Timer_Pulse_10ms>
				 uint8_t xCurrBit = 0;

	DCF77.Timer=DCF77.Timer+(x10ms&&DCF77_Flank);
 122:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <DCF77>
 126:	88 23       	and	r24, r24
 128:	39 f0       	breq	.+14     	; 0x138 <DCF_LOOP+0x18>
 12a:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <DCF77_Flank>
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	21 11       	cpse	r18, r1
 132:	03 c0       	rjmp	.+6      	; 0x13a <DCF_LOOP+0x1a>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	01 c0       	rjmp	.+2      	; 0x13a <DCF_LOOP+0x1a>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	89 0f       	add	r24, r25
 13c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <DCF77>
	
	if (DCF77_Flank==0 && DCF77.Timer>0){
 140:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <DCF77_Flank>
 144:	91 11       	cpse	r25, r1
 146:	1d c0       	rjmp	.+58     	; 0x182 <DCF_LOOP+0x62>
 148:	88 23       	and	r24, r24
 14a:	e9 f0       	breq	.+58     	; 0x186 <DCF_LOOP+0x66>
		if (DCF77.Timer>100){
 14c:	85 36       	cpi	r24, 0x65	; 101
 14e:	38 f0       	brcs	.+14     	; 0x15e <DCF_LOOP+0x3e>
			DCF77.StartSignal++;
 150:	ec e7       	ldi	r30, 0x7C	; 124
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	83 85       	ldd	r24, Z+11	; 0x0b
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	83 87       	std	Z+11, r24	; 0x0b
			DCF77.SecondCounter=0;
 15a:	10 86       	std	Z+8, r1	; 0x08
 15c:	0f c0       	rjmp	.+30     	; 0x17c <DCF_LOOP+0x5c>
		}
		else if (DCF77.Timer>16){
 15e:	81 31       	cpi	r24, 0x11	; 17
 160:	38 f0       	brcs	.+14     	; 0x170 <DCF_LOOP+0x50>
			xCurrBit=1;
			DCF77.SecondCounter++;
 162:	ec e7       	ldi	r30, 0x7C	; 124
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 85       	ldd	r24, Z+8	; 0x08
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	80 87       	std	Z+8, r24	; 0x08
		if (DCF77.Timer>100){
			DCF77.StartSignal++;
			DCF77.SecondCounter=0;
		}
		else if (DCF77.Timer>16){
			xCurrBit=1;
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	06 c0       	rjmp	.+12     	; 0x17c <DCF_LOOP+0x5c>
			DCF77.SecondCounter++;
		}
		else{
			DCF77.SecondCounter++;
 170:	ec e7       	ldi	r30, 0x7C	; 124
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 85       	ldd	r24, Z+8	; 0x08
 176:	8f 5f       	subi	r24, 0xFF	; 255
 178:	80 87       	std	Z+8, r24	; 0x08

void DCF_LOOP(){
    static const uint8_t xBCD[] = { 1, 2, 4, 8, 10, 20, 40, 80 };
		  static uint8_t xParity = 0;
				 uint8_t x10ms = Timer_Pulse_10ms();
				 uint8_t xCurrBit = 0;
 17a:	90 e0       	ldi	r25, 0x00	; 0
			DCF77.SecondCounter++;
		}
		else{
			DCF77.SecondCounter++;
		}
		DCF77.Timer=0;
 17c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <DCF77>
 180:	03 c0       	rjmp	.+6      	; 0x188 <DCF_LOOP+0x68>

void DCF_LOOP(){
    static const uint8_t xBCD[] = { 1, 2, 4, 8, 10, 20, 40, 80 };
		  static uint8_t xParity = 0;
				 uint8_t x10ms = Timer_Pulse_10ms();
				 uint8_t xCurrBit = 0;
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	01 c0       	rjmp	.+2      	; 0x188 <DCF_LOOP+0x68>
 186:	90 e0       	ldi	r25, 0x00	; 0
		else{
			DCF77.SecondCounter++;
		}
		DCF77.Timer=0;
	}
	if (DCF77.SecondCounter!=DCF77.SecondCounterOld){
 188:	ac e7       	ldi	r26, 0x7C	; 124
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	18 96       	adiw	r26, 0x08	; 8
 18e:	ec 91       	ld	r30, X
 190:	18 97       	sbiw	r26, 0x08	; 8
 192:	19 96       	adiw	r26, 0x09	; 9
 194:	8c 91       	ld	r24, X
 196:	e8 17       	cp	r30, r24
 198:	09 f4       	brne	.+2      	; 0x19c <DCF_LOOP+0x7c>
 19a:	b3 c0       	rjmp	.+358    	; 0x302 <DCF_LOOP+0x1e2>
		DCF77.SecondCounterOld=DCF77.SecondCounter;
 19c:	e0 93 85 00 	sts	0x0085, r30	; 0x800085 <DCF77+0x9>
		
		xParity ^= xCurrBit;
 1a0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 1a4:	89 27       	eor	r24, r25
 1a6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
		switch(DCF77.SecondCounter){
 1aa:	4e 2f       	mov	r20, r30
 1ac:	50 e0       	ldi	r21, 0x00	; 0
 1ae:	4b 33       	cpi	r20, 0x3B	; 59
 1b0:	51 05       	cpc	r21, r1
 1b2:	08 f0       	brcs	.+2      	; 0x1b6 <DCF_LOOP+0x96>
 1b4:	a6 c0       	rjmp	.+332    	; 0x302 <DCF_LOOP+0x1e2>
 1b6:	4b 5e       	subi	r20, 0xEB	; 235
 1b8:	5f 4f       	sbci	r21, 0xFF	; 255
 1ba:	4f 93       	push	r20
 1bc:	5f 93       	push	r21
 1be:	08 95       	ret
			case 0:{
				if (xCurrBit>0){
 1c0:	99 23       	and	r25, r25
 1c2:	19 f0       	breq	.+6      	; 0x1ca <DCF_LOOP+0xaa>
					DCF77.InSync=0;
 1c4:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <DCF77+0xa>
 1c8:	08 95       	ret
				}
				else{
					if(DCF77.StartSignal>1){
 1ca:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <DCF77+0xb>
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	08 f4       	brcc	.+2      	; 0x1d4 <DCF_LOOP+0xb4>
 1d2:	97 c0       	rjmp	.+302    	; 0x302 <DCF_LOOP+0x1e2>
						DCF77.InSync=1;
 1d4:	ec e7       	ldi	r30, 0x7C	; 124
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	82 87       	std	Z+10, r24	; 0x0a
						DCF77.StartSignal=0;
 1dc:	13 86       	std	Z+11, r1	; 0x0b
 1de:	08 95       	ret
					}
				}
			}//0
			break;
			case 17:{
				DCF77.SummerTime=xCurrBit;
 1e0:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <DCF77+0x1>
			}//17
			break;
 1e4:	08 95       	ret
			case 18:{
				if (DCF77.SummerTime && xCurrBit){
 1e6:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <DCF77+0x1>
 1ea:	88 23       	and	r24, r24
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <DCF_LOOP+0xd0>
 1ee:	89 c0       	rjmp	.+274    	; 0x302 <DCF_LOOP+0x1e2>
 1f0:	99 23       	and	r25, r25
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <DCF_LOOP+0xd6>
 1f4:	86 c0       	rjmp	.+268    	; 0x302 <DCF_LOOP+0x1e2>
					DCF77.InSync=0;
 1f6:	ec e7       	ldi	r30, 0x7C	; 124
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	12 86       	std	Z+10, r1	; 0x0a
					DCF77.SecondCounter=0;
 1fc:	10 86       	std	Z+8, r1	; 0x08
 1fe:	08 95       	ret
				}
			}
			break;
			case 19:{
				if (xCurrBit>0){
 200:	99 23       	and	r25, r25
 202:	09 f4       	brne	.+2      	; 0x206 <DCF_LOOP+0xe6>
 204:	7e c0       	rjmp	.+252    	; 0x302 <DCF_LOOP+0x1e2>
					DCF77.LeapSecond=1;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <DCF77+0x5>
 20c:	08 95       	ret
				}
			}//19
			break;
			case 20:{
				if(xCurrBit==0){
 20e:	91 11       	cpse	r25, r1
 210:	78 c0       	rjmp	.+240    	; 0x302 <DCF_LOOP+0x1e2>
					DCF77.InSync=0;
 212:	ec e7       	ldi	r30, 0x7C	; 124
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	12 86       	std	Z+10, r1	; 0x0a
					DCF77.SecondCounter=0;
 218:	10 86       	std	Z+8, r1	; 0x08
 21a:	08 95       	ret
				}
			}//20
			break;
			
			//get the minute
			case 21:xParity = xCurrBit; DCF77.Minute=0;
 21c:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__data_end>
 220:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <DCF77+0x6>
			case 22:
			case 23:
			case 24:
			case 25:
			case 26:
			case 27:if(xCurrBit)DCF77.Minute+=xBCD[DCF77.SecondCounter-21];
 224:	99 23       	and	r25, r25
 226:	09 f4       	brne	.+2      	; 0x22a <DCF_LOOP+0x10a>
 228:	6c c0       	rjmp	.+216    	; 0x302 <DCF_LOOP+0x1e2>
 22a:	ac e7       	ldi	r26, 0x7C	; 124
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	e5 5b       	subi	r30, 0xB5	; 181
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	90 81       	ld	r25, Z
 236:	16 96       	adiw	r26, 0x06	; 6
 238:	8c 91       	ld	r24, X
 23a:	16 97       	sbiw	r26, 0x06	; 6
 23c:	89 0f       	add	r24, r25
 23e:	16 96       	adiw	r26, 0x06	; 6
 240:	8c 93       	st	X, r24
 242:	08 95       	ret
			break;
			case 28:{
				if(xParity){
 244:	88 23       	and	r24, r24
 246:	09 f4       	brne	.+2      	; 0x24a <DCF_LOOP+0x12a>
 248:	5c c0       	rjmp	.+184    	; 0x302 <DCF_LOOP+0x1e2>
					DCF77.InSync=0;
 24a:	ec e7       	ldi	r30, 0x7C	; 124
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	12 86       	std	Z+10, r1	; 0x0a
					DCF77.SecondCounter=0;
 250:	10 86       	std	Z+8, r1	; 0x08
 252:	08 95       	ret
				}
			}
			break;
			
			//get hour
			case 29:xParity = xCurrBit; DCF77.Hour=0;
 254:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__data_end>
 258:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <DCF77+0x7>
			case 30:
			case 31:
			case 32:
			case 33:
			case 34:if(xCurrBit)DCF77.Hour+=xBCD[DCF77.SecondCounter-29];
 25c:	99 23       	and	r25, r25
 25e:	09 f4       	brne	.+2      	; 0x262 <DCF_LOOP+0x142>
 260:	50 c0       	rjmp	.+160    	; 0x302 <DCF_LOOP+0x1e2>
 262:	ac e7       	ldi	r26, 0x7C	; 124
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	ed 5b       	subi	r30, 0xBD	; 189
 26a:	ff 4f       	sbci	r31, 0xFF	; 255
 26c:	90 81       	ld	r25, Z
 26e:	17 96       	adiw	r26, 0x07	; 7
 270:	8c 91       	ld	r24, X
 272:	17 97       	sbiw	r26, 0x07	; 7
 274:	89 0f       	add	r24, r25
 276:	17 96       	adiw	r26, 0x07	; 7
 278:	8c 93       	st	X, r24
 27a:	08 95       	ret
			break;
			case 35:{
				if(xParity){
 27c:	88 23       	and	r24, r24
 27e:	09 f4       	brne	.+2      	; 0x282 <DCF_LOOP+0x162>
 280:	40 c0       	rjmp	.+128    	; 0x302 <DCF_LOOP+0x1e2>
					DCF77.InSync=0;
 282:	ec e7       	ldi	r30, 0x7C	; 124
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	12 86       	std	Z+10, r1	; 0x0a
					DCF77.SecondCounter=0;
 288:	10 86       	std	Z+8, r1	; 0x08
 28a:	08 95       	ret
				}
			}
			break;
			
			//day of the month
			case 36:xParity = xCurrBit; DCF77.Day=0;
 28c:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__data_end>
 290:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <DCF77+0x2>
			case 37:
			case 38:
			case 39:
			case 40:
			case 41:if(xCurrBit)DCF77.Day+=xBCD[DCF77.SecondCounter-36];
 294:	99 23       	and	r25, r25
 296:	a9 f1       	breq	.+106    	; 0x302 <DCF_LOOP+0x1e2>
 298:	ac e7       	ldi	r26, 0x7C	; 124
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	e4 5c       	subi	r30, 0xC4	; 196
 2a0:	ff 4f       	sbci	r31, 0xFF	; 255
 2a2:	90 81       	ld	r25, Z
 2a4:	12 96       	adiw	r26, 0x02	; 2
 2a6:	8c 91       	ld	r24, X
 2a8:	12 97       	sbiw	r26, 0x02	; 2
 2aa:	89 0f       	add	r24, r25
 2ac:	12 96       	adiw	r26, 0x02	; 2
 2ae:	8c 93       	st	X, r24
 2b0:	08 95       	ret
			break;
			
			//Get the month
			case 45:DCF77.Month=0;
 2b2:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <DCF77+0x3>
			case 46:
			case 47:
			case 48:
			case 49:if(xCurrBit)DCF77.Month+=xBCD[DCF77.SecondCounter-45];
 2b6:	99 23       	and	r25, r25
 2b8:	21 f1       	breq	.+72     	; 0x302 <DCF_LOOP+0x1e2>
 2ba:	ac e7       	ldi	r26, 0x7C	; 124
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	ed 5c       	subi	r30, 0xCD	; 205
 2c2:	ff 4f       	sbci	r31, 0xFF	; 255
 2c4:	90 81       	ld	r25, Z
 2c6:	13 96       	adiw	r26, 0x03	; 3
 2c8:	8c 91       	ld	r24, X
 2ca:	13 97       	sbiw	r26, 0x03	; 3
 2cc:	89 0f       	add	r24, r25
 2ce:	13 96       	adiw	r26, 0x03	; 3
 2d0:	8c 93       	st	X, r24
 2d2:	08 95       	ret
			break;
			
			//Get the year
			case 50:DCF77.Year=0;
 2d4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <DCF77+0x4>
			case 52:
			case 53:
			case 54:
			case 55:
			case 56:
			case 57:if(xCurrBit)DCF77.Year+=xBCD[DCF77.SecondCounter-50];
 2d8:	99 23       	and	r25, r25
 2da:	99 f0       	breq	.+38     	; 0x302 <DCF_LOOP+0x1e2>
 2dc:	ac e7       	ldi	r26, 0x7C	; 124
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	e2 5d       	subi	r30, 0xD2	; 210
 2e4:	ff 4f       	sbci	r31, 0xFF	; 255
 2e6:	90 81       	ld	r25, Z
 2e8:	14 96       	adiw	r26, 0x04	; 4
 2ea:	8c 91       	ld	r24, X
 2ec:	14 97       	sbiw	r26, 0x04	; 4
 2ee:	89 0f       	add	r24, r25
 2f0:	14 96       	adiw	r26, 0x04	; 4
 2f2:	8c 93       	st	X, r24
 2f4:	08 95       	ret
			break;
			case 58:{
				if(xParity){
 2f6:	88 23       	and	r24, r24
 2f8:	21 f0       	breq	.+8      	; 0x302 <DCF_LOOP+0x1e2>
					DCF77.InSync=0;
 2fa:	ec e7       	ldi	r30, 0x7C	; 124
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	12 86       	std	Z+10, r1	; 0x0a
					DCF77.SecondCounter=0;
 300:	10 86       	std	Z+8, r1	; 0x08
 302:	08 95       	ret

00000304 <__vector_2>:
}

//ISR(INT0_vect){
//}

ISR(INT1_vect){
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	8f 93       	push	r24
	if (PIND & (1<<PORTD3)){
 310:	83 9b       	sbis	0x10, 3	; 16
 312:	04 c0       	rjmp	.+8      	; 0x31c <__vector_2+0x18>
		DCF77_Flank=1;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <DCF77_Flank>
 31a:	02 c0       	rjmp	.+4      	; 0x320 <__vector_2+0x1c>
	}
	else{
		DCF77_Flank=0;
 31c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <DCF77_Flank>
	}
}
 320:	8f 91       	pop	r24
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <main>:
#include "USI_I2C_Slave/usi_i2c_slave.h"

//prototypes

int main(void){
	cli();
 32c:	f8 94       	cli
	Timer_Init();
 32e:	07 d0       	rcall	.+14     	; 0x33e <Timer_Init>
	DCF_INIT();
 330:	d1 de       	rcall	.-606    	; 0xd4 <DCF_INIT>
	USI_I2C_Init(0x78);
 332:	88 e7       	ldi	r24, 0x78	; 120
 334:	5e d0       	rcall	.+188    	; 0x3f2 <USI_I2C_Init>
	sei();
 336:	78 94       	sei

    while (1){
		Timer_loop();
 338:	17 d0       	rcall	.+46     	; 0x368 <Timer_loop>
		DCF_LOOP();
 33a:	f2 de       	rcall	.-540    	; 0x120 <DCF_LOOP>
 33c:	fd cf       	rjmp	.-6      	; 0x338 <main+0xc>

0000033e <Timer_Init>:
	return Timers.Pulse_100ms;
}

uint8_t Timer_Pulse_1s(void){
	return Timers.Pulse_1s;
}
 33e:	1f bc       	out	0x2f, r1	; 47
 340:	89 e0       	ldi	r24, 0x09	; 9
 342:	8e bd       	out	0x2e, r24	; 46
 344:	12 bc       	out	0x22, r1	; 34
 346:	89 b7       	in	r24, 0x39	; 57
 348:	80 64       	ori	r24, 0x40	; 64
 34a:	89 bf       	out	0x39, r24	; 57
 34c:	8f e3       	ldi	r24, 0x3F	; 63
 34e:	9f e1       	ldi	r25, 0x1F	; 31
 350:	9b bd       	out	0x2b, r25	; 43
 352:	8a bd       	out	0x2a, r24	; 42
 354:	88 e2       	ldi	r24, 0x28	; 40
 356:	88 bf       	out	0x38, r24	; 56
 358:	08 95       	ret

0000035a <Pulse_reset>:
 35a:	e9 e8       	ldi	r30, 0x89	; 137
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	10 82       	st	Z, r1
 360:	11 82       	std	Z+1, r1	; 0x01
 362:	12 82       	std	Z+2, r1	; 0x02
 364:	13 82       	std	Z+3, r1	; 0x03
 366:	08 95       	ret

00000368 <Timer_loop>:
 368:	f8 df       	rcall	.-16     	; 0x35a <Pulse_reset>
 36a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Timer_Flank>
 36e:	88 23       	and	r24, r24
 370:	59 f1       	breq	.+86     	; 0x3c8 <Timer_loop+0x60>
 372:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <Timer_Flank>
 376:	e9 e8       	ldi	r30, 0x89	; 137
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	80 83       	st	Z, r24
 37e:	44 81       	ldd	r20, Z+4	; 0x04
 380:	4f 5f       	subi	r20, 0xFF	; 255
 382:	44 83       	std	Z+4, r20	; 0x04
 384:	25 81       	ldd	r18, Z+5	; 0x05
 386:	36 81       	ldd	r19, Z+6	; 0x06
 388:	2f 5f       	subi	r18, 0xFF	; 255
 38a:	3f 4f       	sbci	r19, 0xFF	; 255
 38c:	36 83       	std	Z+6, r19	; 0x06
 38e:	25 83       	std	Z+5, r18	; 0x05
 390:	87 81       	ldd	r24, Z+7	; 0x07
 392:	90 85       	ldd	r25, Z+8	; 0x08
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	90 87       	std	Z+8, r25	; 0x08
 398:	87 83       	std	Z+7, r24	; 0x07
 39a:	4a 30       	cpi	r20, 0x0A	; 10
 39c:	18 f0       	brcs	.+6      	; 0x3a4 <Timer_loop+0x3c>
 39e:	14 82       	std	Z+4, r1	; 0x04
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	41 83       	std	Z+1, r20	; 0x01
 3a4:	24 36       	cpi	r18, 0x64	; 100
 3a6:	31 05       	cpc	r19, r1
 3a8:	30 f0       	brcs	.+12     	; 0x3b6 <Timer_loop+0x4e>
 3aa:	e9 e8       	ldi	r30, 0x89	; 137
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	16 82       	std	Z+6, r1	; 0x06
 3b0:	15 82       	std	Z+5, r1	; 0x05
 3b2:	21 e0       	ldi	r18, 0x01	; 1
 3b4:	22 83       	std	Z+2, r18	; 0x02
 3b6:	88 3e       	cpi	r24, 0xE8	; 232
 3b8:	93 40       	sbci	r25, 0x03	; 3
 3ba:	30 f0       	brcs	.+12     	; 0x3c8 <Timer_loop+0x60>
 3bc:	e9 e8       	ldi	r30, 0x89	; 137
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	10 86       	std	Z+8, r1	; 0x08
 3c2:	17 82       	std	Z+7, r1	; 0x07
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	83 83       	std	Z+3, r24	; 0x03
 3c8:	08 95       	ret

000003ca <Timer_Pulse_10ms>:
 3ca:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <Timers+0x1>
 3ce:	08 95       	ret

000003d0 <__vector_4>:

ISR(Timer_Overvlow_Vector){
 3d0:	1f 92       	push	r1
 3d2:	0f 92       	push	r0
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	0f 92       	push	r0
 3d8:	11 24       	eor	r1, r1
 3da:	8f 93       	push	r24
	//Timer_Counter_Register=Timer_Reload; //Overflow value
	Timer_Flank++;
 3dc:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Timer_Flank>
 3e0:	8f 5f       	subi	r24, 0xFF	; 255
 3e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <Timer_Flank>
	//TIFR0 |= (1<<OCF0A)|(1<<OCF0B)|(1<<TOV0);
}
 3e6:	8f 91       	pop	r24
 3e8:	0f 90       	pop	r0
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	0f 90       	pop	r0
 3ee:	1f 90       	pop	r1
 3f0:	18 95       	reti

000003f2 <USI_I2C_Init>:

////////////////////////////////////////////////////////////////////////////////////////////////////

void USI_I2C_Init(char address)
{
	PORT_USI &= ~(1 << PORT_USI_SCL);
 3f2:	c7 98       	cbi	0x18, 7	; 24
	PORT_USI &= ~(1 << PORT_USI_SDA);
 3f4:	c5 98       	cbi	0x18, 5	; 24

	usi_i2c_slave_address = address;
 3f6:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <usi_i2c_slave_address>

	USI_SET_BOTH_INPUT();
 3fa:	87 b3       	in	r24, 0x17	; 23
 3fc:	8f 75       	andi	r24, 0x5F	; 95
 3fe:	87 bb       	out	0x17, r24	; 23
	
	USICR = (1 << USISIE) | (0 << USIOIE) | (1 << USIWM1) | (0 << USIWM0) | (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | (0 << USITC);
 400:	88 ea       	ldi	r24, 0xA8	; 168
 402:	8d b9       	out	0x0d, r24	; 13
	USISR = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC);
 404:	80 ef       	ldi	r24, 0xF0	; 240
 406:	8e b9       	out	0x0e, r24	; 14
 408:	08 95       	ret

0000040a <__vector_15>:
//  reset the start condition detector to detect the next start condition.     //
/////////////////////////////////////////////////////////////////////////////////

ISR(USI_START_vect)

{
 40a:	1f 92       	push	r1
 40c:	0f 92       	push	r0
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	0f 92       	push	r0
 412:	11 24       	eor	r1, r1
 414:	8f 93       	push	r24

	USI_I2C_Slave_State = USI_SLAVE_CHECK_ADDRESS;
 416:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <USI_I2C_Slave_State>


	USI_SET_SDA_INPUT();
 41a:	bd 98       	cbi	0x17, 5	; 23

	// Condition as in Application Note AVR312 because the Stop Condition Flag is

	// going to be set from the last TWI sequence

	while((PIN_USI & (1 << PIN_USI_SCL)) && !((PIN_USI & (1 << PIN_USI_SDA))));
 41c:	b7 9b       	sbis	0x16, 7	; 22
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__vector_15+0x1a>
 420:	b5 9b       	sbis	0x16, 5	; 22
 422:	fc cf       	rjmp	.-8      	; 0x41c <__vector_15+0x12>



	if(!(PIN_USI & (1 << PIN_USI_SDA)))
 424:	b5 99       	sbic	0x16, 5	; 22
 426:	03 c0       	rjmp	.+6      	; 0x42e <__vector_15+0x24>

	{

		// a Stop Condition did not occur

		USICR = USI_SLAVE_STOP_NOT_OCCUR_USICR;
 428:	88 ee       	ldi	r24, 0xE8	; 232
 42a:	8d b9       	out	0x0d, r24	; 13
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__vector_15+0x28>
	else

	{
		// a Stop Condition did occur

    	USICR = USI_SLAVE_STOP_DID_OCCUR_USICR;
 42e:	88 eb       	ldi	r24, 0xB8	; 184
 430:	8d b9       	out	0x0d, r24	; 13

	}



	USISR = USI_SLAVE_CLEAR_START_USISR;
 432:	80 ef       	ldi	r24, 0xF0	; 240
 434:	8e b9       	out	0x0e, r24	; 14

}
 436:	8f 91       	pop	r24
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <__vector_16>:
//  the I2C protocol for proper transmission.                                  //
/////////////////////////////////////////////////////////////////////////////////

ISR(USI_OVERFLOW_vect)

{
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	8f 93       	push	r24
 44e:	9f 93       	push	r25
 450:	ef 93       	push	r30
 452:	ff 93       	push	r31
	switch (USI_I2C_Slave_State)
 454:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <USI_I2C_Slave_State>
 458:	82 30       	cpi	r24, 0x02	; 2
 45a:	61 f1       	breq	.+88     	; 0x4b4 <__vector_16+0x72>
 45c:	28 f4       	brcc	.+10     	; 0x468 <__vector_16+0x26>
 45e:	88 23       	and	r24, r24
 460:	59 f0       	breq	.+22     	; 0x478 <__vector_16+0x36>
 462:	81 30       	cpi	r24, 0x01	; 1
 464:	b9 f1       	breq	.+110    	; 0x4d4 <__vector_16+0x92>
 466:	7a c0       	rjmp	.+244    	; 0x55c <__vector_16+0x11a>
 468:	84 30       	cpi	r24, 0x04	; 4
 46a:	09 f4       	brne	.+2      	; 0x46e <__vector_16+0x2c>
 46c:	50 c0       	rjmp	.+160    	; 0x50e <__vector_16+0xcc>
 46e:	50 f1       	brcs	.+84     	; 0x4c4 <__vector_16+0x82>
 470:	85 30       	cpi	r24, 0x05	; 5
 472:	09 f4       	brne	.+2      	; 0x476 <__vector_16+0x34>
 474:	53 c0       	rjmp	.+166    	; 0x51c <__vector_16+0xda>
 476:	72 c0       	rjmp	.+228    	; 0x55c <__vector_16+0x11a>
		/////////////////////////////////////////////////////////////////////////

		case USI_SLAVE_CHECK_ADDRESS:


			if((USIDR == 0) || ((USIDR >> 1) == usi_i2c_slave_address))
 478:	8f b1       	in	r24, 0x0f	; 15
 47a:	88 23       	and	r24, r24
 47c:	31 f0       	breq	.+12     	; 0x48a <__vector_16+0x48>
 47e:	8f b1       	in	r24, 0x0f	; 15
 480:	86 95       	lsr	r24
 482:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <usi_i2c_slave_address>
 486:	89 13       	cpse	r24, r25
 488:	10 c0       	rjmp	.+32     	; 0x4aa <__vector_16+0x68>

			{				
				if (USIDR & 0x01)
 48a:	78 9b       	sbis	0x0f, 0	; 15
 48c:	04 c0       	rjmp	.+8      	; 0x496 <__vector_16+0x54>

				{
					USI_I2C_Slave_State = USI_SLAVE_SEND_DATA;
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <USI_I2C_Slave_State>
 494:	05 c0       	rjmp	.+10     	; 0x4a0 <__vector_16+0x5e>
				}

				else

				{
					USI_Slave_internal_address_set = 0;
 496:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <USI_Slave_internal_address_set>
					USI_I2C_Slave_State = USI_SLAVE_RECV_DATA_WAIT;
 49a:	84 e0       	ldi	r24, 0x04	; 4
 49c:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <USI_I2C_Slave_State>

				}

				//Set USI to send ACK

				USIDR = 0;
 4a0:	1f b8       	out	0x0f, r1	; 15

				USI_SET_SDA_OUTPUT();
 4a2:	bd 9a       	sbi	0x17, 5	; 23

				USISR = USI_SLAVE_COUNT_ACK_USISR;
 4a4:	8e e7       	ldi	r24, 0x7E	; 126
 4a6:	8e b9       	out	0x0e, r24	; 14
 4a8:	59 c0       	rjmp	.+178    	; 0x55c <__vector_16+0x11a>
			else

			{
				//Set USI to Start Condition Mode

				USICR = USI_SLAVE_SET_START_COND_USICR;
 4aa:	88 ea       	ldi	r24, 0xA8	; 168
 4ac:	8d b9       	out	0x0d, r24	; 13

				USISR = USI_SLAVE_SET_START_COND_USISR;
 4ae:	80 e7       	ldi	r24, 0x70	; 112
 4b0:	8e b9       	out	0x0e, r24	; 14
 4b2:	54 c0       	rjmp	.+168    	; 0x55c <__vector_16+0x11a>
		case USI_SLAVE_SEND_DATA_ACK_WAIT:

			//After sending, immediately shut off PORT = 1 to prevent driving
			//the line high (I2C should *NEVER* drive high, and could damage
			//connected devices if operating at different voltage levels)
			PORT_USI &= ~(1 << PORT_USI_SDA);
 4b4:	c5 98       	cbi	0x18, 5	; 24


			USI_I2C_Slave_State = USI_SLAVE_SEND_DATA_ACK_CHECK;
 4b6:	83 e0       	ldi	r24, 0x03	; 3
 4b8:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <USI_I2C_Slave_State>
			USI_SET_SDA_INPUT();
 4bc:	bd 98       	cbi	0x17, 5	; 23
			USISR = USI_SLAVE_COUNT_ACK_USISR;
 4be:	8e e7       	ldi	r24, 0x7E	; 126
 4c0:	8e b9       	out	0x0e, r24	; 14
			break;
 4c2:	4c c0       	rjmp	.+152    	; 0x55c <__vector_16+0x11a>
		//  a reset to START conditions, if ACK, fall through into SEND_DATA   //
		//  to continue sending data.                                          //
		/////////////////////////////////////////////////////////////////////////
		case USI_SLAVE_SEND_DATA_ACK_CHECK:
			
			if(USIDR)
 4c4:	8f b1       	in	r24, 0x0f	; 15
 4c6:	88 23       	and	r24, r24
 4c8:	29 f0       	breq	.+10     	; 0x4d4 <__vector_16+0x92>
			{
				//The master sent a NACK, indicating that it will not accept
				//more data.  Reset into START condition state
				USICR = USI_SLAVE_SET_START_COND_USICR;
 4ca:	88 ea       	ldi	r24, 0xA8	; 168
 4cc:	8d b9       	out	0x0d, r24	; 13
				USISR = USI_SLAVE_SET_START_COND_USISR;
 4ce:	80 e7       	ldi	r24, 0x70	; 112
 4d0:	8e b9       	out	0x0e, r24	; 14
				return;
 4d2:	44 c0       	rjmp	.+136    	; 0x55c <__vector_16+0x11a>
		//  enable data transmission in the next 8 clocks.  Set to wait 8      //
		//  clocks and proceed to wait for ACK.                                //
		/////////////////////////////////////////////////////////////////////////
		case USI_SLAVE_SEND_DATA:

			if(USI_Slave_internal_address <= USI_SLAVE_REGISTER_COUNT)
 4d4:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <USI_Slave_internal_address>
 4d8:	e9 30       	cpi	r30, 0x09	; 9
 4da:	58 f4       	brcc	.+22     	; 0x4f2 <__vector_16+0xb0>
			{
				USIDR = *(USI_Slave_register_buffer[USI_Slave_internal_address]);
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	ee 0f       	add	r30, r30
 4e0:	ff 1f       	adc	r31, r31
 4e2:	e4 59       	subi	r30, 0x94	; 148
 4e4:	ff 4f       	sbci	r31, 0xFF	; 255
 4e6:	01 90       	ld	r0, Z+
 4e8:	f0 81       	ld	r31, Z
 4ea:	e0 2d       	mov	r30, r0
 4ec:	80 81       	ld	r24, Z
 4ee:	8f b9       	out	0x0f, r24	; 15
 4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <__vector_16+0xb2>
			}
			else
			{
				USIDR = 0x00;
 4f2:	1f b8       	out	0x0f, r1	; 15
			}
			USI_Slave_internal_address++;
 4f4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <USI_Slave_internal_address>
 4f8:	8f 5f       	subi	r24, 0xFF	; 255
 4fa:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <USI_Slave_internal_address>


			USI_I2C_Slave_State = USI_SLAVE_SEND_DATA_ACK_WAIT;
 4fe:	82 e0       	ldi	r24, 0x02	; 2
 500:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <USI_I2C_Slave_State>


			//To send data, DDR for SDA must be 1 (Output) and PORT for SDA
			//must also be 1 (line drives low on USIDR MSB = 0 or PORT = 0)

			USI_SET_SDA_OUTPUT();
 504:	bd 9a       	sbi	0x17, 5	; 23
			PORT_USI |= (1 << PORT_USI_SDA);
 506:	c5 9a       	sbi	0x18, 5	; 24

			USISR = USI_SLAVE_COUNT_BYTE_USISR;
 508:	80 e7       	ldi	r24, 0x70	; 112
 50a:	8e b9       	out	0x0e, r24	; 14

			break;
 50c:	27 c0       	rjmp	.+78     	; 0x55c <__vector_16+0x11a>
		//  Prepares to wait 8 clocks to receive a data byte from the master.  //
		/////////////////////////////////////////////////////////////////////////

		case USI_SLAVE_RECV_DATA_WAIT:

			USI_I2C_Slave_State = USI_SLAVE_RECV_DATA_ACK_SEND;
 50e:	85 e0       	ldi	r24, 0x05	; 5
 510:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <USI_I2C_Slave_State>

			USI_SET_SDA_INPUT();
 514:	bd 98       	cbi	0x17, 5	; 23

			USISR = USI_SLAVE_COUNT_BYTE_USISR;
 516:	80 e7       	ldi	r24, 0x70	; 112
 518:	8e b9       	out	0x0e, r24	; 14

			break;
 51a:	20 c0       	rjmp	.+64     	; 0x55c <__vector_16+0x11a>

		case USI_SLAVE_RECV_DATA_ACK_SEND:



			USI_I2C_Slave_State = USI_SLAVE_RECV_DATA_WAIT;
 51c:	84 e0       	ldi	r24, 0x04	; 4
 51e:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <USI_I2C_Slave_State>

			
			if(USI_Slave_internal_address_set == 0)
 522:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <USI_Slave_internal_address_set>
 526:	81 11       	cpse	r24, r1
 528:	07 c0       	rjmp	.+14     	; 0x538 <__vector_16+0xf6>
			{
				USI_Slave_internal_address = USIDR;
 52a:	8f b1       	in	r24, 0x0f	; 15
 52c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <USI_Slave_internal_address>
				USI_Slave_internal_address_set = 1;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <USI_Slave_internal_address_set>
 536:	0e c0       	rjmp	.+28     	; 0x554 <__vector_16+0x112>
			}
			else if(USI_Slave_internal_address <= USI_SLAVE_REGISTER_COUNT)
 538:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <USI_Slave_internal_address>
 53c:	e9 30       	cpi	r30, 0x09	; 9
 53e:	50 f4       	brcc	.+20     	; 0x554 <__vector_16+0x112>
			{
				*(USI_Slave_register_buffer[USI_Slave_internal_address]) = USIDR;
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	ee 0f       	add	r30, r30
 544:	ff 1f       	adc	r31, r31
 546:	e4 59       	subi	r30, 0x94	; 148
 548:	ff 4f       	sbci	r31, 0xFF	; 255
 54a:	01 90       	ld	r0, Z+
 54c:	f0 81       	ld	r31, Z
 54e:	e0 2d       	mov	r30, r0
 550:	8f b1       	in	r24, 0x0f	; 15
 552:	80 83       	st	Z, r24
			}
			
			USIDR = 0;
 554:	1f b8       	out	0x0f, r1	; 15

			USI_SET_SDA_OUTPUT();
 556:	bd 9a       	sbi	0x17, 5	; 23

			USISR = USI_SLAVE_COUNT_ACK_USISR;
 558:	8e e7       	ldi	r24, 0x7E	; 126
 55a:	8e b9       	out	0x0e, r24	; 14

			break;

	}

}
 55c:	ff 91       	pop	r31
 55e:	ef 91       	pop	r30
 560:	9f 91       	pop	r25
 562:	8f 91       	pop	r24
 564:	0f 90       	pop	r0
 566:	0f be       	out	0x3f, r0	; 63
 568:	0f 90       	pop	r0
 56a:	1f 90       	pop	r1
 56c:	18 95       	reti

0000056e <_exit>:
 56e:	f8 94       	cli

00000570 <__stop_program>:
 570:	ff cf       	rjmp	.-2      	; 0x570 <__stop_program>
