
NixieTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002c6  0000035a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080006a  0080006a  00000364  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000425  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001af  00000000  00000000  00000865  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042d  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00000e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000026a  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008f  00000000  00000000  00001166  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000011f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	44 c1       	rjmp	.+648    	; 0x29c <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ec       	ldi	r30, 0xC6	; 198
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 37       	cpi	r26, 0x76	; 118
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	22 d0       	rcall	.+68     	; 0x9e <main>
  5a:	33 c1       	rjmp	.+614    	; 0x2c2 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <Port_Init>:
		Nixie_Timer -= Nixie_Timer && Blanking_Timer==0 && Timers.Pulse_100us;
    }//While 1
}//main

void Port_Init(void){
	DDRD = 255;
  5e:	8f ef       	ldi	r24, 0xFF	; 255
  60:	81 bb       	out	0x11, r24	; 17
	//DDRD |= (1<<BCD1_0)|(1<<BCD1_1)|(1<<BCD1_2)|(1<<BCD1_4);
	DDRB |= (1<<Nixie1_2)|(1<<Nixie3_4)|(1<<Nixie5_6);
  62:	87 b3       	in	r24, 0x17	; 23
  64:	87 60       	ori	r24, 0x07	; 7
  66:	87 bb       	out	0x17, r24	; 23
  68:	08 95       	ret

0000006a <Power_Init>:
}

void Power_Init(void){
	//The required voltage for the Nixies is created by a boost converter. From the website https://learn.adafruit.com/diy-boost-calc/the-calculator I calculated that
	// when you use a 330uH coil you have to generate a 60KHZ block wave to get 170~190V.
	TCCR2 |= (1<<WGM21)|(0<<WGM20)|(0<<CS22)|(0<<CS21)|(1<<CS20);//TCT mode, no prescaler
  6a:	85 b5       	in	r24, 0x25	; 37
  6c:	89 60       	ori	r24, 0x09	; 9
  6e:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0x42;//8MHZ/66(0x42) = ~121.2121/2 = a block wave of ~60.6060KHZ
  70:	82 e4       	ldi	r24, 0x42	; 66
  72:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= (0<<COM21)|(1<<COM20);//Toggle PB3(OC2)
  74:	85 b5       	in	r24, 0x25	; 37
  76:	80 61       	ori	r24, 0x10	; 16
  78:	85 bd       	out	0x25, r24	; 37
	DDRB |= (1<<Power);
  7a:	bb 9a       	sbi	0x17, 3	; 23
	//Enable the analogue input
	ADMUX |= (1<<ADLAR)|(0<<REFS1)|(0<<REFS0)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0);//ADLAR= 1 so we only need to get ADCH, reference = AREF(5V), PC0 is connected.
  7c:	3d 9a       	sbi	0x07, 5	; 7
	ADCSRA |= (1<<ADEN)|(1<<ADSC)|(1<<ADFR)|(1<<ADPS2)|(1<<ADPS1)|(0<<ADPS0);//Free running mode, 8MHZ/64=125KHZ this is well below the maximum of 200KHZ
  7e:	86 b1       	in	r24, 0x06	; 6
  80:	86 6e       	ori	r24, 0xE6	; 230
  82:	86 b9       	out	0x06, r24	; 6
  84:	08 95       	ret

00000086 <Power_Loop>:
}//Power_Init

void Power_Loop(void){
	if (ADCH>0x0F)//if the voltage is to high
  86:	85 b1       	in	r24, 0x05	; 5
  88:	80 31       	cpi	r24, 0x10	; 16
  8a:	28 f0       	brcs	.+10     	; 0x96 <Power_Loop+0x10>
	{
		TCCR2 &= ~((1<<COM21)|(1<<COM20));//Disconnect PB3(OC2)
  8c:	85 b5       	in	r24, 0x25	; 37
  8e:	8f 7c       	andi	r24, 0xCF	; 207
  90:	85 bd       	out	0x25, r24	; 37
		PORTB &= ~(1<<Power);//And make sure the pin is off
  92:	c3 98       	cbi	0x18, 3	; 24
  94:	08 95       	ret
	}
	else{
		//DDRB |= (1<<Power);
		TCCR2 |= (0<<COM21)|(1<<COM20);//Else toggle PB3(OC2)
  96:	85 b5       	in	r24, 0x25	; 37
  98:	80 61       	ori	r24, 0x10	; 16
  9a:	85 bd       	out	0x25, r24	; 37
  9c:	08 95       	ret

0000009e <main>:
uint8_t Nixie_Timer=MultiplexTime;
uint8_t Blanking_Timer=Blanking_Time;
uint8_t Nixie_Tube[7]={8,4,6,9,2,0,1};

int main(void){
	Port_Init();
  9e:	df df       	rcall	.-66     	; 0x5e <Port_Init>
	Timer_Init();
  a0:	b1 d0       	rcall	.+354    	; 0x204 <Timer_Init>
	Power_Init();
  a2:	e3 df       	rcall	.-58     	; 0x6a <Power_Init>
	sei();
  a4:	78 94       	sei
					PORTB |= (1<<Nixie5_6);
				}
				break;
			}
		}
		if (Timers.Pulse_1s){
  a6:	ca e6       	ldi	r28, 0x6A	; 106
  a8:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
		}
		//PORTD = Nixie_1+(Nixie_2*16);
		Blanking_Timer -= Blanking_Timer && Timers.Pulse_100us;
		Nixie_Timer -= Nixie_Timer && Blanking_Timer==0 && Timers.Pulse_100us;
  aa:	88 24       	eor	r8, r8
  ac:	83 94       	inc	r8
  ae:	71 2c       	mov	r7, r1
  b0:	d1 2c       	mov	r13, r1
  b2:	0f 2e       	mov	r0, r31
  b4:	f6 e6       	ldi	r31, 0x66	; 102
  b6:	ef 2e       	mov	r14, r31
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	ff 2e       	mov	r15, r31
  bc:	f0 2d       	mov	r31, r0
			}
		}
		if(Blanking_Timer==0){
			switch(Nixie_Count){
				case 1:{
					PORTD = Nixie_Tube[1]+(Nixie_Tube[2]*16);
  be:	00 e6       	ldi	r16, 0x60	; 96
  c0:	10 e0       	ldi	r17, 0x00	; 0

    while (1){
		Timer_loop();
		Power_Loop();
		if (Nixie_Timer==0){
			Nixie_Timer=MultiplexTime;
  c2:	0f 2e       	mov	r0, r31
  c4:	f3 e2       	ldi	r31, 0x23	; 35
  c6:	af 2e       	mov	r10, r31
  c8:	f0 2d       	mov	r31, r0
			Blanking_Timer=Blanking_Time;
  ca:	0f 2e       	mov	r0, r31
  cc:	fd e0       	ldi	r31, 0x0D	; 13
  ce:	bf 2e       	mov	r11, r31
  d0:	f0 2d       	mov	r31, r0
			PORTB &= ~((1<<Nixie1_2)|(1<<Nixie3_4)|(1<<Nixie5_6));
			PORTD = 255;
  d2:	cc 24       	eor	r12, r12
  d4:	ca 94       	dec	r12
			Nixie_Count++;
			if (Nixie_Count>3){
				Nixie_Count=1;
  d6:	99 24       	eor	r9, r9
  d8:	93 94       	inc	r9
	Timer_Init();
	Power_Init();
	sei();

    while (1){
		Timer_loop();
  da:	a5 d0       	rcall	.+330    	; 0x226 <Timer_loop>
		Power_Loop();
  dc:	d4 df       	rcall	.-88     	; 0x86 <Power_Loop>
		if (Nixie_Timer==0){
  de:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Nixie_Timer>
  e2:	81 11       	cpse	r24, r1
  e4:	17 c0       	rjmp	.+46     	; 0x114 <main+0x76>
			Nixie_Timer=MultiplexTime;
  e6:	a0 92 68 00 	sts	0x0068, r10	; 0x800068 <Nixie_Timer>
			Blanking_Timer=Blanking_Time;
  ea:	b0 92 67 00 	sts	0x0067, r11	; 0x800067 <Blanking_Timer>
			PORTB &= ~((1<<Nixie1_2)|(1<<Nixie3_4)|(1<<Nixie5_6));
  ee:	88 b3       	in	r24, 0x18	; 24
  f0:	88 7f       	andi	r24, 0xF8	; 248
  f2:	88 bb       	out	0x18, r24	; 24
			PORTD = 255;
  f4:	c2 ba       	out	0x12, r12	; 18
			Nixie_Count++;
  f6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Nixie_Count>
  fa:	8f 5f       	subi	r24, 0xFF	; 255
			if (Nixie_Count>3){
  fc:	84 30       	cpi	r24, 0x04	; 4
  fe:	18 f4       	brcc	.+6      	; 0x106 <main+0x68>
		if (Nixie_Timer==0){
			Nixie_Timer=MultiplexTime;
			Blanking_Timer=Blanking_Time;
			PORTB &= ~((1<<Nixie1_2)|(1<<Nixie3_4)|(1<<Nixie5_6));
			PORTD = 255;
			Nixie_Count++;
 100:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Nixie_Count>
 104:	07 c0       	rjmp	.+14     	; 0x114 <main+0x76>
			if (Nixie_Count>3){
				Nixie_Count=1;
 106:	90 92 69 00 	sts	0x0069, r9	; 0x800069 <Nixie_Count>
					//PORTB |= (1<<Nixie5_6);
				}
				break;
			}
		}
		if(Blanking_Timer==0){
 10a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Blanking_Timer>
 10e:	81 11       	cpse	r24, r1
 110:	60 c0       	rjmp	.+192    	; 0x1d2 <main+0x134>
 112:	0c c0       	rjmp	.+24     	; 0x12c <main+0x8e>
 114:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Blanking_Timer>
 118:	81 11       	cpse	r24, r1
 11a:	70 c0       	rjmp	.+224    	; 0x1fc <main+0x15e>
			switch(Nixie_Count){
 11c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Nixie_Count>
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	71 f0       	breq	.+28     	; 0x140 <main+0xa2>
 124:	83 30       	cpi	r24, 0x03	; 3
 126:	b1 f0       	breq	.+44     	; 0x154 <main+0xb6>
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	f1 f4       	brne	.+60     	; 0x168 <main+0xca>
				case 1:{
					PORTD = Nixie_Tube[1]+(Nixie_Tube[2]*16);
 12c:	f8 01       	movw	r30, r16
 12e:	92 81       	ldd	r25, Z+2	; 0x02
 130:	81 81       	ldd	r24, Z+1	; 0x01
 132:	f0 e1       	ldi	r31, 0x10	; 16
 134:	9f 9f       	mul	r25, r31
 136:	80 0d       	add	r24, r0
 138:	11 24       	eor	r1, r1
 13a:	82 bb       	out	0x12, r24	; 18
					PORTB |= (1<<Nixie1_2);
 13c:	c0 9a       	sbi	0x18, 0	; 24
				}
				break;
 13e:	42 c0       	rjmp	.+132    	; 0x1c4 <main+0x126>
				
				case 2:{
					PORTD = Nixie_Tube[3]+(Nixie_Tube[4]*16);
 140:	f8 01       	movw	r30, r16
 142:	94 81       	ldd	r25, Z+4	; 0x04
 144:	83 81       	ldd	r24, Z+3	; 0x03
 146:	f0 e1       	ldi	r31, 0x10	; 16
 148:	9f 9f       	mul	r25, r31
 14a:	80 0d       	add	r24, r0
 14c:	11 24       	eor	r1, r1
 14e:	82 bb       	out	0x12, r24	; 18
					PORTB |= (1<<Nixie3_4);
 150:	c1 9a       	sbi	0x18, 1	; 24
				}
				break;
 152:	38 c0       	rjmp	.+112    	; 0x1c4 <main+0x126>
				
				case 3:{
					PORTD = Nixie_Tube[5]+(Nixie_Tube[6]*16);
 154:	f8 01       	movw	r30, r16
 156:	96 81       	ldd	r25, Z+6	; 0x06
 158:	85 81       	ldd	r24, Z+5	; 0x05
 15a:	f0 e1       	ldi	r31, 0x10	; 16
 15c:	9f 9f       	mul	r25, r31
 15e:	80 0d       	add	r24, r0
 160:	11 24       	eor	r1, r1
 162:	82 bb       	out	0x12, r24	; 18
					PORTB |= (1<<Nixie5_6);
 164:	c2 9a       	sbi	0x18, 2	; 24
				}
				break;
 166:	2e c0       	rjmp	.+92     	; 0x1c4 <main+0x126>
			}
		}
		if (Timers.Pulse_1s){
 168:	8c 81       	ldd	r24, Y+4	; 0x04
 16a:	88 23       	and	r24, r24
 16c:	69 f0       	breq	.+26     	; 0x188 <main+0xea>
 16e:	e0 e6       	ldi	r30, 0x60	; 96
 170:	f0 e0       	ldi	r31, 0x00	; 0
			for (uint8_t x=1; x<7; x++){
				Nixie_Tube[x]++;
 172:	81 81       	ldd	r24, Z+1	; 0x01
 174:	8f 5f       	subi	r24, 0xFF	; 255
				if (Nixie_Tube[x]>9){
 176:	8a 30       	cpi	r24, 0x0A	; 10
 178:	10 f4       	brcc	.+4      	; 0x17e <main+0xe0>
				break;
			}
		}
		if (Timers.Pulse_1s){
			for (uint8_t x=1; x<7; x++){
				Nixie_Tube[x]++;
 17a:	81 83       	std	Z+1, r24	; 0x01
 17c:	01 c0       	rjmp	.+2      	; 0x180 <main+0xe2>
				if (Nixie_Tube[x]>9){
					Nixie_Tube[x]=0;
 17e:	11 82       	std	Z+1, r1	; 0x01
 180:	31 96       	adiw	r30, 0x01	; 1
				}
				break;
			}
		}
		if (Timers.Pulse_1s){
			for (uint8_t x=1; x<7; x++){
 182:	ee 15       	cp	r30, r14
 184:	ff 05       	cpc	r31, r15
 186:	a9 f7       	brne	.-22     	; 0x172 <main+0xd4>
					Nixie_Tube[x]=0;
				}
			}
		}
		//PORTD = Nixie_1+(Nixie_2*16);
		Blanking_Timer -= Blanking_Timer && Timers.Pulse_100us;
 188:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Blanking_Timer>
 18c:	88 23       	and	r24, r24
 18e:	29 f1       	breq	.+74     	; 0x1da <main+0x13c>
 190:	98 81       	ld	r25, Y
 192:	99 23       	and	r25, r25
 194:	51 f1       	breq	.+84     	; 0x1ea <main+0x14c>
 196:	9f ef       	ldi	r25, 0xFF	; 255
 198:	98 0f       	add	r25, r24
 19a:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <Blanking_Timer>
		Nixie_Timer -= Nixie_Timer && Blanking_Timer==0 && Timers.Pulse_100us;
 19e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Nixie_Timer>
 1a2:	88 23       	and	r24, r24
 1a4:	41 f0       	breq	.+16     	; 0x1b6 <main+0x118>
 1a6:	91 11       	cpse	r25, r1
 1a8:	08 c0       	rjmp	.+16     	; 0x1ba <main+0x11c>
 1aa:	98 2d       	mov	r25, r8
 1ac:	28 81       	ld	r18, Y
 1ae:	21 11       	cpse	r18, r1
 1b0:	05 c0       	rjmp	.+10     	; 0x1bc <main+0x11e>
 1b2:	97 2d       	mov	r25, r7
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <main+0x11e>
 1b6:	9d 2d       	mov	r25, r13
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <main+0x11e>
 1ba:	9d 2d       	mov	r25, r13
 1bc:	89 1b       	sub	r24, r25
 1be:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <Nixie_Timer>
    }//While 1
 1c2:	8b cf       	rjmp	.-234    	; 0xda <main+0x3c>
					PORTB |= (1<<Nixie5_6);
				}
				break;
			}
		}
		if (Timers.Pulse_1s){
 1c4:	8c 81       	ldd	r24, Y+4	; 0x04
 1c6:	81 11       	cpse	r24, r1
 1c8:	d2 cf       	rjmp	.-92     	; 0x16e <main+0xd0>
 1ca:	de cf       	rjmp	.-68     	; 0x188 <main+0xea>
					Nixie_Tube[x]=0;
				}
			}
		}
		//PORTD = Nixie_1+(Nixie_2*16);
		Blanking_Timer -= Blanking_Timer && Timers.Pulse_100us;
 1cc:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Blanking_Timer>
 1d0:	df cf       	rjmp	.-66     	; 0x190 <main+0xf2>
					PORTB |= (1<<Nixie5_6);
				}
				break;
			}
		}
		if (Timers.Pulse_1s){
 1d2:	8c 81       	ldd	r24, Y+4	; 0x04
 1d4:	81 11       	cpse	r24, r1
 1d6:	cb cf       	rjmp	.-106    	; 0x16e <main+0xd0>
 1d8:	f9 cf       	rjmp	.-14     	; 0x1cc <main+0x12e>
					Nixie_Tube[x]=0;
				}
			}
		}
		//PORTD = Nixie_1+(Nixie_2*16);
		Blanking_Timer -= Blanking_Timer && Timers.Pulse_100us;
 1da:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Blanking_Timer>
		Nixie_Timer -= Nixie_Timer && Blanking_Timer==0 && Timers.Pulse_100us;
 1de:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Nixie_Timer>
 1e2:	81 11       	cpse	r24, r1
 1e4:	e2 cf       	rjmp	.-60     	; 0x1aa <main+0x10c>
 1e6:	9d 2d       	mov	r25, r13
 1e8:	e9 cf       	rjmp	.-46     	; 0x1bc <main+0x11e>
					Nixie_Tube[x]=0;
				}
			}
		}
		//PORTD = Nixie_1+(Nixie_2*16);
		Blanking_Timer -= Blanking_Timer && Timers.Pulse_100us;
 1ea:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Blanking_Timer>
		Nixie_Timer -= Nixie_Timer && Blanking_Timer==0 && Timers.Pulse_100us;
 1ee:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Nixie_Timer>
 1f2:	9d 2d       	mov	r25, r13
 1f4:	e3 cf       	rjmp	.-58     	; 0x1bc <main+0x11e>
					Nixie_Tube[x]=0;
				}
			}
		}
		//PORTD = Nixie_1+(Nixie_2*16);
		Blanking_Timer -= Blanking_Timer && Timers.Pulse_100us;
 1f6:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Blanking_Timer>
 1fa:	ca cf       	rjmp	.-108    	; 0x190 <main+0xf2>
					PORTB |= (1<<Nixie5_6);
				}
				break;
			}
		}
		if (Timers.Pulse_1s){
 1fc:	8c 81       	ldd	r24, Y+4	; 0x04
 1fe:	81 11       	cpse	r24, r1
 200:	b6 cf       	rjmp	.-148    	; 0x16e <main+0xd0>
 202:	f9 cf       	rjmp	.-14     	; 0x1f6 <main+0x158>

00000204 <Timer_Init>:
}

void Timer_Init(void)
{
	//TCCR0	|=	(1 << WGM01);//CTC mode
	TCCR0 	|= (0 << CS02 )|(1 << CS01)|(0<<CS00);//CLK/8
 204:	83 b7       	in	r24, 0x33	; 51
 206:	82 60       	ori	r24, 0x02	; 2
 208:	83 bf       	out	0x33, r24	; 51
	TIMSK 	|= (1 << TOIE0);//Enable Compare A interrupt
 20a:	89 b7       	in	r24, 0x39	; 57
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	89 bf       	out	0x39, r24	; 57
	TCNT0	=	100; //Overflow value
 210:	84 e6       	ldi	r24, 0x64	; 100
 212:	82 bf       	out	0x32, r24	; 50
 214:	08 95       	ret

00000216 <Pulse_reset>:
}

void Pulse_reset(void)
{
	Timers.Pulse_100us = 0;
 216:	ea e6       	ldi	r30, 0x6A	; 106
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	10 82       	st	Z, r1
	Timers.Pulse_1ms = 0;
 21c:	11 82       	std	Z+1, r1	; 0x01
	Timers.Pulse_10ms = 0;
 21e:	12 82       	std	Z+2, r1	; 0x02
	Timers.Pulse_100ms = 0;
 220:	13 82       	std	Z+3, r1	; 0x03
	Timers.Pulse_1s = 0;
 222:	14 82       	std	Z+4, r1	; 0x04
 224:	08 95       	ret

00000226 <Timer_loop>:


void Timer_loop (void)
{
	//First reset the timers
	Pulse_reset();
 226:	f7 df       	rcall	.-18     	; 0x216 <Pulse_reset>
	
	if(Tim0_FL > 0)
 228:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <Tim0_FL>
 22c:	88 23       	and	r24, r24
 22e:	a9 f1       	breq	.+106    	; 0x29a <Timer_loop+0x74>
	{
		Tim0_FL = 0;
 230:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Tim0_FL>
		Timers.Pulse_100us=1;
 234:	ea e6       	ldi	r30, 0x6A	; 106
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	80 83       	st	Z, r24
		Timers.Count_1ms++;
 23c:	55 81       	ldd	r21, Z+5	; 0x05
 23e:	5f 5f       	subi	r21, 0xFF	; 255
 240:	55 83       	std	Z+5, r21	; 0x05
		Timers.Count_10ms++;
 242:	46 81       	ldd	r20, Z+6	; 0x06
 244:	4f 5f       	subi	r20, 0xFF	; 255
 246:	46 83       	std	Z+6, r20	; 0x06
		Timers.Count_100ms++;
 248:	27 81       	ldd	r18, Z+7	; 0x07
 24a:	30 85       	ldd	r19, Z+8	; 0x08
 24c:	2f 5f       	subi	r18, 0xFF	; 255
 24e:	3f 4f       	sbci	r19, 0xFF	; 255
 250:	30 87       	std	Z+8, r19	; 0x08
 252:	27 83       	std	Z+7, r18	; 0x07
		Timers.Count_1s++;
 254:	81 85       	ldd	r24, Z+9	; 0x09
 256:	92 85       	ldd	r25, Z+10	; 0x0a
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	92 87       	std	Z+10, r25	; 0x0a
 25c:	81 87       	std	Z+9, r24	; 0x09

		if (Timers.Count_1ms > 9){
 25e:	5a 30       	cpi	r21, 0x0A	; 10
 260:	18 f0       	brcs	.+6      	; 0x268 <Timer_loop+0x42>
			Timers.Count_1ms=0;
 262:	15 82       	std	Z+5, r1	; 0x05
			Timers.Pulse_1ms=1;
 264:	51 e0       	ldi	r21, 0x01	; 1
 266:	51 83       	std	Z+1, r21	; 0x01
		}
		if(Timers.Count_10ms > 99)
 268:	44 36       	cpi	r20, 0x64	; 100
 26a:	28 f0       	brcs	.+10     	; 0x276 <Timer_loop+0x50>
		{
			Timers.Count_10ms = 0;
 26c:	ea e6       	ldi	r30, 0x6A	; 106
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	16 82       	std	Z+6, r1	; 0x06
			Timers.Pulse_10ms = 1;
 272:	41 e0       	ldi	r20, 0x01	; 1
 274:	42 83       	std	Z+2, r20	; 0x02
		}
		if(Timers.Count_100ms > 999)
 276:	28 3e       	cpi	r18, 0xE8	; 232
 278:	33 40       	sbci	r19, 0x03	; 3
 27a:	30 f0       	brcs	.+12     	; 0x288 <Timer_loop+0x62>
		{
			Timers.Count_100ms = 0;
 27c:	ea e6       	ldi	r30, 0x6A	; 106
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	10 86       	std	Z+8, r1	; 0x08
 282:	17 82       	std	Z+7, r1	; 0x07
			Timers.Pulse_100ms = 1;
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	23 83       	std	Z+3, r18	; 0x03
		}
		if(Timers.Count_1s > 9999)
 288:	80 31       	cpi	r24, 0x10	; 16
 28a:	97 42       	sbci	r25, 0x27	; 39
 28c:	30 f0       	brcs	.+12     	; 0x29a <Timer_loop+0x74>
		{
			Timers.Count_1s = 0;
 28e:	ea e6       	ldi	r30, 0x6A	; 106
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	12 86       	std	Z+10, r1	; 0x0a
 294:	11 86       	std	Z+9, r1	; 0x09
			Timers.Pulse_1s = 1;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	84 83       	std	Z+4, r24	; 0x04
 29a:	08 95       	ret

0000029c <__vector_9>:
	Timers.Pulse_10ms = 0;
	Timers.Pulse_100ms = 0;
	Timers.Pulse_1s = 0;
}

ISR(TIMER0_OVF_vect) {
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	8f 93       	push	r24
	TCNT0=100; //Overflow value
 2a8:	84 e6       	ldi	r24, 0x64	; 100
 2aa:	82 bf       	out	0x32, r24	; 50
	Tim0_FL++;
 2ac:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <Tim0_FL>
 2b0:	8f 5f       	subi	r24, 0xFF	; 255
 2b2:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <Tim0_FL>
}
 2b6:	8f 91       	pop	r24
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
