
NixieClock_m328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000307a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003006  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000116  00800100  00800100  0000307a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000307a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  000030ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038c1  00000000  00000000  0000348c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000127f  00000000  00000000  00006d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003233  00000000  00000000  00007fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000072c  00000000  00000000  0000b200  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001233  00000000  00000000  0000b92c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012b3  00000000  00000000  0000cb5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0000de12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__ctors_end>
       4:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
       8:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
       c:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      10:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      14:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      18:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      1c:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      20:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      24:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <__vector_9>
      28:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      2c:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <__vector_11>
      30:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      34:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      38:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      3c:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      40:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      44:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      48:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      4c:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      50:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      54:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      58:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      5c:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      60:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      64:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__bad_interrupt>
      68:	b7 02       	muls	r27, r23
      6a:	ce 02       	muls	r28, r30
      6c:	e4 02       	muls	r30, r20
      6e:	38 03       	fmul	r19, r16
      70:	7c 03       	fmul	r23, r20
      72:	ee 03       	fmulsu	r22, r22
      74:	eb 05       	cpc	r30, r11
      76:	eb 05       	cpc	r30, r11
      78:	eb 05       	cpc	r30, r11
      7a:	eb 05       	cpc	r30, r11
      7c:	eb 05       	cpc	r30, r11
      7e:	37 04       	cpc	r3, r7
      80:	92 04       	cpc	r9, r2
      82:	cb 04       	cpc	r12, r11
      84:	34 05       	cpc	r19, r4
      86:	eb 05       	cpc	r30, r11
      88:	eb 05       	cpc	r30, r11
      8a:	eb 05       	cpc	r30, r11
      8c:	eb 05       	cpc	r30, r11
      8e:	eb 05       	cpc	r30, r11
      90:	eb 05       	cpc	r30, r11
      92:	71 05       	cpc	r23, r1
      94:	a0 05       	cpc	r26, r0
      96:	eb 05       	cpc	r30, r11
      98:	eb 05       	cpc	r30, r11
      9a:	eb 05       	cpc	r30, r11
      9c:	eb 05       	cpc	r30, r11
      9e:	eb 05       	cpc	r30, r11
      a0:	eb 05       	cpc	r30, r11
      a2:	eb 05       	cpc	r30, r11
      a4:	eb 05       	cpc	r30, r11
      a6:	eb 05       	cpc	r30, r11
      a8:	eb 05       	cpc	r30, r11
      aa:	eb 05       	cpc	r30, r11
      ac:	eb 05       	cpc	r30, r11
      ae:	eb 05       	cpc	r30, r11
      b0:	eb 05       	cpc	r30, r11
      b2:	eb 05       	cpc	r30, r11
      b4:	eb 05       	cpc	r30, r11
      b6:	eb 05       	cpc	r30, r11
      b8:	eb 05       	cpc	r30, r11
      ba:	eb 05       	cpc	r30, r11
      bc:	eb 05       	cpc	r30, r11
      be:	eb 05       	cpc	r30, r11
      c0:	eb 05       	cpc	r30, r11
      c2:	eb 05       	cpc	r30, r11
      c4:	eb 05       	cpc	r30, r11
      c6:	eb 05       	cpc	r30, r11
      c8:	eb 05       	cpc	r30, r11
      ca:	eb 05       	cpc	r30, r11
      cc:	eb 05       	cpc	r30, r11
      ce:	eb 05       	cpc	r30, r11
      d0:	eb 05       	cpc	r30, r11
      d2:	eb 05       	cpc	r30, r11
      d4:	eb 05       	cpc	r30, r11
      d6:	eb 05       	cpc	r30, r11
      d8:	eb 05       	cpc	r30, r11
      da:	eb 05       	cpc	r30, r11
      dc:	eb 05       	cpc	r30, r11
      de:	eb 05       	cpc	r30, r11
      e0:	eb 05       	cpc	r30, r11
      e2:	eb 05       	cpc	r30, r11
      e4:	eb 05       	cpc	r30, r11
      e6:	eb 05       	cpc	r30, r11
      e8:	eb 05       	cpc	r30, r11
      ea:	eb 05       	cpc	r30, r11
      ec:	eb 05       	cpc	r30, r11
      ee:	eb 05       	cpc	r30, r11
      f0:	eb 05       	cpc	r30, r11
      f2:	eb 05       	cpc	r30, r11
      f4:	eb 05       	cpc	r30, r11
      f6:	eb 05       	cpc	r30, r11
      f8:	eb 05       	cpc	r30, r11
      fa:	eb 05       	cpc	r30, r11
      fc:	eb 05       	cpc	r30, r11
      fe:	eb 05       	cpc	r30, r11
     100:	eb 05       	cpc	r30, r11
     102:	eb 05       	cpc	r30, r11
     104:	eb 05       	cpc	r30, r11
     106:	eb 05       	cpc	r30, r11
     108:	eb 05       	cpc	r30, r11
     10a:	eb 05       	cpc	r30, r11
     10c:	eb 05       	cpc	r30, r11
     10e:	eb 05       	cpc	r30, r11
     110:	eb 05       	cpc	r30, r11
     112:	eb 05       	cpc	r30, r11
     114:	eb 05       	cpc	r30, r11
     116:	eb 05       	cpc	r30, r11
     118:	eb 05       	cpc	r30, r11
     11a:	eb 05       	cpc	r30, r11
     11c:	eb 05       	cpc	r30, r11
     11e:	eb 05       	cpc	r30, r11
     120:	eb 05       	cpc	r30, r11
     122:	eb 05       	cpc	r30, r11
     124:	eb 05       	cpc	r30, r11
     126:	eb 05       	cpc	r30, r11
     128:	eb 05       	cpc	r30, r11
     12a:	eb 05       	cpc	r30, r11
     12c:	eb 05       	cpc	r30, r11
     12e:	ce 05       	cpc	r28, r14
     130:	48 07       	cpc	r20, r24
     132:	86 07       	cpc	r24, r22
     134:	99 07       	cpc	r25, r25
     136:	a0 07       	cpc	r26, r16
     138:	b8 07       	cpc	r27, r24
     13a:	ec 07       	cpc	r30, r28
     13c:	24 09       	sbc	r18, r4
     13e:	24 09       	sbc	r18, r4
     140:	24 09       	sbc	r18, r4
     142:	24 09       	sbc	r18, r4
     144:	2d 08       	sbc	r2, r13
     146:	6d 08       	sbc	r6, r13
     148:	ab 08       	sbc	r10, r11
     14a:	d7 08       	sbc	r13, r7
     14c:	24 09       	sbc	r18, r4
     14e:	24 09       	sbc	r18, r4
     150:	24 09       	sbc	r18, r4
     152:	24 09       	sbc	r18, r4
     154:	24 09       	sbc	r18, r4
     156:	24 09       	sbc	r18, r4
     158:	24 09       	sbc	r18, r4
     15a:	24 09       	sbc	r18, r4
     15c:	24 09       	sbc	r18, r4
     15e:	24 09       	sbc	r18, r4
     160:	24 09       	sbc	r18, r4
     162:	24 09       	sbc	r18, r4
     164:	24 09       	sbc	r18, r4
     166:	24 09       	sbc	r18, r4
     168:	24 09       	sbc	r18, r4
     16a:	24 09       	sbc	r18, r4
     16c:	24 09       	sbc	r18, r4
     16e:	24 09       	sbc	r18, r4
     170:	24 09       	sbc	r18, r4
     172:	24 09       	sbc	r18, r4
     174:	24 09       	sbc	r18, r4
     176:	24 09       	sbc	r18, r4
     178:	24 09       	sbc	r18, r4
     17a:	24 09       	sbc	r18, r4
     17c:	24 09       	sbc	r18, r4
     17e:	24 09       	sbc	r18, r4
     180:	24 09       	sbc	r18, r4
     182:	24 09       	sbc	r18, r4
     184:	24 09       	sbc	r18, r4
     186:	24 09       	sbc	r18, r4
     188:	24 09       	sbc	r18, r4
     18a:	24 09       	sbc	r18, r4
     18c:	24 09       	sbc	r18, r4
     18e:	24 09       	sbc	r18, r4
     190:	24 09       	sbc	r18, r4
     192:	24 09       	sbc	r18, r4
     194:	24 09       	sbc	r18, r4
     196:	24 09       	sbc	r18, r4
     198:	24 09       	sbc	r18, r4
     19a:	24 09       	sbc	r18, r4
     19c:	24 09       	sbc	r18, r4
     19e:	24 09       	sbc	r18, r4
     1a0:	24 09       	sbc	r18, r4
     1a2:	24 09       	sbc	r18, r4
     1a4:	24 09       	sbc	r18, r4
     1a6:	24 09       	sbc	r18, r4
     1a8:	24 09       	sbc	r18, r4
     1aa:	24 09       	sbc	r18, r4
     1ac:	24 09       	sbc	r18, r4
     1ae:	24 09       	sbc	r18, r4
     1b0:	24 09       	sbc	r18, r4
     1b2:	24 09       	sbc	r18, r4
     1b4:	24 09       	sbc	r18, r4
     1b6:	24 09       	sbc	r18, r4
     1b8:	24 09       	sbc	r18, r4
     1ba:	24 09       	sbc	r18, r4
     1bc:	24 09       	sbc	r18, r4
     1be:	24 09       	sbc	r18, r4
     1c0:	24 09       	sbc	r18, r4
     1c2:	24 09       	sbc	r18, r4
     1c4:	24 09       	sbc	r18, r4
     1c6:	24 09       	sbc	r18, r4
     1c8:	24 09       	sbc	r18, r4
     1ca:	24 09       	sbc	r18, r4
     1cc:	24 09       	sbc	r18, r4
     1ce:	24 09       	sbc	r18, r4
     1d0:	24 09       	sbc	r18, r4
     1d2:	24 09       	sbc	r18, r4
     1d4:	24 09       	sbc	r18, r4
     1d6:	24 09       	sbc	r18, r4
     1d8:	24 09       	sbc	r18, r4
     1da:	24 09       	sbc	r18, r4
     1dc:	24 09       	sbc	r18, r4
     1de:	24 09       	sbc	r18, r4
     1e0:	24 09       	sbc	r18, r4
     1e2:	24 09       	sbc	r18, r4
     1e4:	24 09       	sbc	r18, r4
     1e6:	24 09       	sbc	r18, r4
     1e8:	24 09       	sbc	r18, r4
     1ea:	24 09       	sbc	r18, r4
     1ec:	24 09       	sbc	r18, r4
     1ee:	24 09       	sbc	r18, r4
     1f0:	24 09       	sbc	r18, r4
     1f2:	24 09       	sbc	r18, r4
     1f4:	24 09       	sbc	r18, r4
     1f6:	24 09       	sbc	r18, r4
     1f8:	22 09       	sbc	r18, r2
     1fa:	98 11       	cpse	r25, r8
     1fc:	9f 11       	cpse	r25, r15
     1fe:	a5 11       	cpse	r26, r5
     200:	cc 12       	cpse	r12, r28
     202:	cc 12       	cpse	r12, r28
     204:	cc 12       	cpse	r12, r28
     206:	cc 12       	cpse	r12, r28
     208:	cc 12       	cpse	r12, r28
     20a:	cc 12       	cpse	r12, r28
     20c:	cc 12       	cpse	r12, r28
     20e:	cb 11       	cpse	r28, r11
     210:	d2 11       	cpse	r29, r2
     212:	d8 11       	cpse	r29, r8
     214:	cc 12       	cpse	r12, r28
     216:	cc 12       	cpse	r12, r28
     218:	cc 12       	cpse	r12, r28
     21a:	cc 12       	cpse	r12, r28
     21c:	cc 12       	cpse	r12, r28
     21e:	cc 12       	cpse	r12, r28
     220:	f5 11       	cpse	r31, r5
     222:	00 12       	cpse	r0, r16
     224:	06 12       	cpse	r0, r22
     226:	cc 12       	cpse	r12, r28
     228:	cc 12       	cpse	r12, r28
     22a:	cc 12       	cpse	r12, r28
     22c:	cc 12       	cpse	r12, r28
     22e:	cc 12       	cpse	r12, r28
     230:	cc 12       	cpse	r12, r28
     232:	cc 12       	cpse	r12, r28
     234:	0c 12       	cpse	r0, r28
     236:	17 12       	cpse	r1, r23
     238:	1e 12       	cpse	r1, r30
     23a:	25 12       	cpse	r2, r21
     23c:	30 12       	cpse	r3, r16
     23e:	4e 12       	cpse	r4, r30
     240:	59 12       	cpse	r5, r25
     242:	77 12       	cpse	r7, r23
     244:	cc 12       	cpse	r12, r28
     246:	cc 12       	cpse	r12, r28
     248:	89 12       	cpse	r8, r25
     24a:	94 12       	cpse	r9, r20
     24c:	9f 12       	cpse	r9, r31
     24e:	cc 12       	cpse	r12, r28
     250:	cc 12       	cpse	r12, r28
     252:	cc 12       	cpse	r12, r28
     254:	cc 12       	cpse	r12, r28
     256:	cc 12       	cpse	r12, r28
     258:	cc 12       	cpse	r12, r28
     25a:	cc 12       	cpse	r12, r28
     25c:	aa 12       	cpse	r10, r26
     25e:	b5 12       	cpse	r11, r21
     260:	e2 12       	cpse	r14, r18
     262:	af 13       	cpse	r26, r31
     264:	af 13       	cpse	r26, r31
     266:	af 13       	cpse	r26, r31
     268:	af 13       	cpse	r26, r31
     26a:	af 13       	cpse	r26, r31
     26c:	af 13       	cpse	r26, r31
     26e:	af 13       	cpse	r26, r31
     270:	af 13       	cpse	r26, r31
     272:	af 13       	cpse	r26, r31
     274:	af 13       	cpse	r26, r31
     276:	af 13       	cpse	r26, r31
     278:	af 13       	cpse	r26, r31
     27a:	af 13       	cpse	r26, r31
     27c:	af 13       	cpse	r26, r31
     27e:	af 13       	cpse	r26, r31
     280:	af 13       	cpse	r26, r31
     282:	af 13       	cpse	r26, r31
     284:	af 13       	cpse	r26, r31
     286:	af 13       	cpse	r26, r31
     288:	f2 12       	cpse	r15, r18
     28a:	f8 12       	cpse	r15, r24
     28c:	08 13       	cpse	r16, r24
     28e:	af 13       	cpse	r26, r31
     290:	af 13       	cpse	r26, r31
     292:	af 13       	cpse	r26, r31
     294:	af 13       	cpse	r26, r31
     296:	af 13       	cpse	r26, r31
     298:	af 13       	cpse	r26, r31
     29a:	af 13       	cpse	r26, r31
     29c:	18 13       	cpse	r17, r24
     29e:	1e 13       	cpse	r17, r30
     2a0:	1e 13       	cpse	r17, r30
     2a2:	38 13       	cpse	r19, r24
     2a4:	3f 13       	cpse	r19, r31
     2a6:	46 13       	cpse	r20, r22
     2a8:	4d 13       	cpse	r20, r29
     2aa:	54 13       	cpse	r21, r20
     2ac:	af 13       	cpse	r26, r31
     2ae:	af 13       	cpse	r26, r31
     2b0:	6e 13       	cpse	r22, r30
     2b2:	7f 13       	cpse	r23, r31
     2b4:	90 13       	cpse	r25, r16
     2b6:	af 13       	cpse	r26, r31
     2b8:	af 13       	cpse	r26, r31
     2ba:	af 13       	cpse	r26, r31
     2bc:	af 13       	cpse	r26, r31
     2be:	af 13       	cpse	r26, r31
     2c0:	af 13       	cpse	r26, r31
     2c2:	af 13       	cpse	r26, r31
     2c4:	a1 13       	cpse	r26, r17
     2c6:	a8 13       	cpse	r26, r24

000002c8 <__ctors_end>:
     2c8:	11 24       	eor	r1, r1
     2ca:	1f be       	out	0x3f, r1	; 63
     2cc:	cf ef       	ldi	r28, 0xFF	; 255
     2ce:	d8 e0       	ldi	r29, 0x08	; 8
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	cd bf       	out	0x3d, r28	; 61

000002d4 <__do_clear_bss>:
     2d4:	22 e0       	ldi	r18, 0x02	; 2
     2d6:	a0 e0       	ldi	r26, 0x00	; 0
     2d8:	b1 e0       	ldi	r27, 0x01	; 1
     2da:	01 c0       	rjmp	.+2      	; 0x2de <.do_clear_bss_start>

000002dc <.do_clear_bss_loop>:
     2dc:	1d 92       	st	X+, r1

000002de <.do_clear_bss_start>:
     2de:	a6 31       	cpi	r26, 0x16	; 22
     2e0:	b2 07       	cpc	r27, r18
     2e2:	e1 f7       	brne	.-8      	; 0x2dc <.do_clear_bss_loop>
     2e4:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <main>
     2e8:	0c 94 01 18 	jmp	0x3002	; 0x3002 <_exit>

000002ec <__bad_interrupt>:
     2ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002f0 <Analog_Init>:

Analog_struct Analog;

void Analog_Init(void){
	//Enable the analogue input
	ADMUX |= (0<<ADLAR)|(0<<REFS1)|(0<<REFS0)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0);//ADLAR=0, first read ADCL then ADCH, reference = AREF(5V).
     2f0:	ec e7       	ldi	r30, 0x7C	; 124
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN)|(0<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(0<<ADPS0);//Single conversion mode, 8MHZ/64=125KHZ this is well below the maximum of 200KHZ
     2f8:	ea e7       	ldi	r30, 0x7A	; 122
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	80 81       	ld	r24, Z
     2fe:	86 68       	ori	r24, 0x86	; 134
     300:	80 83       	st	Z, r24
	Analog.Curr_Channel=0;
     302:	e0 e0       	ldi	r30, 0x00	; 0
     304:	f1 e0       	ldi	r31, 0x01	; 1
     306:	12 82       	std	Z+2, r1	; 0x02
	Analog.Init=INIT_OK;
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	80 83       	st	Z, r24
	Analog.Stap=Analog_Idle;
     30c:	11 82       	std	Z+1, r1	; 0x01
     30e:	08 95       	ret

00000310 <Analog_loop>:
}

void Analog_loop(void){
     310:	ff 92       	push	r15
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
	if(Analog.Init){
     31a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     31e:	88 23       	and	r24, r24
     320:	09 f4       	brne	.+2      	; 0x324 <Analog_loop+0x14>
     322:	98 c0       	rjmp	.+304    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		switch(Analog.Stap){
     324:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
     328:	81 30       	cpi	r24, 0x01	; 1
     32a:	d9 f1       	breq	.+118    	; 0x3a2 <Analog_loop+0x92>
     32c:	20 f0       	brcs	.+8      	; 0x336 <Analog_loop+0x26>
     32e:	82 30       	cpi	r24, 0x02	; 2
     330:	09 f4       	brne	.+2      	; 0x334 <Analog_loop+0x24>
     332:	48 c0       	rjmp	.+144    	; 0x3c4 <Analog_loop+0xb4>
     334:	69 c0       	rjmp	.+210    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			case Analog_Idle:{
				//Check if something needs to be done
				if (Analog.Channel[Analog.Curr_Channel].Channel_Timeout_PV==0 && Analog.Channel[Analog.Curr_Channel].Channel_Timeout_SV>0){
     336:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
     33a:	28 2f       	mov	r18, r24
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	97 e0       	ldi	r25, 0x07	; 7
     340:	89 9f       	mul	r24, r25
     342:	f0 01       	movw	r30, r0
     344:	11 24       	eor	r1, r1
     346:	e0 50       	subi	r30, 0x00	; 0
     348:	ff 4f       	sbci	r31, 0xFF	; 255
     34a:	40 85       	ldd	r20, Z+8	; 0x08
     34c:	51 85       	ldd	r21, Z+9	; 0x09
     34e:	45 2b       	or	r20, r21
     350:	f9 f4       	brne	.+62     	; 0x390 <Analog_loop+0x80>
     352:	f9 01       	movw	r30, r18
     354:	ee 0f       	add	r30, r30
     356:	ff 1f       	adc	r31, r31
     358:	ee 0f       	add	r30, r30
     35a:	ff 1f       	adc	r31, r31
     35c:	ee 0f       	add	r30, r30
     35e:	ff 1f       	adc	r31, r31
     360:	e2 1b       	sub	r30, r18
     362:	f3 0b       	sbc	r31, r19
     364:	e0 50       	subi	r30, 0x00	; 0
     366:	ff 4f       	sbci	r31, 0xFF	; 255
     368:	46 81       	ldd	r20, Z+6	; 0x06
     36a:	57 81       	ldd	r21, Z+7	; 0x07
     36c:	45 2b       	or	r20, r21
     36e:	81 f0       	breq	.+32     	; 0x390 <Analog_loop+0x80>
					Analog.Stap=Analog_Start;
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_edata+0x1>
					Analog.Channel[Analog.Curr_Channel].Conversion_Done=0;
     376:	f9 01       	movw	r30, r18
     378:	ee 0f       	add	r30, r30
     37a:	ff 1f       	adc	r31, r31
     37c:	ee 0f       	add	r30, r30
     37e:	ff 1f       	adc	r31, r31
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	e2 1b       	sub	r30, r18
     386:	f3 0b       	sbc	r31, r19
     388:	e0 50       	subi	r30, 0x00	; 0
     38a:	ff 4f       	sbci	r31, 0xFF	; 255
     38c:	13 82       	std	Z+3, r1	; 0x03
     38e:	3c c0       	rjmp	.+120    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				}
				else{//Next channel
					Analog.Curr_Channel++;
     390:	8f 5f       	subi	r24, 0xFF	; 255
					if (Analog.Curr_Channel>Analog_Max_Channel){
     392:	86 30       	cpi	r24, 0x06	; 6
     394:	18 f4       	brcc	.+6      	; 0x39c <Analog_loop+0x8c>
				if (Analog.Channel[Analog.Curr_Channel].Channel_Timeout_PV==0 && Analog.Channel[Analog.Curr_Channel].Channel_Timeout_SV>0){
					Analog.Stap=Analog_Start;
					Analog.Channel[Analog.Curr_Channel].Conversion_Done=0;
				}
				else{//Next channel
					Analog.Curr_Channel++;
     396:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
     39a:	36 c0       	rjmp	.+108    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
					if (Analog.Curr_Channel>Analog_Max_Channel){
						Analog.Curr_Channel=0;
     39c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
     3a0:	33 c0       	rjmp	.+102    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				}
			}//Analog_Idle
			break;
			
			case Analog_Start:{
				uint8_t _Temp_MUX = ADMUX;
     3a2:	ac e7       	ldi	r26, 0x7C	; 124
     3a4:	b0 e0       	ldi	r27, 0x00	; 0
     3a6:	8c 91       	ld	r24, X
				_Temp_MUX &= 0xF0;
     3a8:	80 7f       	andi	r24, 0xF0	; 240
				_Temp_MUX += Analog.Curr_Channel;
     3aa:	e0 e0       	ldi	r30, 0x00	; 0
     3ac:	f1 e0       	ldi	r31, 0x01	; 1
     3ae:	92 81       	ldd	r25, Z+2	; 0x02
     3b0:	89 0f       	add	r24, r25
				ADMUX = _Temp_MUX;
     3b2:	8c 93       	st	X, r24
				ADCSRA |= (1<<ADSC);
     3b4:	aa e7       	ldi	r26, 0x7A	; 122
     3b6:	b0 e0       	ldi	r27, 0x00	; 0
     3b8:	8c 91       	ld	r24, X
     3ba:	80 64       	ori	r24, 0x40	; 64
     3bc:	8c 93       	st	X, r24
				Analog.Stap=Analog_Wait;
     3be:	82 e0       	ldi	r24, 0x02	; 2
     3c0:	81 83       	std	Z+1, r24	; 0x01
			}//Analog_Start
			break;
     3c2:	22 c0       	rjmp	.+68     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			
			case Analog_Wait:{
				if (!(ADCSRA & (1<<ADSC))){
     3c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3c8:	86 fd       	sbrc	r24, 6
     3ca:	1e c0       	rjmp	.+60     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
					Analog.Channel[Analog.Curr_Channel].Value=ADC;
     3cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
     3d0:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     3d4:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     3d8:	97 e0       	ldi	r25, 0x07	; 7
     3da:	89 9f       	mul	r24, r25
     3dc:	f0 01       	movw	r30, r0
     3de:	11 24       	eor	r1, r1
     3e0:	e0 50       	subi	r30, 0x00	; 0
     3e2:	ff 4f       	sbci	r31, 0xFF	; 255
     3e4:	35 83       	std	Z+5, r19	; 0x05
     3e6:	24 83       	std	Z+4, r18	; 0x04
					//Analog.Channel[Analog.Curr_Channel].Value=(ADCH*256);
					Analog.Channel[Analog.Curr_Channel].Conversion_Done=1;
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	93 83       	std	Z+3, r25	; 0x03
					Analog.Channel[Analog.Curr_Channel].Channel_Timeout_PV=Analog.Channel[Analog.Curr_Channel].Channel_Timeout_SV;
     3ec:	26 81       	ldd	r18, Z+6	; 0x06
     3ee:	37 81       	ldd	r19, Z+7	; 0x07
     3f0:	31 87       	std	Z+9, r19	; 0x09
     3f2:	20 87       	std	Z+8, r18	; 0x08
					Analog.Curr_Channel++;
     3f4:	8f 5f       	subi	r24, 0xFF	; 255
					if (Analog.Curr_Channel>Analog_Max_Channel){
     3f6:	86 30       	cpi	r24, 0x06	; 6
     3f8:	18 f4       	brcc	.+6      	; 0x400 <__LOCK_REGION_LENGTH__>
				if (!(ADCSRA & (1<<ADSC))){
					Analog.Channel[Analog.Curr_Channel].Value=ADC;
					//Analog.Channel[Analog.Curr_Channel].Value=(ADCH*256);
					Analog.Channel[Analog.Curr_Channel].Conversion_Done=1;
					Analog.Channel[Analog.Curr_Channel].Channel_Timeout_PV=Analog.Channel[Analog.Curr_Channel].Channel_Timeout_SV;
					Analog.Curr_Channel++;
     3fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
					if (Analog.Curr_Channel>Analog_Max_Channel){
						Analog.Curr_Channel=0;
     400:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
					}
					Analog.Stap=Analog_Idle;
     404:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
				}
			}//Analog_Wait
			break;
		}//Switch
		//Timers
		uint8_t _Pulse_10ms = Timer_Pulse_10ms();
     408:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Timer_Pulse_10ms>
     40c:	e0 e0       	ldi	r30, 0x00	; 0
     40e:	f1 e0       	ldi	r31, 0x01	; 1
     410:	ca e2       	ldi	r28, 0x2A	; 42
     412:	d1 e0       	ldi	r29, 0x01	; 1
		for (uint8_t x=0; x<=Analog_Max_Channel; x++){
			Analog.Channel[x].Channel_Timeout_PV -= Analog.Channel[x].Channel_Timeout_PV && _Pulse_10ms;
     414:	10 e0       	ldi	r17, 0x00	; 0
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	ff 24       	eor	r15, r15
     41a:	f3 94       	inc	r15
     41c:	00 e0       	ldi	r16, 0x00	; 0
     41e:	df 01       	movw	r26, r30
     420:	20 85       	ldd	r18, Z+8	; 0x08
     422:	31 85       	ldd	r19, Z+9	; 0x09
     424:	21 15       	cp	r18, r1
     426:	31 05       	cpc	r19, r1
     428:	49 f0       	breq	.+18     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     42a:	6f 2d       	mov	r22, r15
     42c:	90 2f       	mov	r25, r16
     42e:	81 11       	cpse	r24, r1
     430:	02 c0       	rjmp	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     432:	61 2f       	mov	r22, r17
     434:	97 2f       	mov	r25, r23
     436:	46 2f       	mov	r20, r22
     438:	59 2f       	mov	r21, r25
     43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43c:	41 2f       	mov	r20, r17
     43e:	57 2f       	mov	r21, r23
     440:	24 1b       	sub	r18, r20
     442:	35 0b       	sbc	r19, r21
     444:	19 96       	adiw	r26, 0x09	; 9
     446:	3c 93       	st	X, r19
     448:	2e 93       	st	-X, r18
     44a:	18 97       	sbiw	r26, 0x08	; 8
     44c:	37 96       	adiw	r30, 0x07	; 7
			}//Analog_Wait
			break;
		}//Switch
		//Timers
		uint8_t _Pulse_10ms = Timer_Pulse_10ms();
		for (uint8_t x=0; x<=Analog_Max_Channel; x++){
     44e:	ec 17       	cp	r30, r28
     450:	fd 07       	cpc	r31, r29
     452:	29 f7       	brne	.-54     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			Analog.Channel[x].Channel_Timeout_PV -= Analog.Channel[x].Channel_Timeout_PV && _Pulse_10ms;
		}
	}//If(Analog.Init)
}//Loop
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	0f 91       	pop	r16
     45c:	ff 90       	pop	r15
     45e:	08 95       	ret

00000460 <Analog_Channel_Init>:

int8_t Analog_Channel_Init(uint8_t _Channel, uint16_t _Timeout){
	if (_Channel<=Analog_Max_Channel){
     460:	86 30       	cpi	r24, 0x06	; 6
     462:	50 f4       	brcc	.+20     	; 0x478 <Analog_Channel_Init+0x18>
		Analog.Channel[_Channel].Channel_Timeout_SV=_Timeout;
     464:	97 e0       	ldi	r25, 0x07	; 7
     466:	89 9f       	mul	r24, r25
     468:	f0 01       	movw	r30, r0
     46a:	11 24       	eor	r1, r1
     46c:	e0 50       	subi	r30, 0x00	; 0
     46e:	ff 4f       	sbci	r31, 0xFF	; 255
     470:	77 83       	std	Z+7, r23	; 0x07
     472:	66 83       	std	Z+6, r22	; 0x06
		return 1;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	08 95       	ret
	}
	return -1;
     478:	8f ef       	ldi	r24, 0xFF	; 255
}
     47a:	08 95       	ret

0000047c <Analog_Channel_Read>:

uint16_t Analog_Channel_Read(const uint8_t _Channel){
	if(	Analog.Channel[_Channel].Conversion_Done){
     47c:	28 2f       	mov	r18, r24
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	97 e0       	ldi	r25, 0x07	; 7
     482:	89 9f       	mul	r24, r25
     484:	f0 01       	movw	r30, r0
     486:	11 24       	eor	r1, r1
     488:	e0 50       	subi	r30, 0x00	; 0
     48a:	ff 4f       	sbci	r31, 0xFF	; 255
     48c:	83 81       	ldd	r24, Z+3	; 0x03
     48e:	88 23       	and	r24, r24
     490:	61 f0       	breq	.+24     	; 0x4aa <Analog_Channel_Read+0x2e>
		Analog.Channel[_Channel].Conversion_Done=0;
     492:	f9 01       	movw	r30, r18
     494:	ee 0f       	add	r30, r30
     496:	ff 1f       	adc	r31, r31
     498:	ee 0f       	add	r30, r30
     49a:	ff 1f       	adc	r31, r31
     49c:	ee 0f       	add	r30, r30
     49e:	ff 1f       	adc	r31, r31
     4a0:	e2 1b       	sub	r30, r18
     4a2:	f3 0b       	sbc	r31, r19
     4a4:	e0 50       	subi	r30, 0x00	; 0
     4a6:	ff 4f       	sbci	r31, 0xFF	; 255
     4a8:	13 82       	std	Z+3, r1	; 0x03
	}
	return Analog.Channel[_Channel].Value;
     4aa:	f9 01       	movw	r30, r18
     4ac:	ee 0f       	add	r30, r30
     4ae:	ff 1f       	adc	r31, r31
     4b0:	ee 0f       	add	r30, r30
     4b2:	ff 1f       	adc	r31, r31
     4b4:	ee 0f       	add	r30, r30
     4b6:	ff 1f       	adc	r31, r31
     4b8:	e2 1b       	sub	r30, r18
     4ba:	f3 0b       	sbc	r31, r19
     4bc:	e0 50       	subi	r30, 0x00	; 0
     4be:	ff 4f       	sbci	r31, 0xFF	; 255
}
     4c0:	84 81       	ldd	r24, Z+4	; 0x04
     4c2:	95 81       	ldd	r25, Z+5	; 0x05
     4c4:	08 95       	ret

000004c6 <Analog_Channel_Ready>:

uint8_t Analog_Channel_Ready(const uint8_t _Channel){
	return Analog.Channel[_Channel].Conversion_Done;
     4c6:	27 e0       	ldi	r18, 0x07	; 7
     4c8:	82 9f       	mul	r24, r18
     4ca:	c0 01       	movw	r24, r0
     4cc:	11 24       	eor	r1, r1
     4ce:	fc 01       	movw	r30, r24
     4d0:	e0 50       	subi	r30, 0x00	; 0
     4d2:	ff 4f       	sbci	r31, 0xFF	; 255
     4d4:	83 81       	ldd	r24, Z+3	; 0x03
     4d6:	08 95       	ret

000004d8 <BCDToDecimal>:

***************************************************************************/
#include "Convertlib/Convert.h"

uint8_t BCDToDecimal(const uint8_t _BCD){
    if((_BCD&0xF0)<0xA0 && (_BCD&0x0F)<0x0A){
     4d8:	28 2f       	mov	r18, r24
     4da:	20 7f       	andi	r18, 0xF0	; 240
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	20 3a       	cpi	r18, 0xA0	; 160
     4e0:	31 05       	cpc	r19, r1
     4e2:	8c f4       	brge	.+34     	; 0x506 <BCDToDecimal+0x2e>
     4e4:	28 2f       	mov	r18, r24
     4e6:	2f 70       	andi	r18, 0x0F	; 15
     4e8:	42 2f       	mov	r20, r18
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	4a 30       	cpi	r20, 0x0A	; 10
     4ee:	51 05       	cpc	r21, r1
     4f0:	64 f4       	brge	.+24     	; 0x50a <BCDToDecimal+0x32>
	    return (_BCD>>4)*10 + (_BCD & 0x0F);
     4f2:	82 95       	swap	r24
     4f4:	8f 70       	andi	r24, 0x0F	; 15
     4f6:	98 2f       	mov	r25, r24
     4f8:	99 0f       	add	r25, r25
     4fa:	89 2f       	mov	r24, r25
     4fc:	88 0f       	add	r24, r24
     4fe:	88 0f       	add	r24, r24
     500:	89 0f       	add	r24, r25
     502:	82 0f       	add	r24, r18
     504:	08 95       	ret
	    //return _x;
    }
   return 0;
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	08 95       	ret
     50a:	80 e0       	ldi	r24, 0x00	; 0
}
     50c:	08 95       	ret

0000050e <DecimalToBCD>:

uint8_t DecimalToBCD(const uint8_t _Decimal){
	if(_Decimal<100){
     50e:	84 36       	cpi	r24, 0x64	; 100
     510:	e0 f4       	brcc	.+56     	; 0x54a <DecimalToBCD+0x3c>
		uint8_t _x = _Decimal%10;
     512:	2d ec       	ldi	r18, 0xCD	; 205
     514:	82 9f       	mul	r24, r18
     516:	21 2d       	mov	r18, r1
     518:	11 24       	eor	r1, r1
     51a:	26 95       	lsr	r18
     51c:	26 95       	lsr	r18
     51e:	26 95       	lsr	r18
     520:	22 0f       	add	r18, r18
     522:	92 2f       	mov	r25, r18
     524:	99 0f       	add	r25, r25
     526:	99 0f       	add	r25, r25
     528:	29 0f       	add	r18, r25
     52a:	98 2f       	mov	r25, r24
     52c:	92 1b       	sub	r25, r18
     52e:	29 2f       	mov	r18, r25
		uint8_t _y = (((_Decimal-_x)/10)<<4) + _x;
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	82 1b       	sub	r24, r18
     534:	91 09       	sbc	r25, r1
     536:	6a e0       	ldi	r22, 0x0A	; 10
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divmodhi4>
     53e:	82 2f       	mov	r24, r18
     540:	90 e1       	ldi	r25, 0x10	; 16
     542:	69 9f       	mul	r22, r25
     544:	80 0d       	add	r24, r0
     546:	11 24       	eor	r1, r1
		return _y;
     548:	08 95       	ret
	}
	return 0;
     54a:	80 e0       	ldi	r24, 0x00	; 0
}
     54c:	08 95       	ret

0000054e <DS1307_Loop>:
	if (DS1307.Command==Status_DS1307_Idle){
		DS1307.Setting.sOUT=_OUT>0;
		DS1307.Setting.sSQWE=_SQWE>0;
		DS1307.Setting.sRS1=_RS1>0;
		DS1307.Setting.sRS0=_RS0>0;
		DS1307.Command=Status_DS1307_SetSettings;
     54e:	0f 93       	push	r16
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <DS1307+0xd>
     558:	8e 2f       	mov	r24, r30
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	84 36       	cpi	r24, 0x64	; 100
     55e:	91 05       	cpc	r25, r1
     560:	08 f0       	brcs	.+2      	; 0x564 <DS1307_Loop+0x16>
     562:	39 c3       	rjmp	.+1650   	; 0xbd6 <__stack+0x2d7>
     564:	fc 01       	movw	r30, r24
     566:	ec 5c       	subi	r30, 0xCC	; 204
     568:	ff 4f       	sbci	r31, 0xFF	; 255
     56a:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__tablejump2__>
     56e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <DS1307+0xc>
     572:	88 23       	and	r24, r24
     574:	41 f0       	breq	.+16     	; 0x586 <DS1307_Loop+0x38>
     576:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <DS1307+0x13>
     57a:	88 23       	and	r24, r24
     57c:	09 f4       	brne	.+2      	; 0x580 <DS1307_Loop+0x32>
     57e:	2b c3       	rjmp	.+1622   	; 0xbd6 <__stack+0x2d7>
     580:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <DS1307+0xd>
     584:	28 c3       	rjmp	.+1616   	; 0xbd6 <__stack+0x2d7>
     586:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <DS1307+0xe>
     58a:	81 11       	cpse	r24, r1
     58c:	28 c3       	rjmp	.+1616   	; 0xbde <__stack+0x2df>
     58e:	ee e2       	ldi	r30, 0x2E	; 46
     590:	f1 e0       	ldi	r31, 0x01	; 1
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	83 8b       	std	Z+19, r24	; 0x13
     596:	85 87       	std	Z+13, r24	; 0x0d
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	29 c3       	rjmp	.+1618   	; 0xbee <__stack+0x2ef>
     59c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     5a0:	81 11       	cpse	r24, r1
     5a2:	07 c0       	rjmp	.+14     	; 0x5b2 <DS1307_Loop+0x64>
     5a4:	68 e6       	ldi	r22, 0x68	; 104
     5a6:	87 e0       	ldi	r24, 0x07	; 7
     5a8:	0e 94 8d 09 	call	0x131a	; 0x131a <I2C_Get_Ident>
     5ac:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <DS1307+0x11>
     5b0:	12 c3       	rjmp	.+1572   	; 0xbd6 <__stack+0x2d7>
     5b2:	0e 94 44 09 	call	0x1288	; 0x1288 <I2C_Ready>
     5b6:	88 23       	and	r24, r24
     5b8:	09 f4       	brne	.+2      	; 0x5bc <DS1307_Loop+0x6e>
     5ba:	0d c3       	rjmp	.+1562   	; 0xbd6 <__stack+0x2d7>
     5bc:	ee e2       	ldi	r30, 0x2E	; 46
     5be:	f1 e0       	ldi	r31, 0x01	; 1
     5c0:	85 e0       	ldi	r24, 0x05	; 5
     5c2:	83 8b       	std	Z+19, r24	; 0x13
     5c4:	85 87       	std	Z+13, r24	; 0x0d
     5c6:	07 c3       	rjmp	.+1550   	; 0xbd6 <__stack+0x2d7>
     5c8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     5cc:	0e 94 44 09 	call	0x1288	; 0x1288 <I2C_Ready>
     5d0:	88 23       	and	r24, r24
     5d2:	a9 f0       	breq	.+42     	; 0x5fe <DS1307_Loop+0xb0>
     5d4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     5d8:	81 11       	cpse	r24, r1
     5da:	16 c0       	rjmp	.+44     	; 0x608 <DS1307_Loop+0xba>
     5dc:	ce e2       	ldi	r28, 0x2E	; 46
     5de:	d1 e0       	ldi	r29, 0x01	; 1
     5e0:	1e 8a       	std	Y+22, r1	; 0x16
     5e2:	09 89       	ldd	r16, Y+17	; 0x11
     5e4:	23 e0       	ldi	r18, 0x03	; 3
     5e6:	41 e0       	ldi	r20, 0x01	; 1
     5e8:	65 e4       	ldi	r22, 0x45	; 69
     5ea:	71 e0       	ldi	r23, 0x01	; 1
     5ec:	84 e4       	ldi	r24, 0x44	; 68
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	0e 94 6e 09 	call	0x12dc	; 0x12dc <I2C_Send_STr>
     5f4:	8d 85       	ldd	r24, Y+13	; 0x0d
     5f6:	8a 8b       	std	Y+18, r24	; 0x12
     5f8:	83 e6       	ldi	r24, 0x63	; 99
     5fa:	8d 87       	std	Y+13, r24	; 0x0d
     5fc:	ec c2       	rjmp	.+1496   	; 0xbd6 <__stack+0x2d7>
     5fe:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     602:	88 23       	and	r24, r24
     604:	09 f4       	brne	.+2      	; 0x608 <DS1307_Loop+0xba>
     606:	e7 c2       	rjmp	.+1486   	; 0xbd6 <__stack+0x2d7>
     608:	ce e2       	ldi	r28, 0x2E	; 46
     60a:	d1 e0       	ldi	r29, 0x01	; 1
     60c:	18 8a       	std	Y+16, r1	; 0x10
     60e:	8f 89       	ldd	r24, Y+23	; 0x17
     610:	8f 77       	andi	r24, 0x7F	; 127
     612:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <BCDToDecimal>
     616:	88 83       	st	Y, r24
     618:	88 8d       	ldd	r24, Y+24	; 0x18
     61a:	8f 77       	andi	r24, 0x7F	; 127
     61c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <BCDToDecimal>
     620:	89 83       	std	Y+1, r24	; 0x01
     622:	8f 81       	ldd	r24, Y+7	; 0x07
     624:	88 23       	and	r24, r24
     626:	49 f0       	breq	.+18     	; 0x63a <DS1307_Loop+0xec>
     628:	89 8d       	ldd	r24, Y+25	; 0x19
     62a:	8f 71       	andi	r24, 0x1F	; 31
     62c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <BCDToDecimal>
     630:	8a 83       	std	Y+2, r24	; 0x02
     632:	89 8d       	ldd	r24, Y+25	; 0x19
     634:	80 72       	andi	r24, 0x20	; 32
     636:	8f 87       	std	Y+15, r24	; 0x0f
     638:	07 c0       	rjmp	.+14     	; 0x648 <DS1307_Loop+0xfa>
     63a:	ce e2       	ldi	r28, 0x2E	; 46
     63c:	d1 e0       	ldi	r29, 0x01	; 1
     63e:	89 8d       	ldd	r24, Y+25	; 0x19
     640:	8f 73       	andi	r24, 0x3F	; 63
     642:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <BCDToDecimal>
     646:	8a 83       	std	Y+2, r24	; 0x02
     648:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <DS1307+0x14>
     64c:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <DS1307+0x15>
     650:	30 97       	sbiw	r30, 0x00	; 0
     652:	49 f0       	breq	.+18     	; 0x666 <DS1307_Loop+0x118>
     654:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <DS1307>
     658:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <DS1307+0x1>
     65c:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <DS1307+0x2>
     660:	80 83       	st	Z, r24
     662:	91 83       	std	Z+1, r25	; 0x01
     664:	a2 83       	std	Z+2, r26	; 0x02
     666:	ee e2       	ldi	r30, 0x2E	; 46
     668:	f1 e0       	ldi	r31, 0x01	; 1
     66a:	15 86       	std	Z+13, r1	; 0x0d
     66c:	13 8a       	std	Z+19, r1	; 0x13
     66e:	b3 c2       	rjmp	.+1382   	; 0xbd6 <__stack+0x2d7>
     670:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     674:	0e 94 44 09 	call	0x1288	; 0x1288 <I2C_Ready>
     678:	88 23       	and	r24, r24
     67a:	b1 f0       	breq	.+44     	; 0x6a8 <DS1307_Loop+0x15a>
     67c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     680:	81 11       	cpse	r24, r1
     682:	17 c0       	rjmp	.+46     	; 0x6b2 <DS1307_Loop+0x164>
     684:	ce e2       	ldi	r28, 0x2E	; 46
     686:	d1 e0       	ldi	r29, 0x01	; 1
     688:	84 e0       	ldi	r24, 0x04	; 4
     68a:	8e 8b       	std	Y+22, r24	; 0x16
     68c:	09 89       	ldd	r16, Y+17	; 0x11
     68e:	27 e0       	ldi	r18, 0x07	; 7
     690:	41 e0       	ldi	r20, 0x01	; 1
     692:	65 e4       	ldi	r22, 0x45	; 69
     694:	71 e0       	ldi	r23, 0x01	; 1
     696:	84 e4       	ldi	r24, 0x44	; 68
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <I2C_Send_STr>
     69e:	8d 85       	ldd	r24, Y+13	; 0x0d
     6a0:	8a 8b       	std	Y+18, r24	; 0x12
     6a2:	83 e6       	ldi	r24, 0x63	; 99
     6a4:	8d 87       	std	Y+13, r24	; 0x0d
     6a6:	97 c2       	rjmp	.+1326   	; 0xbd6 <__stack+0x2d7>
     6a8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     6ac:	88 23       	and	r24, r24
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <DS1307_Loop+0x164>
     6b0:	92 c2       	rjmp	.+1316   	; 0xbd6 <__stack+0x2d7>
     6b2:	ce e2       	ldi	r28, 0x2E	; 46
     6b4:	d1 e0       	ldi	r29, 0x01	; 1
     6b6:	18 8a       	std	Y+16, r1	; 0x10
     6b8:	8f 89       	ldd	r24, Y+23	; 0x17
     6ba:	8f 73       	andi	r24, 0x3F	; 63
     6bc:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <BCDToDecimal>
     6c0:	8b 83       	std	Y+3, r24	; 0x03
     6c2:	88 8d       	ldd	r24, Y+24	; 0x18
     6c4:	8f 71       	andi	r24, 0x1F	; 31
     6c6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <BCDToDecimal>
     6ca:	8c 83       	std	Y+4, r24	; 0x04
     6cc:	89 8d       	ldd	r24, Y+25	; 0x19
     6ce:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <BCDToDecimal>
     6d2:	8d 83       	std	Y+5, r24	; 0x05
     6d4:	ec 89       	ldd	r30, Y+20	; 0x14
     6d6:	fd 89       	ldd	r31, Y+21	; 0x15
     6d8:	30 97       	sbiw	r30, 0x00	; 0
     6da:	49 f0       	breq	.+18     	; 0x6ee <DS1307_Loop+0x1a0>
     6dc:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <DS1307+0x3>
     6e0:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <DS1307+0x4>
     6e4:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <DS1307+0x5>
     6e8:	80 83       	st	Z, r24
     6ea:	91 83       	std	Z+1, r25	; 0x01
     6ec:	a2 83       	std	Z+2, r26	; 0x02
     6ee:	ee e2       	ldi	r30, 0x2E	; 46
     6f0:	f1 e0       	ldi	r31, 0x01	; 1
     6f2:	15 86       	std	Z+13, r1	; 0x0d
     6f4:	13 8a       	std	Z+19, r1	; 0x13
     6f6:	6f c2       	rjmp	.+1246   	; 0xbd6 <__stack+0x2d7>
     6f8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     6fc:	0e 94 44 09 	call	0x1288	; 0x1288 <I2C_Ready>
     700:	88 23       	and	r24, r24
     702:	a9 f0       	breq	.+42     	; 0x72e <DS1307_Loop+0x1e0>
     704:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     708:	81 11       	cpse	r24, r1
     70a:	16 c0       	rjmp	.+44     	; 0x738 <DS1307_Loop+0x1ea>
     70c:	ce e2       	ldi	r28, 0x2E	; 46
     70e:	d1 e0       	ldi	r29, 0x01	; 1
     710:	1e 8a       	std	Y+22, r1	; 0x16
     712:	09 89       	ldd	r16, Y+17	; 0x11
     714:	27 e0       	ldi	r18, 0x07	; 7
     716:	41 e0       	ldi	r20, 0x01	; 1
     718:	65 e4       	ldi	r22, 0x45	; 69
     71a:	71 e0       	ldi	r23, 0x01	; 1
     71c:	84 e4       	ldi	r24, 0x44	; 68
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	0e 94 6e 09 	call	0x12dc	; 0x12dc <I2C_Send_STr>
     724:	8d 85       	ldd	r24, Y+13	; 0x0d
     726:	8a 8b       	std	Y+18, r24	; 0x12
     728:	83 e6       	ldi	r24, 0x63	; 99
     72a:	8d 87       	std	Y+13, r24	; 0x0d
     72c:	54 c2       	rjmp	.+1192   	; 0xbd6 <__stack+0x2d7>
     72e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     732:	88 23       	and	r24, r24
     734:	09 f4       	brne	.+2      	; 0x738 <DS1307_Loop+0x1ea>
     736:	4f c2       	rjmp	.+1182   	; 0xbd6 <__stack+0x2d7>
     738:	ee e2       	ldi	r30, 0x2E	; 46
     73a:	f1 e0       	ldi	r31, 0x01	; 1
     73c:	10 8a       	std	Z+16, r1	; 0x10
     73e:	84 85       	ldd	r24, Z+12	; 0x0c
     740:	81 11       	cpse	r24, r1
     742:	0e c0       	rjmp	.+28     	; 0x760 <DS1307_Loop+0x212>
     744:	97 89       	ldd	r25, Z+23	; 0x17
     746:	89 2f       	mov	r24, r25
     748:	88 1f       	adc	r24, r24
     74a:	88 27       	eor	r24, r24
     74c:	88 1f       	adc	r24, r24
     74e:	86 83       	std	Z+6, r24	; 0x06
     750:	91 8d       	ldd	r25, Z+25	; 0x19
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	96 ff       	sbrs	r25, 6
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	87 83       	std	Z+7, r24	; 0x07
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <DS1307+0xc>
     760:	ce e2       	ldi	r28, 0x2E	; 46
     762:	d1 e0       	ldi	r29, 0x01	; 1
     764:	8f 89       	ldd	r24, Y+23	; 0x17
     766:	8f 77       	andi	r24, 0x7F	; 127
     768:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <BCDToDecimal>
     76c:	88 83       	st	Y, r24
     76e:	88 8d       	ldd	r24, Y+24	; 0x18
     770:	8f 77       	andi	r24, 0x7F	; 127
     772:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <BCDToDecimal>
     776:	89 83       	std	Y+1, r24	; 0x01
     778:	8f 81       	ldd	r24, Y+7	; 0x07
     77a:	88 23       	and	r24, r24
     77c:	49 f0       	breq	.+18     	; 0x790 <DS1307_Loop+0x242>
     77e:	89 8d       	ldd	r24, Y+25	; 0x19
     780:	8f 71       	andi	r24, 0x1F	; 31
     782:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <BCDToDecimal>
     786:	8a 83       	std	Y+2, r24	; 0x02
     788:	89 8d       	ldd	r24, Y+25	; 0x19
     78a:	80 72       	andi	r24, 0x20	; 32
     78c:	8f 87       	std	Y+15, r24	; 0x0f
     78e:	07 c0       	rjmp	.+14     	; 0x79e <DS1307_Loop+0x250>
     790:	ce e2       	ldi	r28, 0x2E	; 46
     792:	d1 e0       	ldi	r29, 0x01	; 1
     794:	89 8d       	ldd	r24, Y+25	; 0x19
     796:	8f 73       	andi	r24, 0x3F	; 63
     798:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <BCDToDecimal>
     79c:	8a 83       	std	Y+2, r24	; 0x02
     79e:	ce e2       	ldi	r28, 0x2E	; 46
     7a0:	d1 e0       	ldi	r29, 0x01	; 1
     7a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7a4:	8f 73       	andi	r24, 0x3F	; 63
     7a6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <BCDToDecimal>
     7aa:	8b 83       	std	Y+3, r24	; 0x03
     7ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7ae:	8f 71       	andi	r24, 0x1F	; 31
     7b0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <BCDToDecimal>
     7b4:	8c 83       	std	Y+4, r24	; 0x04
     7b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     7b8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <BCDToDecimal>
     7bc:	8d 83       	std	Y+5, r24	; 0x05
     7be:	ac 89       	ldd	r26, Y+20	; 0x14
     7c0:	bd 89       	ldd	r27, Y+21	; 0x15
     7c2:	10 97       	sbiw	r26, 0x00	; 0
     7c4:	31 f0       	breq	.+12     	; 0x7d2 <DS1307_Loop+0x284>
     7c6:	86 e0       	ldi	r24, 0x06	; 6
     7c8:	fe 01       	movw	r30, r28
     7ca:	01 90       	ld	r0, Z+
     7cc:	0d 92       	st	X+, r0
     7ce:	8a 95       	dec	r24
     7d0:	e1 f7       	brne	.-8      	; 0x7ca <DS1307_Loop+0x27c>
     7d2:	ee e2       	ldi	r30, 0x2E	; 46
     7d4:	f1 e0       	ldi	r31, 0x01	; 1
     7d6:	15 86       	std	Z+13, r1	; 0x0d
     7d8:	13 8a       	std	Z+19, r1	; 0x13
     7da:	fd c1       	rjmp	.+1018   	; 0xbd6 <__stack+0x2d7>
     7dc:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     7e0:	0e 94 44 09 	call	0x1288	; 0x1288 <I2C_Ready>
     7e4:	88 23       	and	r24, r24
     7e6:	b1 f0       	breq	.+44     	; 0x814 <DS1307_Loop+0x2c6>
     7e8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     7ec:	81 11       	cpse	r24, r1
     7ee:	17 c0       	rjmp	.+46     	; 0x81e <DS1307_Loop+0x2d0>
     7f0:	ce e2       	ldi	r28, 0x2E	; 46
     7f2:	d1 e0       	ldi	r29, 0x01	; 1
     7f4:	87 e0       	ldi	r24, 0x07	; 7
     7f6:	8e 8b       	std	Y+22, r24	; 0x16
     7f8:	09 89       	ldd	r16, Y+17	; 0x11
     7fa:	21 e0       	ldi	r18, 0x01	; 1
     7fc:	41 e0       	ldi	r20, 0x01	; 1
     7fe:	65 e4       	ldi	r22, 0x45	; 69
     800:	71 e0       	ldi	r23, 0x01	; 1
     802:	84 e4       	ldi	r24, 0x44	; 68
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	0e 94 6e 09 	call	0x12dc	; 0x12dc <I2C_Send_STr>
     80a:	8d 85       	ldd	r24, Y+13	; 0x0d
     80c:	8a 8b       	std	Y+18, r24	; 0x12
     80e:	83 e6       	ldi	r24, 0x63	; 99
     810:	8d 87       	std	Y+13, r24	; 0x0d
     812:	e1 c1       	rjmp	.+962    	; 0xbd6 <__stack+0x2d7>
     814:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     818:	88 23       	and	r24, r24
     81a:	09 f4       	brne	.+2      	; 0x81e <DS1307_Loop+0x2d0>
     81c:	dc c1       	rjmp	.+952    	; 0xbd6 <__stack+0x2d7>
     81e:	ee e2       	ldi	r30, 0x2E	; 46
     820:	f1 e0       	ldi	r31, 0x01	; 1
     822:	10 8a       	std	Z+16, r1	; 0x10
     824:	87 89       	ldd	r24, Z+23	; 0x17
     826:	98 2f       	mov	r25, r24
     828:	99 1f       	adc	r25, r25
     82a:	99 27       	eor	r25, r25
     82c:	99 1f       	adc	r25, r25
     82e:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <DS1307+0xb>
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	84 ff       	sbrs	r24, 4
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <DS1307+0xa>
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	81 ff       	sbrs	r24, 1
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <DS1307+0x9>
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	80 ff       	sbrs	r24, 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <DS1307+0x8>
     850:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <DS1307+0xc>
     854:	81 11       	cpse	r24, r1
     856:	06 c0       	rjmp	.+12     	; 0x864 <DS1307_Loop+0x316>
     858:	ee e2       	ldi	r30, 0x2E	; 46
     85a:	f1 e0       	ldi	r31, 0x01	; 1
     85c:	84 e0       	ldi	r24, 0x04	; 4
     85e:	85 87       	std	Z+13, r24	; 0x0d
     860:	83 8b       	std	Z+19, r24	; 0x13
     862:	b9 c1       	rjmp	.+882    	; 0xbd6 <__stack+0x2d7>
     864:	ee e2       	ldi	r30, 0x2E	; 46
     866:	f1 e0       	ldi	r31, 0x01	; 1
     868:	15 86       	std	Z+13, r1	; 0x0d
     86a:	13 8a       	std	Z+19, r1	; 0x13
     86c:	b4 c1       	rjmp	.+872    	; 0xbd6 <__stack+0x2d7>
     86e:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     872:	0e 94 44 09 	call	0x1288	; 0x1288 <I2C_Ready>
     876:	88 23       	and	r24, r24
     878:	09 f4       	brne	.+2      	; 0x87c <DS1307_Loop+0x32e>
     87a:	49 c0       	rjmp	.+146    	; 0x90e <__stack+0xf>
     87c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     880:	81 11       	cpse	r24, r1
     882:	4a c0       	rjmp	.+148    	; 0x918 <__stack+0x19>
     884:	88 e0       	ldi	r24, 0x08	; 8
     886:	e4 e4       	ldi	r30, 0x44	; 68
     888:	f1 e0       	ldi	r31, 0x01	; 1
     88a:	df 01       	movw	r26, r30
     88c:	1d 92       	st	X+, r1
     88e:	8a 95       	dec	r24
     890:	e9 f7       	brne	.-6      	; 0x88c <DS1307_Loop+0x33e>
     892:	ce e2       	ldi	r28, 0x2E	; 46
     894:	d1 e0       	ldi	r29, 0x01	; 1
     896:	88 81       	ld	r24, Y
     898:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
     89c:	2e 81       	ldd	r18, Y+6	; 0x06
     89e:	b0 e8       	ldi	r27, 0x80	; 128
     8a0:	2b 9f       	mul	r18, r27
     8a2:	90 01       	movw	r18, r0
     8a4:	11 24       	eor	r1, r1
     8a6:	82 2b       	or	r24, r18
     8a8:	8f 8b       	std	Y+23, r24	; 0x17
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
     8b0:	8f 77       	andi	r24, 0x7F	; 127
     8b2:	88 8f       	std	Y+24, r24	; 0x18
     8b4:	8f 81       	ldd	r24, Y+7	; 0x07
     8b6:	88 23       	and	r24, r24
     8b8:	89 f0       	breq	.+34     	; 0x8dc <DS1307_Loop+0x38e>
     8ba:	8a 81       	ldd	r24, Y+2	; 0x02
     8bc:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
     8c0:	2f 81       	ldd	r18, Y+7	; 0x07
     8c2:	30 e4       	ldi	r19, 0x40	; 64
     8c4:	23 9f       	mul	r18, r19
     8c6:	a0 01       	movw	r20, r0
     8c8:	11 24       	eor	r1, r1
     8ca:	9f 85       	ldd	r25, Y+15	; 0x0f
     8cc:	60 e2       	ldi	r22, 0x20	; 32
     8ce:	96 9f       	mul	r25, r22
     8d0:	90 01       	movw	r18, r0
     8d2:	11 24       	eor	r1, r1
     8d4:	24 2b       	or	r18, r20
     8d6:	82 2b       	or	r24, r18
     8d8:	89 8f       	std	Y+25, r24	; 0x19
     8da:	0c c0       	rjmp	.+24     	; 0x8f4 <DS1307_Loop+0x3a6>
     8dc:	ce e2       	ldi	r28, 0x2E	; 46
     8de:	d1 e0       	ldi	r29, 0x01	; 1
     8e0:	8a 81       	ldd	r24, Y+2	; 0x02
     8e2:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
     8e6:	2f 81       	ldd	r18, Y+7	; 0x07
     8e8:	90 e4       	ldi	r25, 0x40	; 64
     8ea:	29 9f       	mul	r18, r25
     8ec:	90 01       	movw	r18, r0
     8ee:	11 24       	eor	r1, r1
     8f0:	82 2b       	or	r24, r18
     8f2:	89 8f       	std	Y+25, r24	; 0x19
     8f4:	ce e2       	ldi	r28, 0x2E	; 46
     8f6:	d1 e0       	ldi	r29, 0x01	; 1
     8f8:	49 89       	ldd	r20, Y+17	; 0x11
     8fa:	64 e0       	ldi	r22, 0x04	; 4
     8fc:	84 e4       	ldi	r24, 0x44	; 68
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	0e 94 57 09 	call	0x12ae	; 0x12ae <I2C_Send_ST>
     904:	8d 85       	ldd	r24, Y+13	; 0x0d
     906:	8a 8b       	std	Y+18, r24	; 0x12
     908:	83 e6       	ldi	r24, 0x63	; 99
     90a:	8d 87       	std	Y+13, r24	; 0x0d
     90c:	64 c1       	rjmp	.+712    	; 0xbd6 <__stack+0x2d7>
     90e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     912:	88 23       	and	r24, r24
     914:	09 f4       	brne	.+2      	; 0x918 <__stack+0x19>
     916:	5f c1       	rjmp	.+702    	; 0xbd6 <__stack+0x2d7>
     918:	ee e2       	ldi	r30, 0x2E	; 46
     91a:	f1 e0       	ldi	r31, 0x01	; 1
     91c:	10 8a       	std	Z+16, r1	; 0x10
     91e:	15 86       	std	Z+13, r1	; 0x0d
     920:	13 8a       	std	Z+19, r1	; 0x13
     922:	59 c1       	rjmp	.+690    	; 0xbd6 <__stack+0x2d7>
     924:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     928:	0e 94 44 09 	call	0x1288	; 0x1288 <I2C_Ready>
     92c:	88 23       	and	r24, r24
     92e:	41 f1       	breq	.+80     	; 0x980 <__stack+0x81>
     930:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     934:	81 11       	cpse	r24, r1
     936:	29 c0       	rjmp	.+82     	; 0x98a <__stack+0x8b>
     938:	88 e0       	ldi	r24, 0x08	; 8
     93a:	e4 e4       	ldi	r30, 0x44	; 68
     93c:	f1 e0       	ldi	r31, 0x01	; 1
     93e:	df 01       	movw	r26, r30
     940:	1d 92       	st	X+, r1
     942:	8a 95       	dec	r24
     944:	e9 f7       	brne	.-6      	; 0x940 <__stack+0x41>
     946:	ce e2       	ldi	r28, 0x2E	; 46
     948:	d1 e0       	ldi	r29, 0x01	; 1
     94a:	84 e0       	ldi	r24, 0x04	; 4
     94c:	8e 8b       	std	Y+22, r24	; 0x16
     94e:	8b 81       	ldd	r24, Y+3	; 0x03
     950:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
     954:	8f 73       	andi	r24, 0x3F	; 63
     956:	8f 8b       	std	Y+23, r24	; 0x17
     958:	8c 81       	ldd	r24, Y+4	; 0x04
     95a:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
     95e:	8f 71       	andi	r24, 0x1F	; 31
     960:	88 8f       	std	Y+24, r24	; 0x18
     962:	8d 81       	ldd	r24, Y+5	; 0x05
     964:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
     968:	89 8f       	std	Y+25, r24	; 0x19
     96a:	49 89       	ldd	r20, Y+17	; 0x11
     96c:	64 e0       	ldi	r22, 0x04	; 4
     96e:	84 e4       	ldi	r24, 0x44	; 68
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 57 09 	call	0x12ae	; 0x12ae <I2C_Send_ST>
     976:	8d 85       	ldd	r24, Y+13	; 0x0d
     978:	8a 8b       	std	Y+18, r24	; 0x12
     97a:	83 e6       	ldi	r24, 0x63	; 99
     97c:	8d 87       	std	Y+13, r24	; 0x0d
     97e:	2b c1       	rjmp	.+598    	; 0xbd6 <__stack+0x2d7>
     980:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     984:	88 23       	and	r24, r24
     986:	09 f4       	brne	.+2      	; 0x98a <__stack+0x8b>
     988:	26 c1       	rjmp	.+588    	; 0xbd6 <__stack+0x2d7>
     98a:	ee e2       	ldi	r30, 0x2E	; 46
     98c:	f1 e0       	ldi	r31, 0x01	; 1
     98e:	10 8a       	std	Z+16, r1	; 0x10
     990:	15 86       	std	Z+13, r1	; 0x0d
     992:	13 8a       	std	Z+19, r1	; 0x13
     994:	20 c1       	rjmp	.+576    	; 0xbd6 <__stack+0x2d7>
     996:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     99a:	0e 94 44 09 	call	0x1288	; 0x1288 <I2C_Ready>
     99e:	88 23       	and	r24, r24
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <__stack+0xa5>
     9a2:	57 c0       	rjmp	.+174    	; 0xa52 <__stack+0x153>
     9a4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     9a8:	81 11       	cpse	r24, r1
     9aa:	58 c0       	rjmp	.+176    	; 0xa5c <__stack+0x15d>
     9ac:	88 e0       	ldi	r24, 0x08	; 8
     9ae:	e4 e4       	ldi	r30, 0x44	; 68
     9b0:	f1 e0       	ldi	r31, 0x01	; 1
     9b2:	df 01       	movw	r26, r30
     9b4:	1d 92       	st	X+, r1
     9b6:	8a 95       	dec	r24
     9b8:	e9 f7       	brne	.-6      	; 0x9b4 <__stack+0xb5>
     9ba:	ce e2       	ldi	r28, 0x2E	; 46
     9bc:	d1 e0       	ldi	r29, 0x01	; 1
     9be:	88 81       	ld	r24, Y
     9c0:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
     9c4:	2e 81       	ldd	r18, Y+6	; 0x06
     9c6:	b0 e8       	ldi	r27, 0x80	; 128
     9c8:	2b 9f       	mul	r18, r27
     9ca:	90 01       	movw	r18, r0
     9cc:	11 24       	eor	r1, r1
     9ce:	82 2b       	or	r24, r18
     9d0:	8f 8b       	std	Y+23, r24	; 0x17
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
     9d8:	8f 77       	andi	r24, 0x7F	; 127
     9da:	88 8f       	std	Y+24, r24	; 0x18
     9dc:	8f 81       	ldd	r24, Y+7	; 0x07
     9de:	88 23       	and	r24, r24
     9e0:	89 f0       	breq	.+34     	; 0xa04 <__stack+0x105>
     9e2:	8a 81       	ldd	r24, Y+2	; 0x02
     9e4:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
     9e8:	2f 81       	ldd	r18, Y+7	; 0x07
     9ea:	30 e4       	ldi	r19, 0x40	; 64
     9ec:	23 9f       	mul	r18, r19
     9ee:	a0 01       	movw	r20, r0
     9f0:	11 24       	eor	r1, r1
     9f2:	9f 85       	ldd	r25, Y+15	; 0x0f
     9f4:	60 e2       	ldi	r22, 0x20	; 32
     9f6:	96 9f       	mul	r25, r22
     9f8:	90 01       	movw	r18, r0
     9fa:	11 24       	eor	r1, r1
     9fc:	24 2b       	or	r18, r20
     9fe:	82 2b       	or	r24, r18
     a00:	89 8f       	std	Y+25, r24	; 0x19
     a02:	0c c0       	rjmp	.+24     	; 0xa1c <__stack+0x11d>
     a04:	ce e2       	ldi	r28, 0x2E	; 46
     a06:	d1 e0       	ldi	r29, 0x01	; 1
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
     a0e:	2f 81       	ldd	r18, Y+7	; 0x07
     a10:	90 e4       	ldi	r25, 0x40	; 64
     a12:	29 9f       	mul	r18, r25
     a14:	90 01       	movw	r18, r0
     a16:	11 24       	eor	r1, r1
     a18:	82 2b       	or	r24, r18
     a1a:	89 8f       	std	Y+25, r24	; 0x19
     a1c:	ce e2       	ldi	r28, 0x2E	; 46
     a1e:	d1 e0       	ldi	r29, 0x01	; 1
     a20:	8b 81       	ldd	r24, Y+3	; 0x03
     a22:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
     a26:	8f 73       	andi	r24, 0x3F	; 63
     a28:	8b 8f       	std	Y+27, r24	; 0x1b
     a2a:	8c 81       	ldd	r24, Y+4	; 0x04
     a2c:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
     a30:	8f 71       	andi	r24, 0x1F	; 31
     a32:	8c 8f       	std	Y+28, r24	; 0x1c
     a34:	8d 81       	ldd	r24, Y+5	; 0x05
     a36:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
     a3a:	8d 8f       	std	Y+29, r24	; 0x1d
     a3c:	49 89       	ldd	r20, Y+17	; 0x11
     a3e:	68 e0       	ldi	r22, 0x08	; 8
     a40:	84 e4       	ldi	r24, 0x44	; 68
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 57 09 	call	0x12ae	; 0x12ae <I2C_Send_ST>
     a48:	8d 85       	ldd	r24, Y+13	; 0x0d
     a4a:	8a 8b       	std	Y+18, r24	; 0x12
     a4c:	83 e6       	ldi	r24, 0x63	; 99
     a4e:	8d 87       	std	Y+13, r24	; 0x0d
     a50:	c2 c0       	rjmp	.+388    	; 0xbd6 <__stack+0x2d7>
     a52:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     a56:	88 23       	and	r24, r24
     a58:	09 f4       	brne	.+2      	; 0xa5c <__stack+0x15d>
     a5a:	bd c0       	rjmp	.+378    	; 0xbd6 <__stack+0x2d7>
     a5c:	ee e2       	ldi	r30, 0x2E	; 46
     a5e:	f1 e0       	ldi	r31, 0x01	; 1
     a60:	10 8a       	std	Z+16, r1	; 0x10
     a62:	15 86       	std	Z+13, r1	; 0x0d
     a64:	13 8a       	std	Z+19, r1	; 0x13
     a66:	b7 c0       	rjmp	.+366    	; 0xbd6 <__stack+0x2d7>
     a68:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     a6c:	0e 94 44 09 	call	0x1288	; 0x1288 <I2C_Ready>
     a70:	88 23       	and	r24, r24
     a72:	59 f1       	breq	.+86     	; 0xaca <__stack+0x1cb>
     a74:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     a78:	81 11       	cpse	r24, r1
     a7a:	2c c0       	rjmp	.+88     	; 0xad4 <__stack+0x1d5>
     a7c:	88 e0       	ldi	r24, 0x08	; 8
     a7e:	e4 e4       	ldi	r30, 0x44	; 68
     a80:	f1 e0       	ldi	r31, 0x01	; 1
     a82:	df 01       	movw	r26, r30
     a84:	1d 92       	st	X+, r1
     a86:	8a 95       	dec	r24
     a88:	e9 f7       	brne	.-6      	; 0xa84 <__stack+0x185>
     a8a:	ce e2       	ldi	r28, 0x2E	; 46
     a8c:	d1 e0       	ldi	r29, 0x01	; 1
     a8e:	87 e0       	ldi	r24, 0x07	; 7
     a90:	8e 8b       	std	Y+22, r24	; 0x16
     a92:	9b 85       	ldd	r25, Y+11	; 0x0b
     a94:	b0 e8       	ldi	r27, 0x80	; 128
     a96:	9b 9f       	mul	r25, r27
     a98:	a0 01       	movw	r20, r0
     a9a:	11 24       	eor	r1, r1
     a9c:	2a 85       	ldd	r18, Y+10	; 0x0a
     a9e:	30 e1       	ldi	r19, 0x10	; 16
     aa0:	23 9f       	mul	r18, r19
     aa2:	c0 01       	movw	r24, r0
     aa4:	11 24       	eor	r1, r1
     aa6:	94 2f       	mov	r25, r20
     aa8:	98 2b       	or	r25, r24
     aaa:	88 85       	ldd	r24, Y+8	; 0x08
     aac:	98 2b       	or	r25, r24
     aae:	89 85       	ldd	r24, Y+9	; 0x09
     ab0:	88 0f       	add	r24, r24
     ab2:	89 2b       	or	r24, r25
     ab4:	8f 8b       	std	Y+23, r24	; 0x17
     ab6:	49 89       	ldd	r20, Y+17	; 0x11
     ab8:	62 e0       	ldi	r22, 0x02	; 2
     aba:	cf 01       	movw	r24, r30
     abc:	0e 94 57 09 	call	0x12ae	; 0x12ae <I2C_Send_ST>
     ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ac2:	8a 8b       	std	Y+18, r24	; 0x12
     ac4:	83 e6       	ldi	r24, 0x63	; 99
     ac6:	8d 87       	std	Y+13, r24	; 0x0d
     ac8:	86 c0       	rjmp	.+268    	; 0xbd6 <__stack+0x2d7>
     aca:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     ace:	88 23       	and	r24, r24
     ad0:	09 f4       	brne	.+2      	; 0xad4 <__stack+0x1d5>
     ad2:	81 c0       	rjmp	.+258    	; 0xbd6 <__stack+0x2d7>
     ad4:	ee e2       	ldi	r30, 0x2E	; 46
     ad6:	f1 e0       	ldi	r31, 0x01	; 1
     ad8:	10 8a       	std	Z+16, r1	; 0x10
     ada:	14 86       	std	Z+12, r1	; 0x0c
     adc:	15 86       	std	Z+13, r1	; 0x0d
     ade:	13 8a       	std	Z+19, r1	; 0x13
     ae0:	7a c0       	rjmp	.+244    	; 0xbd6 <__stack+0x2d7>
     ae2:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     ae6:	0e 94 44 09 	call	0x1288	; 0x1288 <I2C_Ready>
     aea:	88 23       	and	r24, r24
     aec:	e9 f0       	breq	.+58     	; 0xb28 <__stack+0x229>
     aee:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     af2:	81 11       	cpse	r24, r1
     af4:	1e c0       	rjmp	.+60     	; 0xb32 <__stack+0x233>
     af6:	88 e0       	ldi	r24, 0x08	; 8
     af8:	e4 e4       	ldi	r30, 0x44	; 68
     afa:	f1 e0       	ldi	r31, 0x01	; 1
     afc:	df 01       	movw	r26, r30
     afe:	1d 92       	st	X+, r1
     b00:	8a 95       	dec	r24
     b02:	e9 f7       	brne	.-6      	; 0xafe <__stack+0x1ff>
     b04:	ce e2       	ldi	r28, 0x2E	; 46
     b06:	d1 e0       	ldi	r29, 0x01	; 1
     b08:	88 81       	ld	r24, Y
     b0a:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
     b0e:	8f 77       	andi	r24, 0x7F	; 127
     b10:	8f 8b       	std	Y+23, r24	; 0x17
     b12:	49 89       	ldd	r20, Y+17	; 0x11
     b14:	62 e0       	ldi	r22, 0x02	; 2
     b16:	84 e4       	ldi	r24, 0x44	; 68
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 57 09 	call	0x12ae	; 0x12ae <I2C_Send_ST>
     b1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b20:	8a 8b       	std	Y+18, r24	; 0x12
     b22:	83 e6       	ldi	r24, 0x63	; 99
     b24:	8d 87       	std	Y+13, r24	; 0x0d
     b26:	57 c0       	rjmp	.+174    	; 0xbd6 <__stack+0x2d7>
     b28:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     b2c:	88 23       	and	r24, r24
     b2e:	09 f4       	brne	.+2      	; 0xb32 <__stack+0x233>
     b30:	52 c0       	rjmp	.+164    	; 0xbd6 <__stack+0x2d7>
     b32:	ee e2       	ldi	r30, 0x2E	; 46
     b34:	f1 e0       	ldi	r31, 0x01	; 1
     b36:	10 8a       	std	Z+16, r1	; 0x10
     b38:	14 86       	std	Z+12, r1	; 0x0c
     b3a:	15 86       	std	Z+13, r1	; 0x0d
     b3c:	13 8a       	std	Z+19, r1	; 0x13
     b3e:	4b c0       	rjmp	.+150    	; 0xbd6 <__stack+0x2d7>
     b40:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     b44:	0e 94 44 09 	call	0x1288	; 0x1288 <I2C_Ready>
     b48:	88 23       	and	r24, r24
     b4a:	e9 f0       	breq	.+58     	; 0xb86 <__stack+0x287>
     b4c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     b50:	81 11       	cpse	r24, r1
     b52:	1d c0       	rjmp	.+58     	; 0xb8e <__stack+0x28f>
     b54:	88 e0       	ldi	r24, 0x08	; 8
     b56:	e4 e4       	ldi	r30, 0x44	; 68
     b58:	f1 e0       	ldi	r31, 0x01	; 1
     b5a:	df 01       	movw	r26, r30
     b5c:	1d 92       	st	X+, r1
     b5e:	8a 95       	dec	r24
     b60:	e9 f7       	brne	.-6      	; 0xb5c <__stack+0x25d>
     b62:	ce e2       	ldi	r28, 0x2E	; 46
     b64:	d1 e0       	ldi	r29, 0x01	; 1
     b66:	88 81       	ld	r24, Y
     b68:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
     b6c:	80 68       	ori	r24, 0x80	; 128
     b6e:	8f 8b       	std	Y+23, r24	; 0x17
     b70:	49 89       	ldd	r20, Y+17	; 0x11
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	84 e4       	ldi	r24, 0x44	; 68
     b76:	91 e0       	ldi	r25, 0x01	; 1
     b78:	0e 94 57 09 	call	0x12ae	; 0x12ae <I2C_Send_ST>
     b7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b7e:	8a 8b       	std	Y+18, r24	; 0x12
     b80:	83 e6       	ldi	r24, 0x63	; 99
     b82:	8d 87       	std	Y+13, r24	; 0x0d
     b84:	28 c0       	rjmp	.+80     	; 0xbd6 <__stack+0x2d7>
     b86:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <DS1307+0x10>
     b8a:	88 23       	and	r24, r24
     b8c:	21 f1       	breq	.+72     	; 0xbd6 <__stack+0x2d7>
     b8e:	ee e2       	ldi	r30, 0x2E	; 46
     b90:	f1 e0       	ldi	r31, 0x01	; 1
     b92:	10 8a       	std	Z+16, r1	; 0x10
     b94:	14 86       	std	Z+12, r1	; 0x0c
     b96:	15 86       	std	Z+13, r1	; 0x0d
     b98:	13 8a       	std	Z+19, r1	; 0x13
     b9a:	1d c0       	rjmp	.+58     	; 0xbd6 <__stack+0x2d7>
     b9c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     ba0:	0e 94 32 09 	call	0x1264	; 0x1264 <I2C_ID_State>
     ba4:	85 36       	cpi	r24, 0x65	; 101
     ba6:	51 f4       	brne	.+20     	; 0xbbc <__stack+0x2bd>
     ba8:	ce e2       	ldi	r28, 0x2E	; 46
     baa:	d1 e0       	ldi	r29, 0x01	; 1
     bac:	1d 86       	std	Y+13, r1	; 0x0d
     bae:	1b 8a       	std	Y+19, r1	; 0x13
     bb0:	89 89       	ldd	r24, Y+17	; 0x11
     bb2:	0e 94 3b 09 	call	0x1276	; 0x1276 <I2C_ID_Ack_Error>
     bb6:	8a e0       	ldi	r24, 0x0A	; 10
     bb8:	8e 87       	std	Y+14, r24	; 0x0e
     bba:	11 c0       	rjmp	.+34     	; 0xbde <__stack+0x2df>
     bbc:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <DS1307+0x11>
     bc0:	0e 94 44 09 	call	0x1288	; 0x1288 <I2C_Ready>
     bc4:	88 23       	and	r24, r24
     bc6:	39 f0       	breq	.+14     	; 0xbd6 <__stack+0x2d7>
     bc8:	ee e2       	ldi	r30, 0x2E	; 46
     bca:	f1 e0       	ldi	r31, 0x01	; 1
     bcc:	82 89       	ldd	r24, Z+18	; 0x12
     bce:	85 87       	std	Z+13, r24	; 0x0d
     bd0:	80 89       	ldd	r24, Z+16	; 0x10
     bd2:	8f 5f       	subi	r24, 0xFF	; 255
     bd4:	80 8b       	std	Z+16, r24	; 0x10
     bd6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <DS1307+0xe>
     bda:	88 23       	and	r24, r24
     bdc:	39 f0       	breq	.+14     	; 0xbec <__stack+0x2ed>
     bde:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <Timer_Pulse_1s>
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	81 11       	cpse	r24, r1
     be6:	03 c0       	rjmp	.+6      	; 0xbee <__stack+0x2ef>
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	01 c0       	rjmp	.+2      	; 0xbee <__stack+0x2ef>
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	ee e2       	ldi	r30, 0x2E	; 46
     bf0:	f1 e0       	ldi	r31, 0x01	; 1
     bf2:	86 85       	ldd	r24, Z+14	; 0x0e
     bf4:	89 1b       	sub	r24, r25
     bf6:	86 87       	std	Z+14, r24	; 0x0e
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	0f 91       	pop	r16
     bfe:	08 95       	ret

00000c00 <DS1307_Init>:
     c00:	88 e0       	ldi	r24, 0x08	; 8
     c02:	e4 e4       	ldi	r30, 0x44	; 68
     c04:	f1 e0       	ldi	r31, 0x01	; 1
     c06:	df 01       	movw	r26, r30
     c08:	1d 92       	st	X+, r1
     c0a:	8a 95       	dec	r24
     c0c:	e9 f7       	brne	.-6      	; 0xc08 <DS1307_Init+0x8>
     c0e:	ee e2       	ldi	r30, 0x2E	; 46
     c10:	f1 e0       	ldi	r31, 0x01	; 1
     c12:	10 8a       	std	Z+16, r1	; 0x10
     c14:	14 86       	std	Z+12, r1	; 0x0c
     c16:	81 89       	ldd	r24, Z+17	; 0x11
     c18:	81 11       	cpse	r24, r1
     c1a:	0e 94 a1 09 	call	0x1342	; 0x1342 <I2C_Free_Ident>
     c1e:	ee e2       	ldi	r30, 0x2E	; 46
     c20:	f1 e0       	ldi	r31, 0x01	; 1
     c22:	11 8a       	std	Z+17, r1	; 0x11
     c24:	16 86       	std	Z+14, r1	; 0x0e
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	83 8b       	std	Z+19, r24	; 0x13
     c2a:	08 95       	ret

00000c2c <DS1307_Ready>:
     c2c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <DS1307+0xd>
     c30:	81 11       	cpse	r24, r1
     c32:	0a c0       	rjmp	.+20     	; 0xc48 <DS1307_Ready+0x1c>
     c34:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <DS1307+0xc>
     c38:	81 30       	cpi	r24, 0x01	; 1
     c3a:	41 f4       	brne	.+16     	; 0xc4c <DS1307_Ready+0x20>
     c3c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <DS1307+0x13>
     c40:	99 23       	and	r25, r25
     c42:	29 f0       	breq	.+10     	; 0xc4e <DS1307_Ready+0x22>
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	08 95       	ret
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	08 95       	ret
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	08 95       	ret

00000c50 <DS1307_Get_DateTime>:
     c50:	9c 01       	movw	r18, r24
     c52:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <DS1307+0x13>
     c56:	91 11       	cpse	r25, r1
     c58:	06 c0       	rjmp	.+12     	; 0xc66 <DS1307_Get_DateTime+0x16>
     c5a:	ee e2       	ldi	r30, 0x2E	; 46
     c5c:	f1 e0       	ldi	r31, 0x01	; 1
     c5e:	35 8b       	std	Z+21, r19	; 0x15
     c60:	24 8b       	std	Z+20, r18	; 0x14
     c62:	84 e0       	ldi	r24, 0x04	; 4
     c64:	83 8b       	std	Z+19, r24	; 0x13
     c66:	08 95       	ret

00000c68 <DS1307_Get_TWLF>:
     c68:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <DS1307+0x7>
     c6c:	08 95       	ret

00000c6e <DS1307_Get_PM>:
     c6e:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <DS1307+0xf>
     c72:	08 95       	ret

00000c74 <DS1307_Set_DateTime>:
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	fc 01       	movw	r30, r24
     c7a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <DS1307+0x13>
     c7e:	91 11       	cpse	r25, r1
     c80:	0c c0       	rjmp	.+24     	; 0xc9a <DS1307_Set_DateTime+0x26>
     c82:	ce e2       	ldi	r28, 0x2E	; 46
     c84:	d1 e0       	ldi	r29, 0x01	; 1
     c86:	fd 8b       	std	Y+21, r31	; 0x15
     c88:	ec 8b       	std	Y+20, r30	; 0x14
     c8a:	86 e0       	ldi	r24, 0x06	; 6
     c8c:	de 01       	movw	r26, r28
     c8e:	01 90       	ld	r0, Z+
     c90:	0d 92       	st	X+, r0
     c92:	8a 95       	dec	r24
     c94:	e1 f7       	brne	.-8      	; 0xc8e <DS1307_Set_DateTime+0x1a>
     c96:	8d e0       	ldi	r24, 0x0D	; 13
     c98:	8b 8b       	std	Y+19, r24	; 0x13
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	08 95       	ret

00000ca0 <DS1307_Set_TWLF>:
	}
}

void DS1307_Set_TWLF(uint8_t _TWLF){
	if (DS1307.Command==Status_DS1307_Idle){
     ca0:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <DS1307+0x13>
     ca4:	91 11       	cpse	r25, r1
     ca6:	21 c0       	rjmp	.+66     	; 0xcea <DS1307_Set_TWLF+0x4a>
		DS1307.Setting.sTWLF=_TWLF>0;
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	81 11       	cpse	r24, r1
     cac:	01 c0       	rjmp	.+2      	; 0xcb0 <DS1307_Set_TWLF+0x10>
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <DS1307+0x7>
		if (DS1307.Time.Hour>12 && _TWLF){
     cb4:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <DS1307+0x2>
     cb8:	9d 30       	cpi	r25, 0x0D	; 13
     cba:	48 f0       	brcs	.+18     	; 0xcce <DS1307_Set_TWLF+0x2e>
     cbc:	88 23       	and	r24, r24
     cbe:	39 f0       	breq	.+14     	; 0xcce <DS1307_Set_TWLF+0x2e>
			DS1307.Time.Hour-=12;
     cc0:	ee e2       	ldi	r30, 0x2E	; 46
     cc2:	f1 e0       	ldi	r31, 0x01	; 1
     cc4:	9c 50       	subi	r25, 0x0C	; 12
     cc6:	92 83       	std	Z+2, r25	; 0x02
			DS1307.Is_PM=1;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	87 87       	std	Z+15, r24	; 0x0f
     ccc:	0b c0       	rjmp	.+22     	; 0xce4 <DS1307_Set_TWLF+0x44>
		}
		else if (DS1307.Is_PM && !_TWLF){
     cce:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <DS1307+0xf>
     cd2:	22 23       	and	r18, r18
     cd4:	39 f0       	breq	.+14     	; 0xce4 <DS1307_Set_TWLF+0x44>
     cd6:	81 11       	cpse	r24, r1
     cd8:	05 c0       	rjmp	.+10     	; 0xce4 <DS1307_Set_TWLF+0x44>
			DS1307.Time.Hour+=12;
     cda:	ee e2       	ldi	r30, 0x2E	; 46
     cdc:	f1 e0       	ldi	r31, 0x01	; 1
     cde:	94 5f       	subi	r25, 0xF4	; 244
     ce0:	92 83       	std	Z+2, r25	; 0x02
			DS1307.Is_PM=0;
     ce2:	17 86       	std	Z+15, r1	; 0x0f
		}
		DS1307.Command=Status_DS1307_SetTime;
     ce4:	8b e0       	ldi	r24, 0x0B	; 11
     ce6:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <DS1307+0x13>
     cea:	08 95       	ret

00000cec <DS1307_Set_PM>:
	}
}

void DS1307_Set_PM(uint8_t _PM){
	if (DS1307.Setting.sTWLF){
     cec:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <DS1307+0x7>
     cf0:	91 11       	cpse	r25, r1
		DS1307.Is_PM=_PM;
     cf2:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <DS1307+0xf>
     cf6:	08 95       	ret

00000cf8 <DS1307_Enable>:
	}
}

void DS1307_Enable(void){
	if (DS1307.Command==Status_DS1307_Idle){
     cf8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <DS1307+0x13>
     cfc:	81 11       	cpse	r24, r1
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <DS1307_Enable+0x12>
		DS1307.Setting.sCH=0;
     d00:	ee e2       	ldi	r30, 0x2E	; 46
     d02:	f1 e0       	ldi	r31, 0x01	; 1
     d04:	16 82       	std	Z+6, r1	; 0x06
		DS1307.Command=Status_DS1307_Enable;
     d06:	85 e1       	ldi	r24, 0x15	; 21
     d08:	83 8b       	std	Z+19, r24	; 0x13
     d0a:	08 95       	ret

00000d0c <DS1307_Disable>:
	}
}

void DS1307_Disable(void){
	if (DS1307.Command==Status_DS1307_Idle){
     d0c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <DS1307+0x13>
     d10:	81 11       	cpse	r24, r1
     d12:	06 c0       	rjmp	.+12     	; 0xd20 <DS1307_Disable+0x14>
		DS1307.Setting.sCH=1;
     d14:	ee e2       	ldi	r30, 0x2E	; 46
     d16:	f1 e0       	ldi	r31, 0x01	; 1
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	86 83       	std	Z+6, r24	; 0x06
		DS1307.Command=Status_DS1307_Disable;
     d1c:	86 e1       	ldi	r24, 0x16	; 22
     d1e:	83 8b       	std	Z+19, r24	; 0x13
     d20:	08 95       	ret

00000d22 <DS1307_Get_Enable>:
	}
}

uint8_t DS1307_Get_Enable(){
	return DS1307.Setting.sCH==0;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <DS1307+0x6>
     d28:	91 11       	cpse	r25, r1
     d2a:	80 e0       	ldi	r24, 0x00	; 0
}
     d2c:	08 95       	ret

00000d2e <EEPROM_Loop>:
#include "EEPROMlib/EEPROMlib.h"

EEPROMLib_Struct EEPROM;

void EEPROM_Loop(){
	switch(EEPROM.Status){
     d2e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <EEPROM>
     d32:	82 30       	cpi	r24, 0x02	; 2
     d34:	09 f4       	brne	.+2      	; 0xd38 <EEPROM_Loop+0xa>
     d36:	48 c0       	rjmp	.+144    	; 0xdc8 <EEPROM_Loop+0x9a>
     d38:	28 f4       	brcc	.+10     	; 0xd44 <EEPROM_Loop+0x16>
     d3a:	88 23       	and	r24, r24
     d3c:	51 f0       	breq	.+20     	; 0xd52 <EEPROM_Loop+0x24>
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	e9 f0       	breq	.+58     	; 0xd7c <EEPROM_Loop+0x4e>
     d42:	71 c0       	rjmp	.+226    	; 0xe26 <EEPROM_Loop+0xf8>
     d44:	83 30       	cpi	r24, 0x03	; 3
     d46:	09 f4       	brne	.+2      	; 0xd4a <EEPROM_Loop+0x1c>
     d48:	45 c0       	rjmp	.+138    	; 0xdd4 <EEPROM_Loop+0xa6>
     d4a:	84 30       	cpi	r24, 0x04	; 4
     d4c:	09 f4       	brne	.+2      	; 0xd50 <EEPROM_Loop+0x22>
     d4e:	65 c0       	rjmp	.+202    	; 0xe1a <EEPROM_Loop+0xec>
     d50:	6a c0       	rjmp	.+212    	; 0xe26 <EEPROM_Loop+0xf8>
		case EEPROM_Status_IDLE:{
			if ((EEPROM_EECR & (1<<EEPROM_EEPE))==0){
     d52:	f9 99       	sbic	0x1f, 1	; 31
     d54:	6a c0       	rjmp	.+212    	; 0xe2a <EEPROM_Loop+0xfc>
				if (EEPROM.Size){
     d56:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <EEPROM+0x3>
     d5a:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <EEPROM+0x4>
     d5e:	89 2b       	or	r24, r25
     d60:	09 f4       	brne	.+2      	; 0xd64 <EEPROM_Loop+0x36>
     d62:	63 c0       	rjmp	.+198    	; 0xe2a <EEPROM_Loop+0xfc>
					if (EEPROM.Write){
     d64:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <EEPROM+0x5>
     d68:	88 23       	and	r24, r24
     d6a:	21 f0       	breq	.+8      	; 0xd74 <EEPROM_Loop+0x46>
						EEPROM.Status=EEPROM_Status_Write;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <EEPROM>
     d72:	08 95       	ret
					}
					else{
						EEPROM.Status=EEPROM_Status_Read;
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <EEPROM>
     d7a:	08 95       	ret
		}//case EEPROM_Status_IDLE
		break;
		
//////////////////////////////////Write date to the EEPROM////////////////////////////////////////
		case EEPROM_Status_Write:{
			if (EEPROM.Size){
     d7c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <EEPROM+0x3>
     d80:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <EEPROM+0x4>
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	e9 f0       	breq	.+58     	; 0xdc2 <EEPROM_Loop+0x94>
				//Prepare to write to the EEPROM
				EEPROM.Size--;
     d88:	ec e4       	ldi	r30, 0x4C	; 76
     d8a:	f1 e0       	ldi	r31, 0x01	; 1
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	94 83       	std	Z+4, r25	; 0x04
     d90:	83 83       	std	Z+3, r24	; 0x03
				cli();
     d92:	f8 94       	cli
				EEPROM_EEAR		=EEPROM.Address++;
     d94:	81 81       	ldd	r24, Z+1	; 0x01
     d96:	92 81       	ldd	r25, Z+2	; 0x02
     d98:	9c 01       	movw	r18, r24
     d9a:	2f 5f       	subi	r18, 0xFF	; 255
     d9c:	3f 4f       	sbci	r19, 0xFF	; 255
     d9e:	32 83       	std	Z+2, r19	; 0x02
     da0:	21 83       	std	Z+1, r18	; 0x01
     da2:	92 bd       	out	0x22, r25	; 34
     da4:	81 bd       	out	0x21, r24	; 33
				EEPROM_EEDR		=*EEPROM.Data_ptr++;
     da6:	a6 81       	ldd	r26, Z+6	; 0x06
     da8:	b7 81       	ldd	r27, Z+7	; 0x07
     daa:	cd 01       	movw	r24, r26
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	97 83       	std	Z+7, r25	; 0x07
     db0:	86 83       	std	Z+6, r24	; 0x06
     db2:	8c 91       	ld	r24, X
     db4:	80 bd       	out	0x20, r24	; 32
				EEPROM_EECR		|=(1<<EEPROM_EEMPE);//Do we want to write to the EEPROM?
     db6:	fa 9a       	sbi	0x1f, 2	; 31
				EEPROM_EECR		|=(1<<EEPROM_EEPE);//Yes we do!
     db8:	f9 9a       	sbi	0x1f, 1	; 31
				sei();
     dba:	78 94       	sei
				EEPROM.Status	=EEPROM_Status_Write_Wait;//Wait for the writing to finish
     dbc:	82 e0       	ldi	r24, 0x02	; 2
     dbe:	80 83       	st	Z, r24
     dc0:	08 95       	ret
			}
			else{
				EEPROM.Status	=EEPROM_Status_IDLE;
     dc2:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <EEPROM>
     dc6:	08 95       	ret
			}
		}//case EEPROM_Status_Write
		break;
		
		case EEPROM_Status_Write_Wait:{
			if ((EEPROM_EECR & (1<<EEPROM_EEPE))==0){
     dc8:	f9 99       	sbic	0x1f, 1	; 31
     dca:	2f c0       	rjmp	.+94     	; 0xe2a <EEPROM_Loop+0xfc>
				EEPROM.Status	=EEPROM_Status_Write;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <EEPROM>
     dd2:	08 95       	ret
		}//case EEPROM_Status_Read_Wait
		break;

//////////////////////////////////Read data from the EEPROM////////////////////////////////////////
		case EEPROM_Status_Read:{
			if (EEPROM.Size>0){
     dd4:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <EEPROM+0x3>
     dd8:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <EEPROM+0x4>
     ddc:	00 97       	sbiw	r24, 0x00	; 0
     dde:	d1 f0       	breq	.+52     	; 0xe14 <EEPROM_Loop+0xe6>
				//Prepare to read from the EEPROM
				EEPROM.Size--;
     de0:	ec e4       	ldi	r30, 0x4C	; 76
     de2:	f1 e0       	ldi	r31, 0x01	; 1
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	94 83       	std	Z+4, r25	; 0x04
     de8:	83 83       	std	Z+3, r24	; 0x03
				EEPROM_EEAR		=EEPROM.Address++;
     dea:	81 81       	ldd	r24, Z+1	; 0x01
     dec:	92 81       	ldd	r25, Z+2	; 0x02
     dee:	9c 01       	movw	r18, r24
     df0:	2f 5f       	subi	r18, 0xFF	; 255
     df2:	3f 4f       	sbci	r19, 0xFF	; 255
     df4:	32 83       	std	Z+2, r19	; 0x02
     df6:	21 83       	std	Z+1, r18	; 0x01
     df8:	92 bd       	out	0x22, r25	; 34
     dfa:	81 bd       	out	0x21, r24	; 33
				EEPROM_EECR		|=(1<<EEPROM_EERE);//Read from the EEPROM
     dfc:	f8 9a       	sbi	0x1f, 0	; 31
				*EEPROM.Data_ptr++ =EEPROM_EEDR;
     dfe:	a6 81       	ldd	r26, Z+6	; 0x06
     e00:	b7 81       	ldd	r27, Z+7	; 0x07
     e02:	cd 01       	movw	r24, r26
     e04:	01 96       	adiw	r24, 0x01	; 1
     e06:	97 83       	std	Z+7, r25	; 0x07
     e08:	86 83       	std	Z+6, r24	; 0x06
     e0a:	80 b5       	in	r24, 0x20	; 32
     e0c:	8c 93       	st	X, r24
				EEPROM.Status	=EEPROM_Status_Read_Wait;//Wait for the writing to finish
     e0e:	84 e0       	ldi	r24, 0x04	; 4
     e10:	80 83       	st	Z, r24
     e12:	08 95       	ret
			}
			else{
				EEPROM.Status	=EEPROM_Status_IDLE;
     e14:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <EEPROM>
     e18:	08 95       	ret
			}
		}//case EEPROM_Status_Read
		break;
		
		case EEPROM_Status_Read_Wait:{
			if ((EEPROM_EECR & (1<<EEPROM_EEPE))==0){
     e1a:	f9 99       	sbic	0x1f, 1	; 31
     e1c:	06 c0       	rjmp	.+12     	; 0xe2a <EEPROM_Loop+0xfc>
				EEPROM.Status	=EEPROM_Status_Read;
     e1e:	83 e0       	ldi	r24, 0x03	; 3
     e20:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <EEPROM>
     e24:	08 95       	ret
			}
		}//case EEPROM_Status_Read_Wait
		break;

		default:{
			EEPROM.Status=EEPROM_Status_IDLE;
     e26:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <EEPROM>
     e2a:	08 95       	ret

00000e2c <EEPROM_Status>:
		}
	}//switch(EEPROM.Status)
}//EEPROM_Loop

uint8_t EEPROM_Status(){
	if (EEPROM.Size>0){
     e2c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <EEPROM+0x3>
     e30:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <EEPROM+0x4>
     e34:	89 2b       	or	r24, r25
     e36:	19 f4       	brne	.+6      	; 0xe3e <EEPROM_Status+0x12>
		return EEPROM_Status_Busy;
	}
	return EEPROM.Status;
     e38:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <EEPROM>
     e3c:	08 95       	ret
	}//switch(EEPROM.Status)
}//EEPROM_Loop

uint8_t EEPROM_Status(){
	if (EEPROM.Size>0){
		return EEPROM_Status_Busy;
     e3e:	83 e6       	ldi	r24, 0x63	; 99
	}
	return EEPROM.Status;
}
     e40:	08 95       	ret

00000e42 <EEPROM_Write>:

void EEPROM_Write(uint16_t _Address, uint16_t _Size, uint8_t *_Data_ptr){
	EEPROM.Address	=_Address;
     e42:	ec e4       	ldi	r30, 0x4C	; 76
     e44:	f1 e0       	ldi	r31, 0x01	; 1
     e46:	92 83       	std	Z+2, r25	; 0x02
     e48:	81 83       	std	Z+1, r24	; 0x01
	EEPROM.Size		=_Size;
     e4a:	74 83       	std	Z+4, r23	; 0x04
     e4c:	63 83       	std	Z+3, r22	; 0x03
	EEPROM.Data_ptr	=_Data_ptr;
     e4e:	57 83       	std	Z+7, r21	; 0x07
     e50:	46 83       	std	Z+6, r20	; 0x06
	EEPROM.Write++;
     e52:	85 81       	ldd	r24, Z+5	; 0x05
     e54:	8f 5f       	subi	r24, 0xFF	; 255
     e56:	85 83       	std	Z+5, r24	; 0x05
     e58:	08 95       	ret

00000e5a <EEPROM_Read>:
}

void EEPROM_Read(uint16_t _Address, uint16_t _Size, uint8_t *_Data_ptr){
	EEPROM.Address	=_Address;
     e5a:	ec e4       	ldi	r30, 0x4C	; 76
     e5c:	f1 e0       	ldi	r31, 0x01	; 1
     e5e:	92 83       	std	Z+2, r25	; 0x02
     e60:	81 83       	std	Z+1, r24	; 0x01
	EEPROM.Size		=_Size;
     e62:	74 83       	std	Z+4, r23	; 0x04
     e64:	63 83       	std	Z+3, r22	; 0x03
	EEPROM.Data_ptr	=_Data_ptr;
     e66:	57 83       	std	Z+7, r21	; 0x07
     e68:	46 83       	std	Z+6, r20	; 0x06
	EEPROM.Write	=0;
     e6a:	15 82       	std	Z+5, r1	; 0x05
     e6c:	08 95       	ret

00000e6e <I2C_Loop>:
void I2C_Recieve(uint8_t *_Data_Ptr, uint8_t _Amount, uint8_t _Ident){
	if ((int)_Data_Ptr > RAMSTART && (int)_Data_Ptr < RAMEND){
		TWI.Ident[_Ident].Receive_Data_ptr=_Data_Ptr;
		TWI.Ident[_Ident].Receive_Amount=_Amount;
		TWI.Ident[_Ident].Send=false;
		TWI.Ident[_Ident].Status=State_I2C_Start;
     e6e:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <TWI+0x2>
     e72:	e4 36       	cpi	r30, 0x64	; 100
     e74:	10 f4       	brcc	.+4      	; 0xe7a <I2C_Loop+0xc>
     e76:	e0 93 57 01 	sts	0x0157, r30	; 0x800157 <TWI+0x3>
     e7a:	8e 2f       	mov	r24, r30
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	85 36       	cpi	r24, 0x65	; 101
     e80:	91 05       	cpc	r25, r1
     e82:	08 f0       	brcs	.+2      	; 0xe86 <I2C_Loop+0x18>
     e84:	e1 c1       	rjmp	.+962    	; 0x1248 <I2C_Loop+0x3da>
     e86:	fc 01       	movw	r30, r24
     e88:	e8 56       	subi	r30, 0x68	; 104
     e8a:	ff 4f       	sbci	r31, 0xFF	; 255
     e8c:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__tablejump2__>
     e90:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <TWI>
     e94:	88 23       	and	r24, r24
     e96:	09 f4       	brne	.+2      	; 0xe9a <I2C_Loop+0x2c>
     e98:	d9 c1       	rjmp	.+946    	; 0x124c <I2C_Loop+0x3de>
     e9a:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <TWI+0x1>
     e9e:	88 23       	and	r24, r24
     ea0:	09 f4       	brne	.+2      	; 0xea4 <I2C_Loop+0x36>
     ea2:	d4 c1       	rjmp	.+936    	; 0x124c <I2C_Loop+0x3de>
     ea4:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <TWI+0x7>
     ea8:	8f 5f       	subi	r24, 0xFF	; 255
     eaa:	82 30       	cpi	r24, 0x02	; 2
     eac:	18 f4       	brcc	.+6      	; 0xeb4 <I2C_Loop+0x46>
     eae:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <TWI+0x7>
     eb2:	03 c0       	rjmp	.+6      	; 0xeba <I2C_Loop+0x4c>
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <TWI+0x7>
     eba:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <TWI+0x7>
     ebe:	8e 2f       	mov	r24, r30
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	2f e0       	ldi	r18, 0x0F	; 15
     ec4:	e2 9f       	mul	r30, r18
     ec6:	f0 01       	movw	r30, r0
     ec8:	11 24       	eor	r1, r1
     eca:	ec 5a       	subi	r30, 0xAC	; 172
     ecc:	fe 4f       	sbci	r31, 0xFE	; 254
     ece:	21 89       	ldd	r18, Z+17	; 0x11
     ed0:	21 11       	cpse	r18, r1
     ed2:	0c c0       	rjmp	.+24     	; 0xeec <I2C_Loop+0x7e>
     ed4:	2f e0       	ldi	r18, 0x0F	; 15
     ed6:	28 9f       	mul	r18, r24
     ed8:	f0 01       	movw	r30, r0
     eda:	29 9f       	mul	r18, r25
     edc:	f0 0d       	add	r31, r0
     ede:	11 24       	eor	r1, r1
     ee0:	ec 5a       	subi	r30, 0xAC	; 172
     ee2:	fe 4f       	sbci	r31, 0xFE	; 254
     ee4:	22 89       	ldd	r18, Z+18	; 0x12
     ee6:	22 23       	and	r18, r18
     ee8:	09 f4       	brne	.+2      	; 0xeec <I2C_Loop+0x7e>
     eea:	b0 c1       	rjmp	.+864    	; 0x124c <I2C_Loop+0x3de>
     eec:	2f e0       	ldi	r18, 0x0F	; 15
     eee:	28 9f       	mul	r18, r24
     ef0:	f0 01       	movw	r30, r0
     ef2:	29 9f       	mul	r18, r25
     ef4:	f0 0d       	add	r31, r0
     ef6:	11 24       	eor	r1, r1
     ef8:	ec 5a       	subi	r30, 0xAC	; 172
     efa:	fe 4f       	sbci	r31, 0xFE	; 254
     efc:	81 8d       	ldd	r24, Z+25	; 0x19
     efe:	88 23       	and	r24, r24
     f00:	09 f4       	brne	.+2      	; 0xf04 <I2C_Loop+0x96>
     f02:	a4 c1       	rjmp	.+840    	; 0x124c <I2C_Loop+0x3de>
     f04:	82 e0       	ldi	r24, 0x02	; 2
     f06:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
     f0a:	08 95       	ret
     f0c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     f10:	80 e2       	ldi	r24, 0x20	; 32
     f12:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     f16:	84 e0       	ldi	r24, 0x04	; 4
     f18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f1c:	88 b1       	in	r24, 0x08	; 8
     f1e:	80 63       	ori	r24, 0x30	; 48
     f20:	88 b9       	out	0x08, r24	; 8
     f22:	e4 e5       	ldi	r30, 0x54	; 84
     f24:	f1 e0       	ldi	r31, 0x01	; 1
     f26:	10 a6       	std	Z+40, r1	; 0x28
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	81 83       	std	Z+1, r24	; 0x01
     f2c:	12 82       	std	Z+2, r1	; 0x02
     f2e:	87 83       	std	Z+7, r24	; 0x07
     f30:	08 95       	ret
     f32:	83 e0       	ldi	r24, 0x03	; 3
     f34:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
     f38:	84 ea       	ldi	r24, 0xA4	; 164
     f3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f3e:	08 95       	ret
     f40:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f44:	88 23       	and	r24, r24
     f46:	0c f0       	brlt	.+2      	; 0xf4a <I2C_Loop+0xdc>
     f48:	81 c1       	rjmp	.+770    	; 0x124c <I2C_Loop+0x3de>
     f4a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     f4e:	88 7f       	andi	r24, 0xF8	; 248
     f50:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <TWI+0x8>
     f54:	88 30       	cpi	r24, 0x08	; 8
     f56:	11 f0       	breq	.+4      	; 0xf5c <I2C_Loop+0xee>
     f58:	80 31       	cpi	r24, 0x10	; 16
     f5a:	21 f4       	brne	.+8      	; 0xf64 <I2C_Loop+0xf6>
     f5c:	84 e0       	ldi	r24, 0x04	; 4
     f5e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
     f62:	08 95       	ret
     f64:	e4 e5       	ldi	r30, 0x54	; 84
     f66:	f1 e0       	ldi	r31, 0x01	; 1
     f68:	94 e6       	ldi	r25, 0x64	; 100
     f6a:	92 83       	std	Z+2, r25	; 0x02
     f6c:	83 83       	std	Z+3, r24	; 0x03
     f6e:	08 95       	ret
     f70:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <TWI+0x7>
     f74:	2e 2f       	mov	r18, r30
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	8f e0       	ldi	r24, 0x0F	; 15
     f7a:	e8 9f       	mul	r30, r24
     f7c:	f0 01       	movw	r30, r0
     f7e:	11 24       	eor	r1, r1
     f80:	ec 5a       	subi	r30, 0xAC	; 172
     f82:	fe 4f       	sbci	r31, 0xFE	; 254
     f84:	81 89       	ldd	r24, Z+17	; 0x11
     f86:	88 23       	and	r24, r24
     f88:	99 f0       	breq	.+38     	; 0xfb0 <I2C_Loop+0x142>
     f8a:	85 e0       	ldi	r24, 0x05	; 5
     f8c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
     f90:	8f e0       	ldi	r24, 0x0F	; 15
     f92:	82 9f       	mul	r24, r18
     f94:	f0 01       	movw	r30, r0
     f96:	83 9f       	mul	r24, r19
     f98:	f0 0d       	add	r31, r0
     f9a:	11 24       	eor	r1, r1
     f9c:	ec 5a       	subi	r30, 0xAC	; 172
     f9e:	fe 4f       	sbci	r31, 0xFE	; 254
     fa0:	85 89       	ldd	r24, Z+21	; 0x15
     fa2:	88 0f       	add	r24, r24
     fa4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     fa8:	84 e8       	ldi	r24, 0x84	; 132
     faa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     fae:	08 95       	ret
     fb0:	85 e0       	ldi	r24, 0x05	; 5
     fb2:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
     fb6:	8f e0       	ldi	r24, 0x0F	; 15
     fb8:	82 9f       	mul	r24, r18
     fba:	f0 01       	movw	r30, r0
     fbc:	83 9f       	mul	r24, r19
     fbe:	f0 0d       	add	r31, r0
     fc0:	11 24       	eor	r1, r1
     fc2:	ec 5a       	subi	r30, 0xAC	; 172
     fc4:	fe 4f       	sbci	r31, 0xFE	; 254
     fc6:	85 89       	ldd	r24, Z+21	; 0x15
     fc8:	88 0f       	add	r24, r24
     fca:	8f 5f       	subi	r24, 0xFF	; 255
     fcc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     fd0:	84 e8       	ldi	r24, 0x84	; 132
     fd2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     fd6:	08 95       	ret
     fd8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     fdc:	88 23       	and	r24, r24
     fde:	0c f0       	brlt	.+2      	; 0xfe2 <I2C_Loop+0x174>
     fe0:	35 c1       	rjmp	.+618    	; 0x124c <I2C_Loop+0x3de>
     fe2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     fe6:	88 7f       	andi	r24, 0xF8	; 248
     fe8:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <TWI+0x8>
     fec:	88 31       	cpi	r24, 0x18	; 24
     fee:	11 f0       	breq	.+4      	; 0xff4 <I2C_Loop+0x186>
     ff0:	80 34       	cpi	r24, 0x40	; 64
     ff2:	99 f4       	brne	.+38     	; 0x101a <I2C_Loop+0x1ac>
     ff4:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <TWI+0x7>
     ff8:	2f e0       	ldi	r18, 0x0F	; 15
     ffa:	e2 9f       	mul	r30, r18
     ffc:	f0 01       	movw	r30, r0
     ffe:	11 24       	eor	r1, r1
    1000:	ec 5a       	subi	r30, 0xAC	; 172
    1002:	fe 4f       	sbci	r31, 0xFE	; 254
    1004:	81 89       	ldd	r24, Z+17	; 0x11
    1006:	88 23       	and	r24, r24
    1008:	21 f0       	breq	.+8      	; 0x1012 <I2C_Loop+0x1a4>
    100a:	8a e0       	ldi	r24, 0x0A	; 10
    100c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
    1010:	08 95       	ret
    1012:	8c e0       	ldi	r24, 0x0C	; 12
    1014:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
    1018:	08 95       	ret
    101a:	80 32       	cpi	r24, 0x20	; 32
    101c:	91 f4       	brne	.+36     	; 0x1042 <I2C_Loop+0x1d4>
    101e:	e4 e5       	ldi	r30, 0x54	; 84
    1020:	f1 e0       	ldi	r31, 0x01	; 1
    1022:	12 82       	std	Z+2, r1	; 0x02
    1024:	e7 81       	ldd	r30, Z+7	; 0x07
    1026:	8f e0       	ldi	r24, 0x0F	; 15
    1028:	e8 9f       	mul	r30, r24
    102a:	f0 01       	movw	r30, r0
    102c:	11 24       	eor	r1, r1
    102e:	ec 5a       	subi	r30, 0xAC	; 172
    1030:	fe 4f       	sbci	r31, 0xFE	; 254
    1032:	11 8a       	std	Z+17, r1	; 0x11
    1034:	12 8a       	std	Z+18, r1	; 0x12
    1036:	85 e6       	ldi	r24, 0x65	; 101
    1038:	80 8f       	std	Z+24, r24	; 0x18
    103a:	84 e9       	ldi	r24, 0x94	; 148
    103c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1040:	08 95       	ret
    1042:	88 33       	cpi	r24, 0x38	; 56
    1044:	21 f4       	brne	.+8      	; 0x104e <I2C_Loop+0x1e0>
    1046:	82 e0       	ldi	r24, 0x02	; 2
    1048:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
    104c:	08 95       	ret
    104e:	e4 e5       	ldi	r30, 0x54	; 84
    1050:	f1 e0       	ldi	r31, 0x01	; 1
    1052:	83 83       	std	Z+3, r24	; 0x03
    1054:	84 e6       	ldi	r24, 0x64	; 100
    1056:	82 83       	std	Z+2, r24	; 0x02
    1058:	08 95       	ret
    105a:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <TWI+0x7>
    105e:	8e 2f       	mov	r24, r30
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	2f e0       	ldi	r18, 0x0F	; 15
    1064:	e2 9f       	mul	r30, r18
    1066:	f0 01       	movw	r30, r0
    1068:	11 24       	eor	r1, r1
    106a:	ec 5a       	subi	r30, 0xAC	; 172
    106c:	fe 4f       	sbci	r31, 0xFE	; 254
    106e:	21 89       	ldd	r18, Z+17	; 0x11
    1070:	22 23       	and	r18, r18
    1072:	a9 f0       	breq	.+42     	; 0x109e <I2C_Loop+0x230>
    1074:	2f e0       	ldi	r18, 0x0F	; 15
    1076:	28 9f       	mul	r18, r24
    1078:	f0 01       	movw	r30, r0
    107a:	29 9f       	mul	r18, r25
    107c:	f0 0d       	add	r31, r0
    107e:	11 24       	eor	r1, r1
    1080:	ec 5a       	subi	r30, 0xAC	; 172
    1082:	fe 4f       	sbci	r31, 0xFE	; 254
    1084:	03 84       	ldd	r0, Z+11	; 0x0b
    1086:	f4 85       	ldd	r31, Z+12	; 0x0c
    1088:	e0 2d       	mov	r30, r0
    108a:	80 81       	ld	r24, Z
    108c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1090:	84 e8       	ldi	r24, 0x84	; 132
    1092:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1096:	8b e0       	ldi	r24, 0x0B	; 11
    1098:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
    109c:	08 95       	ret
    109e:	2f e0       	ldi	r18, 0x0F	; 15
    10a0:	28 9f       	mul	r18, r24
    10a2:	f0 01       	movw	r30, r0
    10a4:	29 9f       	mul	r18, r25
    10a6:	f0 0d       	add	r31, r0
    10a8:	11 24       	eor	r1, r1
    10aa:	ec 5a       	subi	r30, 0xAC	; 172
    10ac:	fe 4f       	sbci	r31, 0xFE	; 254
    10ae:	22 89       	ldd	r18, Z+18	; 0x12
    10b0:	22 23       	and	r18, r18
    10b2:	21 f0       	breq	.+8      	; 0x10bc <I2C_Loop+0x24e>
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
    10ba:	08 95       	ret
    10bc:	2f e0       	ldi	r18, 0x0F	; 15
    10be:	28 9f       	mul	r18, r24
    10c0:	f0 01       	movw	r30, r0
    10c2:	29 9f       	mul	r18, r25
    10c4:	f0 0d       	add	r31, r0
    10c6:	11 24       	eor	r1, r1
    10c8:	ec 5a       	subi	r30, 0xAC	; 172
    10ca:	fe 4f       	sbci	r31, 0xFE	; 254
    10cc:	10 8e       	std	Z+24, r1	; 0x18
    10ce:	84 e9       	ldi	r24, 0x94	; 148
    10d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    10d4:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <TWI+0x2>
    10d8:	08 95       	ret
    10da:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    10de:	88 23       	and	r24, r24
    10e0:	0c f0       	brlt	.+2      	; 0x10e4 <I2C_Loop+0x276>
    10e2:	b4 c0       	rjmp	.+360    	; 0x124c <I2C_Loop+0x3de>
    10e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    10e8:	88 7f       	andi	r24, 0xF8	; 248
    10ea:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <TWI+0x8>
    10ee:	88 32       	cpi	r24, 0x28	; 40
    10f0:	b9 f4       	brne	.+46     	; 0x1120 <I2C_Loop+0x2b2>
    10f2:	a4 e5       	ldi	r26, 0x54	; 84
    10f4:	b1 e0       	ldi	r27, 0x01	; 1
    10f6:	17 96       	adiw	r26, 0x07	; 7
    10f8:	ec 91       	ld	r30, X
    10fa:	17 97       	sbiw	r26, 0x07	; 7
    10fc:	8f e0       	ldi	r24, 0x0F	; 15
    10fe:	e8 9f       	mul	r30, r24
    1100:	f0 01       	movw	r30, r0
    1102:	11 24       	eor	r1, r1
    1104:	ec 5a       	subi	r30, 0xAC	; 172
    1106:	fe 4f       	sbci	r31, 0xFE	; 254
    1108:	83 85       	ldd	r24, Z+11	; 0x0b
    110a:	94 85       	ldd	r25, Z+12	; 0x0c
    110c:	01 96       	adiw	r24, 0x01	; 1
    110e:	94 87       	std	Z+12, r25	; 0x0c
    1110:	83 87       	std	Z+11, r24	; 0x0b
    1112:	81 89       	ldd	r24, Z+17	; 0x11
    1114:	81 50       	subi	r24, 0x01	; 1
    1116:	81 8b       	std	Z+17, r24	; 0x11
    1118:	8a e0       	ldi	r24, 0x0A	; 10
    111a:	12 96       	adiw	r26, 0x02	; 2
    111c:	8c 93       	st	X, r24
    111e:	08 95       	ret
    1120:	84 e9       	ldi	r24, 0x94	; 148
    1122:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1126:	a4 e5       	ldi	r26, 0x54	; 84
    1128:	b1 e0       	ldi	r27, 0x01	; 1
    112a:	17 96       	adiw	r26, 0x07	; 7
    112c:	ec 91       	ld	r30, X
    112e:	17 97       	sbiw	r26, 0x07	; 7
    1130:	2f e0       	ldi	r18, 0x0F	; 15
    1132:	e2 9f       	mul	r30, r18
    1134:	f0 01       	movw	r30, r0
    1136:	11 24       	eor	r1, r1
    1138:	ec 5a       	subi	r30, 0xAC	; 172
    113a:	fe 4f       	sbci	r31, 0xFE	; 254
    113c:	18 96       	adiw	r26, 0x08	; 8
    113e:	8c 91       	ld	r24, X
    1140:	18 97       	sbiw	r26, 0x08	; 8
    1142:	80 8f       	std	Z+24, r24	; 0x18
    1144:	14 86       	std	Z+12, r1	; 0x0c
    1146:	13 86       	std	Z+11, r1	; 0x0b
    1148:	11 8a       	std	Z+17, r1	; 0x11
    114a:	16 86       	std	Z+14, r1	; 0x0e
    114c:	15 86       	std	Z+13, r1	; 0x0d
    114e:	12 8a       	std	Z+18, r1	; 0x12
    1150:	12 96       	adiw	r26, 0x02	; 2
    1152:	1c 92       	st	X, r1
    1154:	08 95       	ret
    1156:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <TWI+0x7>
    115a:	2e 2f       	mov	r18, r30
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	8f e0       	ldi	r24, 0x0F	; 15
    1160:	e8 9f       	mul	r30, r24
    1162:	f0 01       	movw	r30, r0
    1164:	11 24       	eor	r1, r1
    1166:	ec 5a       	subi	r30, 0xAC	; 172
    1168:	fe 4f       	sbci	r31, 0xFE	; 254
    116a:	82 89       	ldd	r24, Z+18	; 0x12
    116c:	82 30       	cpi	r24, 0x02	; 2
    116e:	38 f0       	brcs	.+14     	; 0x117e <I2C_Loop+0x310>
    1170:	84 ec       	ldi	r24, 0xC4	; 196
    1172:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1176:	8d e0       	ldi	r24, 0x0D	; 13
    1178:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
    117c:	08 95       	ret
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	39 f4       	brne	.+14     	; 0x1190 <I2C_Loop+0x322>
    1182:	84 e8       	ldi	r24, 0x84	; 132
    1184:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1188:	8d e0       	ldi	r24, 0x0D	; 13
    118a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI+0x2>
    118e:	08 95       	ret
    1190:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <TWI+0x2>
    1194:	8f e0       	ldi	r24, 0x0F	; 15
    1196:	82 9f       	mul	r24, r18
    1198:	f0 01       	movw	r30, r0
    119a:	83 9f       	mul	r24, r19
    119c:	f0 0d       	add	r31, r0
    119e:	11 24       	eor	r1, r1
    11a0:	ec 5a       	subi	r30, 0xAC	; 172
    11a2:	fe 4f       	sbci	r31, 0xFE	; 254
    11a4:	10 8e       	std	Z+24, r1	; 0x18
    11a6:	84 e9       	ldi	r24, 0x94	; 148
    11a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    11ac:	08 95       	ret
    11ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    11b2:	88 23       	and	r24, r24
    11b4:	0c f0       	brlt	.+2      	; 0x11b8 <I2C_Loop+0x34a>
    11b6:	4a c0       	rjmp	.+148    	; 0x124c <I2C_Loop+0x3de>
    11b8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    11bc:	98 2f       	mov	r25, r24
    11be:	98 7f       	andi	r25, 0xF8	; 248
    11c0:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <TWI+0x8>
    11c4:	80 7f       	andi	r24, 0xF0	; 240
    11c6:	80 35       	cpi	r24, 0x50	; 80
    11c8:	29 f5       	brne	.+74     	; 0x1214 <I2C_Loop+0x3a6>
    11ca:	a4 e5       	ldi	r26, 0x54	; 84
    11cc:	b1 e0       	ldi	r27, 0x01	; 1
    11ce:	17 96       	adiw	r26, 0x07	; 7
    11d0:	ec 91       	ld	r30, X
    11d2:	17 97       	sbiw	r26, 0x07	; 7
    11d4:	8f e0       	ldi	r24, 0x0F	; 15
    11d6:	8e 9f       	mul	r24, r30
    11d8:	f0 01       	movw	r30, r0
    11da:	11 24       	eor	r1, r1
    11dc:	ec 5a       	subi	r30, 0xAC	; 172
    11de:	fe 4f       	sbci	r31, 0xFE	; 254
    11e0:	05 84       	ldd	r0, Z+13	; 0x0d
    11e2:	f6 85       	ldd	r31, Z+14	; 0x0e
    11e4:	e0 2d       	mov	r30, r0
    11e6:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    11ea:	90 83       	st	Z, r25
    11ec:	17 96       	adiw	r26, 0x07	; 7
    11ee:	ec 91       	ld	r30, X
    11f0:	17 97       	sbiw	r26, 0x07	; 7
    11f2:	8e 9f       	mul	r24, r30
    11f4:	f0 01       	movw	r30, r0
    11f6:	11 24       	eor	r1, r1
    11f8:	ec 5a       	subi	r30, 0xAC	; 172
    11fa:	fe 4f       	sbci	r31, 0xFE	; 254
    11fc:	85 85       	ldd	r24, Z+13	; 0x0d
    11fe:	96 85       	ldd	r25, Z+14	; 0x0e
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	96 87       	std	Z+14, r25	; 0x0e
    1204:	85 87       	std	Z+13, r24	; 0x0d
    1206:	82 89       	ldd	r24, Z+18	; 0x12
    1208:	81 50       	subi	r24, 0x01	; 1
    120a:	82 8b       	std	Z+18, r24	; 0x12
    120c:	8c e0       	ldi	r24, 0x0C	; 12
    120e:	12 96       	adiw	r26, 0x02	; 2
    1210:	8c 93       	st	X, r24
    1212:	08 95       	ret
    1214:	84 e9       	ldi	r24, 0x94	; 148
    1216:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    121a:	a4 e5       	ldi	r26, 0x54	; 84
    121c:	b1 e0       	ldi	r27, 0x01	; 1
    121e:	17 96       	adiw	r26, 0x07	; 7
    1220:	ec 91       	ld	r30, X
    1222:	17 97       	sbiw	r26, 0x07	; 7
    1224:	2f e0       	ldi	r18, 0x0F	; 15
    1226:	e2 9f       	mul	r30, r18
    1228:	f0 01       	movw	r30, r0
    122a:	11 24       	eor	r1, r1
    122c:	ec 5a       	subi	r30, 0xAC	; 172
    122e:	fe 4f       	sbci	r31, 0xFE	; 254
    1230:	18 96       	adiw	r26, 0x08	; 8
    1232:	8c 91       	ld	r24, X
    1234:	18 97       	sbiw	r26, 0x08	; 8
    1236:	80 8f       	std	Z+24, r24	; 0x18
    1238:	16 86       	std	Z+14, r1	; 0x0e
    123a:	15 86       	std	Z+13, r1	; 0x0d
    123c:	12 8a       	std	Z+18, r1	; 0x12
    123e:	12 96       	adiw	r26, 0x02	; 2
    1240:	1c 92       	st	X, r1
    1242:	08 95       	ret
    1244:	00 00       	nop
    1246:	08 95       	ret
    1248:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <TWI+0x2>
    124c:	08 95       	ret

0000124e <I2C_Init>:
    124e:	e4 e5       	ldi	r30, 0x54	; 84
    1250:	f1 e0       	ldi	r31, 0x01	; 1
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	81 87       	std	Z+9, r24	; 0x09
    1256:	82 83       	std	Z+2, r24	; 0x02
    1258:	11 82       	std	Z+1, r1	; 0x01
    125a:	08 95       	ret

0000125c <I2C_Enable>:
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <TWI>
    1262:	08 95       	ret

00001264 <I2C_ID_State>:
    1264:	2f e0       	ldi	r18, 0x0F	; 15
    1266:	82 9f       	mul	r24, r18
    1268:	c0 01       	movw	r24, r0
    126a:	11 24       	eor	r1, r1
    126c:	fc 01       	movw	r30, r24
    126e:	ec 5a       	subi	r30, 0xAC	; 172
    1270:	fe 4f       	sbci	r31, 0xFE	; 254
    1272:	80 8d       	ldd	r24, Z+24	; 0x18
    1274:	08 95       	ret

00001276 <I2C_ID_Ack_Error>:
    1276:	2f e0       	ldi	r18, 0x0F	; 15
    1278:	82 9f       	mul	r24, r18
    127a:	c0 01       	movw	r24, r0
    127c:	11 24       	eor	r1, r1
    127e:	fc 01       	movw	r30, r24
    1280:	ec 5a       	subi	r30, 0xAC	; 172
    1282:	fe 4f       	sbci	r31, 0xFE	; 254
    1284:	10 8e       	std	Z+24, r1	; 0x18
    1286:	08 95       	ret

00001288 <I2C_Ready>:
    1288:	2f e0       	ldi	r18, 0x0F	; 15
    128a:	82 9f       	mul	r24, r18
    128c:	c0 01       	movw	r24, r0
    128e:	11 24       	eor	r1, r1
    1290:	fc 01       	movw	r30, r24
    1292:	ec 5a       	subi	r30, 0xAC	; 172
    1294:	fe 4f       	sbci	r31, 0xFE	; 254
    1296:	80 8d       	ldd	r24, Z+24	; 0x18
    1298:	81 11       	cpse	r24, r1
    129a:	07 c0       	rjmp	.+14     	; 0x12aa <I2C_Ready+0x22>
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <TWI+0x1>
    12a2:	91 11       	cpse	r25, r1
    12a4:	03 c0       	rjmp	.+6      	; 0x12ac <I2C_Ready+0x24>
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	08 95       	ret
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	08 95       	ret

000012ae <I2C_Send_ST>:
    12ae:	9c 01       	movw	r18, r24
    12b0:	21 50       	subi	r18, 0x01	; 1
    12b2:	31 40       	sbci	r19, 0x01	; 1
    12b4:	2e 3f       	cpi	r18, 0xFE	; 254
    12b6:	37 40       	sbci	r19, 0x07	; 7
    12b8:	80 f4       	brcc	.+32     	; 0x12da <I2C_Send_ST+0x2c>
    12ba:	2f e0       	ldi	r18, 0x0F	; 15
    12bc:	42 9f       	mul	r20, r18
    12be:	f0 01       	movw	r30, r0
    12c0:	11 24       	eor	r1, r1
    12c2:	ec 5a       	subi	r30, 0xAC	; 172
    12c4:	fe 4f       	sbci	r31, 0xFE	; 254
    12c6:	94 87       	std	Z+12, r25	; 0x0c
    12c8:	83 87       	std	Z+11, r24	; 0x0b
    12ca:	16 86       	std	Z+14, r1	; 0x0e
    12cc:	15 86       	std	Z+13, r1	; 0x0d
    12ce:	61 8b       	std	Z+17, r22	; 0x11
    12d0:	12 8a       	std	Z+18, r1	; 0x12
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	83 8b       	std	Z+19, r24	; 0x13
    12d6:	82 e0       	ldi	r24, 0x02	; 2
    12d8:	80 8f       	std	Z+24, r24	; 0x18
    12da:	08 95       	ret

000012dc <I2C_Send_STr>:
    12dc:	0f 93       	push	r16
    12de:	fc 01       	movw	r30, r24
    12e0:	e1 50       	subi	r30, 0x01	; 1
    12e2:	f1 40       	sbci	r31, 0x01	; 1
    12e4:	ee 3f       	cpi	r30, 0xFE	; 254
    12e6:	f7 40       	sbci	r31, 0x07	; 7
    12e8:	b0 f4       	brcc	.+44     	; 0x1316 <I2C_Send_STr+0x3a>
    12ea:	fb 01       	movw	r30, r22
    12ec:	e1 50       	subi	r30, 0x01	; 1
    12ee:	f1 40       	sbci	r31, 0x01	; 1
    12f0:	ee 3f       	cpi	r30, 0xFE	; 254
    12f2:	f7 40       	sbci	r31, 0x07	; 7
    12f4:	80 f4       	brcc	.+32     	; 0x1316 <I2C_Send_STr+0x3a>
    12f6:	3f e0       	ldi	r19, 0x0F	; 15
    12f8:	03 9f       	mul	r16, r19
    12fa:	f0 01       	movw	r30, r0
    12fc:	11 24       	eor	r1, r1
    12fe:	ec 5a       	subi	r30, 0xAC	; 172
    1300:	fe 4f       	sbci	r31, 0xFE	; 254
    1302:	94 87       	std	Z+12, r25	; 0x0c
    1304:	83 87       	std	Z+11, r24	; 0x0b
    1306:	76 87       	std	Z+14, r23	; 0x0e
    1308:	65 87       	std	Z+13, r22	; 0x0d
    130a:	41 8b       	std	Z+17, r20	; 0x11
    130c:	22 8b       	std	Z+18, r18	; 0x12
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	83 8b       	std	Z+19, r24	; 0x13
    1312:	82 e0       	ldi	r24, 0x02	; 2
    1314:	80 8f       	std	Z+24, r24	; 0x18
    1316:	0f 91       	pop	r16
    1318:	08 95       	ret

0000131a <I2C_Get_Ident>:
	}
}

uint8_t I2C_Get_Ident(uint8_t _Adress_Size, uint8_t _Register){
    131a:	98 2f       	mov	r25, r24
	if (TWI.Init==INIT_OK){
    131c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <TWI+0x1>
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	59 f4       	brne	.+22     	; 0x133a <I2C_Get_Ident+0x20>
		for (uint8_t x = Min_Ident; x <= Max_Ident; x++){
			if (TWI.Ident[x].Ident_given==false){
    1324:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <TWI+0x28>
    1328:	21 11       	cpse	r18, r1
    132a:	09 c0       	rjmp	.+18     	; 0x133e <I2C_Get_Ident+0x24>
				TWI.Ident[x].Ident_given=true;
    132c:	e4 e5       	ldi	r30, 0x54	; 84
    132e:	f1 e0       	ldi	r31, 0x01	; 1
    1330:	21 e0       	ldi	r18, 0x01	; 1
    1332:	20 a7       	std	Z+40, r18	; 0x28
				TWI.Ident[x].Adress_Size=_Adress_Size;
    1334:	96 a3       	std	Z+38, r25	; 0x26
				TWI.Ident[x].Adress[0]=_Register;
    1336:	64 a3       	std	Z+36, r22	; 0x24
				return x;
    1338:	08 95       	ret
			}
		}
	}
	return 0;
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	08 95       	ret
    133e:	80 e0       	ldi	r24, 0x00	; 0
}
    1340:	08 95       	ret

00001342 <I2C_Free_Ident>:

void I2C_Free_Ident(uint8_t _Ident){
	TWI.Ident[_Ident].Ident_given=false;
    1342:	2f e0       	ldi	r18, 0x0F	; 15
    1344:	82 9f       	mul	r24, r18
    1346:	c0 01       	movw	r24, r0
    1348:	11 24       	eor	r1, r1
    134a:	fc 01       	movw	r30, r24
    134c:	ec 5a       	subi	r30, 0xAC	; 172
    134e:	fe 4f       	sbci	r31, 0xFE	; 254
    1350:	11 8e       	std	Z+25, r1	; 0x19
    1352:	08 95       	ret

00001354 <Next_Nixie>:
	N_Clock.Fade_Timer_On			-= N_Clock.Fade_Timer_On && _Pulse_1ms;
	N_Clock.Fade_Timer_Off			-= N_Clock.Fade_Timer_Off && N_Clock.Fade_Timer_On==0 && _Pulse_1ms;
}//Nixie_Loop

void Next_Nixie(void){
	uint8_t _PortB=PORTB;//to prevent flikkering of the nixies we write outputs to a temp value 1st
    1354:	85 b1       	in	r24, 0x05	; 5
	if (N_Clock.Next_Nixie_Timer==0){
    1356:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <N_Clock+0x27>
    135a:	91 11       	cpse	r25, r1
    135c:	1a c0       	rjmp	.+52     	; 0x1392 <Next_Nixie+0x3e>
		N_Clock.Nixie_Blanking_Timer=N_Clock.Setting.Blanking_SV;
    135e:	e0 e8       	ldi	r30, 0x80	; 128
    1360:	f1 e0       	ldi	r31, 0x01	; 1
    1362:	20 91 da 01 	lds	r18, 0x01DA	; 0x8001da <N_Clock+0x5a>
    1366:	26 a3       	std	Z+38, r18	; 0x26
		N_Clock.Next_Nixie_Timer=N_Clock.Setting.Time_On_SV;
    1368:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <N_Clock+0x5b>
    136c:	97 a3       	std	Z+39, r25	; 0x27
		_PortB &= ~((1<<Nixie1_2)|(1<<Nixie3_4)|(1<<Nixie5_6));//disconnect all Nixies
    136e:	88 7f       	andi	r24, 0xF8	; 248
		//PORTD = 0xFF;
		N_Clock.Cur_Nixie++;
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	9f 5f       	subi	r25, 0xFF	; 255
    1374:	91 83       	std	Z+1, r25	; 0x01
		if ((N_Clock.Setting.Nixie_Amount<6 && N_Clock.Cur_Nixie==3) || N_Clock.Cur_Nixie>3){
    1376:	30 91 e1 01 	lds	r19, 0x01E1	; 0x8001e1 <N_Clock+0x61>
    137a:	36 30       	cpi	r19, 0x06	; 6
    137c:	10 f4       	brcc	.+4      	; 0x1382 <Next_Nixie+0x2e>
    137e:	93 30       	cpi	r25, 0x03	; 3
    1380:	11 f0       	breq	.+4      	; 0x1386 <Next_Nixie+0x32>
    1382:	94 30       	cpi	r25, 0x04	; 4
    1384:	30 f0       	brcs	.+12     	; 0x1392 <Next_Nixie+0x3e>
			N_Clock.Cur_Nixie=1;
    1386:	91 e0       	ldi	r25, 0x01	; 1
    1388:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <N_Clock+0x1>
		}
	}
	if (N_Clock.Nixie_Blanking_Timer==0){
    138c:	22 23       	and	r18, r18
    138e:	69 f0       	breq	.+26     	; 0x13aa <Next_Nixie+0x56>
    1390:	1a c0       	rjmp	.+52     	; 0x13c6 <Next_Nixie+0x72>
    1392:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <N_Clock+0x26>
    1396:	91 11       	cpse	r25, r1
    1398:	16 c0       	rjmp	.+44     	; 0x13c6 <Next_Nixie+0x72>
		switch(N_Clock.Cur_Nixie){
    139a:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <N_Clock+0x1>
    139e:	92 30       	cpi	r25, 0x02	; 2
    13a0:	49 f0       	breq	.+18     	; 0x13b4 <Next_Nixie+0x60>
    13a2:	93 30       	cpi	r25, 0x03	; 3
    13a4:	61 f0       	breq	.+24     	; 0x13be <Next_Nixie+0x6a>
    13a6:	91 30       	cpi	r25, 0x01	; 1
    13a8:	71 f4       	brne	.+28     	; 0x13c6 <Next_Nixie+0x72>
			case 1:{
				//set the correct values
				PORTD = N_Clock.BCD_Nixie1_2;//Nixie 1 + 2
    13aa:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <N_Clock+0x1c>
    13ae:	9b b9       	out	0x0b, r25	; 11
				_PortB |= (1<<Nixie1_2);//Connect the right Nixie
    13b0:	81 60       	ori	r24, 0x01	; 1
			}//1
			break;
    13b2:	09 c0       	rjmp	.+18     	; 0x13c6 <Next_Nixie+0x72>
			case 2:{
				//set the correct values
				PORTD = N_Clock.BCD_Nixie3_4;//Nixie 3 + 4
    13b4:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <N_Clock+0x1d>
    13b8:	9b b9       	out	0x0b, r25	; 11
				_PortB |= (1<<Nixie3_4);//Connect the right Nixie
    13ba:	82 60       	ori	r24, 0x02	; 2
			}//2
			break;
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <Next_Nixie+0x72>
			case 3:{
				//set the correct values
				PORTD = N_Clock.BCD_Nixie5_6;//Nixie 5 + 6
    13be:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <N_Clock+0x1e>
    13c2:	9b b9       	out	0x0b, r25	; 11
				_PortB |= (1<<Nixie5_6);//Connect the right nixie
    13c4:	84 60       	ori	r24, 0x04	; 4
			}//3
			break;
		}//N_Clock.Cur_Nixie
	}
	PORTB = _PortB;//write to the PORT with the temp value.
    13c6:	85 b9       	out	0x05, r24	; 5
    13c8:	08 95       	ret

000013ca <Nixie_Update>:
}//Next_Nixie

void Nixie_Update(const uint8_t _Command){
    13ca:	0f 93       	push	r16
    13cc:	1f 93       	push	r17
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
	switch(_Command){
    13d2:	82 30       	cpi	r24, 0x02	; 2
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <Nixie_Update+0xe>
    13d6:	60 c2       	rjmp	.+1216   	; 0x1898 <Nixie_Update+0x4ce>
    13d8:	28 f4       	brcc	.+10     	; 0x13e4 <Nixie_Update+0x1a>
    13da:	88 23       	and	r24, r24
    13dc:	51 f0       	breq	.+20     	; 0x13f2 <Nixie_Update+0x28>
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	99 f0       	breq	.+38     	; 0x1408 <Nixie_Update+0x3e>
    13e2:	d6 c3       	rjmp	.+1964   	; 0x1b90 <Nixie_Update+0x7c6>
    13e4:	83 30       	cpi	r24, 0x03	; 3
    13e6:	09 f4       	brne	.+2      	; 0x13ea <Nixie_Update+0x20>
    13e8:	04 c3       	rjmp	.+1544   	; 0x19f2 <Nixie_Update+0x628>
    13ea:	84 30       	cpi	r24, 0x04	; 4
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <Nixie_Update+0x26>
    13ee:	68 c3       	rjmp	.+1744   	; 0x1ac0 <Nixie_Update+0x6f6>
    13f0:	cf c3       	rjmp	.+1950   	; 0x1b90 <Nixie_Update+0x7c6>
		case Show_Nothing:{
			Power_Mode(Power_Mode_OFF);
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <Power_Mode>
			PORTB &= ~(1<<Colon);//put the colons off
    13f8:	2c 98       	cbi	0x05, 4	; 5
			
			//Write a strange value to the Nixies so that they show nothing
			N_Clock.BCD_Nixie1_2=0xAA;
    13fa:	e0 e8       	ldi	r30, 0x80	; 128
    13fc:	f1 e0       	ldi	r31, 0x01	; 1
    13fe:	8a ea       	ldi	r24, 0xAA	; 170
    1400:	84 8f       	std	Z+28, r24	; 0x1c
			N_Clock.BCD_Nixie3_4=0xAA;
    1402:	85 8f       	std	Z+29, r24	; 0x1d
			N_Clock.BCD_Nixie5_6=0xAA;
    1404:	86 8f       	std	Z+30, r24	; 0x1e
		}//Show_Nothing
		break;
    1406:	c4 c3       	rjmp	.+1928   	; 0x1b90 <Nixie_Update+0x7c6>
			
		case Show_Time:{//Show the time
			Power_Mode(Power_Mode_ON);
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <Power_Mode>
			if(N_Clock.Status==Status_Nixie_Menu){
    140e:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <N_Clock+0x21>
    1412:	83 30       	cpi	r24, 0x03	; 3
    1414:	c9 f4       	brne	.+50     	; 0x1448 <Nixie_Update+0x7e>
				if (RTC.IS_TWLF){
    1416:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <RTC+0x8>
    141a:	88 23       	and	r24, r24
    141c:	61 f0       	breq	.+24     	; 0x1436 <Nixie_Update+0x6c>
					if (RTC.IS_PM){
    141e:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <RTC+0x9>
    1422:	88 23       	and	r24, r24
    1424:	21 f0       	breq	.+8      	; 0x142e <Nixie_Update+0x64>
						PORTB &= (1<<Colon);//put the colons on
    1426:	85 b1       	in	r24, 0x05	; 5
    1428:	80 71       	andi	r24, 0x10	; 16
    142a:	85 b9       	out	0x05, r24	; 5
    142c:	18 c0       	rjmp	.+48     	; 0x145e <Nixie_Update+0x94>
					}
					else{
						PORTB &= (1<<Colon);//Put the colons off
    142e:	85 b1       	in	r24, 0x05	; 5
    1430:	80 71       	andi	r24, 0x10	; 16
    1432:	85 b9       	out	0x05, r24	; 5
    1434:	14 c0       	rjmp	.+40     	; 0x145e <Nixie_Update+0x94>
					}
				}
				else if(Timer_Pulse_100ms()){
    1436:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <Timer_Pulse_100ms>
    143a:	88 23       	and	r24, r24
    143c:	81 f0       	breq	.+32     	; 0x145e <Nixie_Update+0x94>
					PORTB ^= (1<<Colon);//blink colon
    143e:	95 b1       	in	r25, 0x05	; 5
    1440:	80 e1       	ldi	r24, 0x10	; 16
    1442:	89 27       	eor	r24, r25
    1444:	85 b9       	out	0x05, r24	; 5
    1446:	0b c0       	rjmp	.+22     	; 0x145e <Nixie_Update+0x94>
				}
			}
			else{
				if(RTC.Time.Second%2 && N_Clock.Setting.Colon_Active){
    1448:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <RTC>
    144c:	80 ff       	sbrs	r24, 0
    144e:	06 c0       	rjmp	.+12     	; 0x145c <Nixie_Update+0x92>
    1450:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <N_Clock+0x60>
    1454:	88 23       	and	r24, r24
    1456:	11 f0       	breq	.+4      	; 0x145c <Nixie_Update+0x92>
					PORTB |= (1<<Colon);//put power on the colons
    1458:	2c 9a       	sbi	0x05, 4	; 5
    145a:	01 c0       	rjmp	.+2      	; 0x145e <Nixie_Update+0x94>
				}
				else{
					PORTB &= ~(1<<Colon);//put the colons off
    145c:	2c 98       	cbi	0x05, 4	; 5
				}
			}
			//Update the Nixies
			if(N_Clock.Status==Status_Nixie_Menu){
    145e:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <N_Clock+0x21>
    1462:	83 30       	cpi	r24, 0x03	; 3
    1464:	09 f0       	breq	.+2      	; 0x1468 <Nixie_Update+0x9e>
    1466:	72 c0       	rjmp	.+228    	; 0x154c <Nixie_Update+0x182>
				if(N_Clock.Setting.Nixie_Amount<6 && N_Clock.Menu_Enter>0){
    1468:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <N_Clock+0x61>
    146c:	86 30       	cpi	r24, 0x06	; 6
    146e:	58 f4       	brcc	.+22     	; 0x1486 <Nixie_Update+0xbc>
    1470:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <N_Clock+0x25>
    1474:	88 23       	and	r24, r24
    1476:	39 f0       	breq	.+14     	; 0x1486 <Nixie_Update+0xbc>
					N_Clock.BCD_Nixie1_2=DecimalToBCD(N_Clock.Menu);
    1478:	c0 e8       	ldi	r28, 0x80	; 128
    147a:	d1 e0       	ldi	r29, 0x01	; 1
    147c:	8b a1       	ldd	r24, Y+35	; 0x23
    147e:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1482:	8c 8f       	std	Y+28, r24	; 0x1c
    1484:	85 c3       	rjmp	.+1802   	; 0x1b90 <Nixie_Update+0x7c6>
				}//N_Clock.Setting.Nixie_Amount
				else{
					switch (N_Clock.Menu){
    1486:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <N_Clock+0x23>
    148a:	82 30       	cpi	r24, 0x02	; 2
    148c:	f9 f0       	breq	.+62     	; 0x14cc <Nixie_Update+0x102>
    148e:	83 30       	cpi	r24, 0x03	; 3
    1490:	e9 f1       	breq	.+122    	; 0x150c <Nixie_Update+0x142>
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	09 f0       	breq	.+2      	; 0x1498 <Nixie_Update+0xce>
    1496:	7c c3       	rjmp	.+1784   	; 0x1b90 <Nixie_Update+0x7c6>
						case 1:{
							N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Time.Hour);
    1498:	c2 ee       	ldi	r28, 0xE2	; 226
    149a:	d1 e0       	ldi	r29, 0x01	; 1
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    14a2:	00 e8       	ldi	r16, 0x80	; 128
    14a4:	11 e0       	ldi	r17, 0x01	; 1
    14a6:	f8 01       	movw	r30, r16
    14a8:	84 8f       	std	Z+28, r24	; 0x1c
							N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Time.Minute);
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    14b0:	f8 01       	movw	r30, r16
    14b2:	85 8f       	std	Z+29, r24	; 0x1d
							if(RTC.Time.Second%2){
    14b4:	88 81       	ld	r24, Y
    14b6:	80 ff       	sbrs	r24, 0
    14b8:	05 c0       	rjmp	.+10     	; 0x14c4 <Nixie_Update+0xfa>
								N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Time.Second);
    14ba:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    14be:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <N_Clock+0x1e>
    14c2:	66 c3       	rjmp	.+1740   	; 0x1b90 <Nixie_Update+0x7c6>
							}
							else{
								N_Clock.BCD_Nixie5_6=0xAA;
    14c4:	8a ea       	ldi	r24, 0xAA	; 170
    14c6:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <N_Clock+0x1e>
    14ca:	62 c3       	rjmp	.+1732   	; 0x1b90 <Nixie_Update+0x7c6>
							}
						}//1
						break;

						case 2:{
							N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Time.Hour);
    14cc:	c2 ee       	ldi	r28, 0xE2	; 226
    14ce:	d1 e0       	ldi	r29, 0x01	; 1
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    14d6:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N_Clock+0x1c>
							if(RTC.Time.Second%2){
    14da:	88 81       	ld	r24, Y
    14dc:	80 ff       	sbrs	r24, 0
    14de:	07 c0       	rjmp	.+14     	; 0x14ee <Nixie_Update+0x124>
								N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Time.Minute);
    14e0:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <RTC+0x1>
    14e4:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    14e8:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <N_Clock+0x1d>
    14ec:	03 c0       	rjmp	.+6      	; 0x14f4 <Nixie_Update+0x12a>
							}
							else{
								N_Clock.BCD_Nixie3_4=0xAA;
    14ee:	8a ea       	ldi	r24, 0xAA	; 170
    14f0:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <N_Clock+0x1d>
							}
							if(N_Clock.Setting.Nixie_Amount>4){
    14f4:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <N_Clock+0x61>
    14f8:	85 30       	cpi	r24, 0x05	; 5
    14fa:	08 f4       	brcc	.+2      	; 0x14fe <Nixie_Update+0x134>
    14fc:	49 c3       	rjmp	.+1682   	; 0x1b90 <Nixie_Update+0x7c6>
								N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Time.Second);
    14fe:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <RTC>
    1502:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1506:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <N_Clock+0x1e>
    150a:	42 c3       	rjmp	.+1668   	; 0x1b90 <Nixie_Update+0x7c6>
							}
						}//2
						break;

						case 3:{
							if(RTC.Time.Second%2){
    150c:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <RTC>
    1510:	80 ff       	sbrs	r24, 0
    1512:	07 c0       	rjmp	.+14     	; 0x1522 <Nixie_Update+0x158>
								N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Time.Hour);
    1514:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <RTC+0x2>
    1518:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    151c:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N_Clock+0x1c>
    1520:	03 c0       	rjmp	.+6      	; 0x1528 <Nixie_Update+0x15e>
							}
							else{
								N_Clock.BCD_Nixie1_2=0xAA;
    1522:	8a ea       	ldi	r24, 0xAA	; 170
    1524:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N_Clock+0x1c>
							}
							N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Time.Minute);
    1528:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <RTC+0x1>
    152c:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1530:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <N_Clock+0x1d>
							if(N_Clock.Setting.Nixie_Amount>4){
    1534:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <N_Clock+0x61>
    1538:	85 30       	cpi	r24, 0x05	; 5
    153a:	08 f4       	brcc	.+2      	; 0x153e <Nixie_Update+0x174>
    153c:	29 c3       	rjmp	.+1618   	; 0x1b90 <Nixie_Update+0x7c6>
								N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Time.Second);
    153e:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <RTC>
    1542:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1546:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <N_Clock+0x1e>
    154a:	22 c3       	rjmp	.+1604   	; 0x1b90 <Nixie_Update+0x7c6>
						break;
					}//N_Clock.Menu
				}//else
			}
			else{
				if(N_Clock.Setting.Fade==0){
    154c:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <N_Clock+0x5e>
    1550:	91 11       	cpse	r25, r1
    1552:	14 c0       	rjmp	.+40     	; 0x157c <Nixie_Update+0x1b2>
					N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Time.Hour);
    1554:	02 ee       	ldi	r16, 0xE2	; 226
    1556:	11 e0       	ldi	r17, 0x01	; 1
    1558:	f8 01       	movw	r30, r16
    155a:	82 81       	ldd	r24, Z+2	; 0x02
    155c:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1560:	c0 e8       	ldi	r28, 0x80	; 128
    1562:	d1 e0       	ldi	r29, 0x01	; 1
    1564:	8c 8f       	std	Y+28, r24	; 0x1c
					N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Time.Minute);
    1566:	f8 01       	movw	r30, r16
    1568:	81 81       	ldd	r24, Z+1	; 0x01
    156a:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    156e:	8d 8f       	std	Y+29, r24	; 0x1d
					N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Time.Second);
    1570:	f8 01       	movw	r30, r16
    1572:	80 81       	ld	r24, Z
    1574:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1578:	8e 8f       	std	Y+30, r24	; 0x1e
    157a:	0a c3       	rjmp	.+1556   	; 0x1b90 <Nixie_Update+0x7c6>
				}
				else{
					switch (N_Clock.Fade_Step){
    157c:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <N_Clock+0x15>
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	39 f1       	breq	.+78     	; 0x15d2 <Nixie_Update+0x208>
    1584:	20 f0       	brcs	.+8      	; 0x158e <Nixie_Update+0x1c4>
    1586:	82 30       	cpi	r24, 0x02	; 2
    1588:	09 f4       	brne	.+2      	; 0x158c <Nixie_Update+0x1c2>
    158a:	79 c1       	rjmp	.+754    	; 0x187e <Nixie_Update+0x4b4>
    158c:	01 c3       	rjmp	.+1538   	; 0x1b90 <Nixie_Update+0x7c6>
						case 0:{
							N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Time.Hour);
    158e:	02 ee       	ldi	r16, 0xE2	; 226
    1590:	11 e0       	ldi	r17, 0x01	; 1
    1592:	f8 01       	movw	r30, r16
    1594:	82 81       	ldd	r24, Z+2	; 0x02
    1596:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    159a:	c0 e8       	ldi	r28, 0x80	; 128
    159c:	d1 e0       	ldi	r29, 0x01	; 1
    159e:	8c 8f       	std	Y+28, r24	; 0x1c
							N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Time.Minute);
    15a0:	f8 01       	movw	r30, r16
    15a2:	81 81       	ldd	r24, Z+1	; 0x01
    15a4:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    15a8:	8d 8f       	std	Y+29, r24	; 0x1d
							N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Time.Second);
    15aa:	f8 01       	movw	r30, r16
    15ac:	80 81       	ld	r24, Z
    15ae:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    15b2:	8e 8f       	std	Y+30, r24	; 0x1e
							if (memcmp(&N_Clock.Time_Old, &RTC.Time, sizeof(N_Clock.Time_Old))){
    15b4:	43 e0       	ldi	r20, 0x03	; 3
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	b8 01       	movw	r22, r16
    15ba:	89 e9       	ldi	r24, 0x99	; 153
    15bc:	91 e0       	ldi	r25, 0x01	; 1
    15be:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <memcmp>
    15c2:	89 2b       	or	r24, r25
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <Nixie_Update+0x1fe>
    15c6:	e4 c2       	rjmp	.+1480   	; 0x1b90 <Nixie_Update+0x7c6>
								N_Clock.Fade_Step++;
    15c8:	8d 89       	ldd	r24, Y+21	; 0x15
    15ca:	8f 5f       	subi	r24, 0xFF	; 255
    15cc:	8d 8b       	std	Y+21, r24	; 0x15
								N_Clock.Faded_time=0;
    15ce:	1e 8a       	std	Y+22, r1	; 0x16
    15d0:	df c2       	rjmp	.+1470   	; 0x1b90 <Nixie_Update+0x7c6>
							}
						}//0
						break;

						case 1:{
							if(N_Clock.Setting.Fade==1){//crossfade
    15d2:	91 30       	cpi	r25, 0x01	; 1
    15d4:	d1 f5       	brne	.+116    	; 0x164a <Nixie_Update+0x280>
								//fade hour
								if(N_Clock.Time_Old.Hour!=RTC.Time.Hour && N_Clock.Fade_Timer_On>0){
    15d6:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <N_Clock+0x1b>
    15da:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <RTC+0x2>
    15de:	98 17       	cp	r25, r24
    15e0:	51 f0       	breq	.+20     	; 0x15f6 <Nixie_Update+0x22c>
    15e2:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <N_Clock+0x17>
    15e6:	22 23       	and	r18, r18
    15e8:	31 f0       	breq	.+12     	; 0x15f6 <Nixie_Update+0x22c>
									N_Clock.BCD_Nixie1_2=DecimalToBCD(N_Clock.Time_Old.Hour);
    15ea:	89 2f       	mov	r24, r25
    15ec:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    15f0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N_Clock+0x1c>
    15f4:	04 c0       	rjmp	.+8      	; 0x15fe <Nixie_Update+0x234>
								}
								else{
									N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Time.Hour);
    15f6:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    15fa:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N_Clock+0x1c>
								}
								//fade minutes
								if(N_Clock.Time_Old.Minute!=RTC.Time.Minute && N_Clock.Fade_Timer_On>0){
    15fe:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <N_Clock+0x1a>
    1602:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <RTC+0x1>
    1606:	98 17       	cp	r25, r24
    1608:	51 f0       	breq	.+20     	; 0x161e <Nixie_Update+0x254>
    160a:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <N_Clock+0x17>
    160e:	22 23       	and	r18, r18
    1610:	31 f0       	breq	.+12     	; 0x161e <Nixie_Update+0x254>
									N_Clock.BCD_Nixie3_4=DecimalToBCD(N_Clock.Time_Old.Minute);
    1612:	89 2f       	mov	r24, r25
    1614:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1618:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <N_Clock+0x1d>
    161c:	04 c0       	rjmp	.+8      	; 0x1626 <Nixie_Update+0x25c>
								}
								else{
									N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Time.Minute);
    161e:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1622:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <N_Clock+0x1d>
								}
								//fade seconds
								if (N_Clock.Fade_Timer_On>0){
    1626:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <N_Clock+0x17>
    162a:	88 23       	and	r24, r24
    162c:	39 f0       	breq	.+14     	; 0x163c <Nixie_Update+0x272>
									N_Clock.BCD_Nixie5_6=DecimalToBCD(N_Clock.Time_Old.Second);
    162e:	c0 e8       	ldi	r28, 0x80	; 128
    1630:	d1 e0       	ldi	r29, 0x01	; 1
    1632:	89 8d       	ldd	r24, Y+25	; 0x19
    1634:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1638:	8e 8f       	std	Y+30, r24	; 0x1e
    163a:	02 c1       	rjmp	.+516    	; 0x1840 <Nixie_Update+0x476>
								}
								else{
									N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Time.Second);
    163c:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <RTC>
    1640:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1644:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <N_Clock+0x1e>
    1648:	fb c0       	rjmp	.+502    	; 0x1840 <Nixie_Update+0x476>
								}
							}
							else{//fade in/out
								if(N_Clock.Faded_time<6){
    164a:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <N_Clock+0x16>
    164e:	86 30       	cpi	r24, 0x06	; 6
    1650:	08 f0       	brcs	.+2      	; 0x1654 <Nixie_Update+0x28a>
    1652:	7b c0       	rjmp	.+246    	; 0x174a <Nixie_Update+0x380>
									//fade hour out
									if(N_Clock.Time_Old.Hour!=RTC.Time.Hour && N_Clock.Fade_Timer_On>0){
    1654:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <N_Clock+0x1b>
    1658:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <RTC+0x2>
    165c:	89 17       	cp	r24, r25
    165e:	49 f0       	breq	.+18     	; 0x1672 <Nixie_Update+0x2a8>
    1660:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <N_Clock+0x17>
    1664:	22 23       	and	r18, r18
    1666:	29 f0       	breq	.+10     	; 0x1672 <Nixie_Update+0x2a8>
										N_Clock.BCD_Nixie1_2=DecimalToBCD(N_Clock.Time_Old.Hour);
    1668:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    166c:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N_Clock+0x1c>
    1670:	18 c0       	rjmp	.+48     	; 0x16a2 <Nixie_Update+0x2d8>
									}
									else{
										if(N_Clock.Time_Old.Hour/10!=RTC.Time.Hour/10){
    1672:	3d ec       	ldi	r19, 0xCD	; 205
    1674:	83 9f       	mul	r24, r19
    1676:	21 2d       	mov	r18, r1
    1678:	11 24       	eor	r1, r1
    167a:	26 95       	lsr	r18
    167c:	26 95       	lsr	r18
    167e:	26 95       	lsr	r18
    1680:	93 9f       	mul	r25, r19
    1682:	91 2d       	mov	r25, r1
    1684:	11 24       	eor	r1, r1
    1686:	96 95       	lsr	r25
    1688:	96 95       	lsr	r25
    168a:	96 95       	lsr	r25
    168c:	29 17       	cp	r18, r25
    168e:	21 f0       	breq	.+8      	; 0x1698 <Nixie_Update+0x2ce>
											N_Clock.BCD_Nixie1_2=0xAA;
    1690:	8a ea       	ldi	r24, 0xAA	; 170
    1692:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N_Clock+0x1c>
    1696:	05 c0       	rjmp	.+10     	; 0x16a2 <Nixie_Update+0x2d8>
										}
										else{
											N_Clock.BCD_Nixie1_2=DecimalToBCD(N_Clock.Time_Old.Hour);
    1698:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
											N_Clock.BCD_Nixie1_2|=0x0F;
    169c:	8f 60       	ori	r24, 0x0F	; 15
    169e:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N_Clock+0x1c>
										}
									}
									//fade minutes out
									if(N_Clock.Time_Old.Minute!=RTC.Time.Minute && N_Clock.Fade_Timer_On>0){
    16a2:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <N_Clock+0x1a>
    16a6:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <RTC+0x1>
    16aa:	89 17       	cp	r24, r25
    16ac:	49 f0       	breq	.+18     	; 0x16c0 <Nixie_Update+0x2f6>
    16ae:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <N_Clock+0x17>
    16b2:	22 23       	and	r18, r18
    16b4:	29 f0       	breq	.+10     	; 0x16c0 <Nixie_Update+0x2f6>
										N_Clock.BCD_Nixie3_4=DecimalToBCD(N_Clock.Time_Old.Minute);
    16b6:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    16ba:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <N_Clock+0x1d>
    16be:	18 c0       	rjmp	.+48     	; 0x16f0 <Nixie_Update+0x326>
									}
									else{
										if(N_Clock.Time_Old.Minute/10!=RTC.Time.Minute/10){
    16c0:	3d ec       	ldi	r19, 0xCD	; 205
    16c2:	83 9f       	mul	r24, r19
    16c4:	21 2d       	mov	r18, r1
    16c6:	11 24       	eor	r1, r1
    16c8:	26 95       	lsr	r18
    16ca:	26 95       	lsr	r18
    16cc:	26 95       	lsr	r18
    16ce:	93 9f       	mul	r25, r19
    16d0:	91 2d       	mov	r25, r1
    16d2:	11 24       	eor	r1, r1
    16d4:	96 95       	lsr	r25
    16d6:	96 95       	lsr	r25
    16d8:	96 95       	lsr	r25
    16da:	29 17       	cp	r18, r25
    16dc:	21 f0       	breq	.+8      	; 0x16e6 <Nixie_Update+0x31c>
											N_Clock.BCD_Nixie3_4=0xAA;
    16de:	8a ea       	ldi	r24, 0xAA	; 170
    16e0:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <N_Clock+0x1d>
    16e4:	05 c0       	rjmp	.+10     	; 0x16f0 <Nixie_Update+0x326>
										}
										else{
											N_Clock.BCD_Nixie3_4=DecimalToBCD(N_Clock.Time_Old.Minute);
    16e6:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
											N_Clock.BCD_Nixie3_4=0x0F;
    16ea:	8f e0       	ldi	r24, 0x0F	; 15
    16ec:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <N_Clock+0x1d>
										}
									}
									//fade seconds out
									if (N_Clock.Fade_Timer_On>0){
    16f0:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <N_Clock+0x17>
    16f4:	88 23       	and	r24, r24
    16f6:	39 f0       	breq	.+14     	; 0x1706 <Nixie_Update+0x33c>
										N_Clock.BCD_Nixie5_6=DecimalToBCD(N_Clock.Time_Old.Second);
    16f8:	c0 e8       	ldi	r28, 0x80	; 128
    16fa:	d1 e0       	ldi	r29, 0x01	; 1
    16fc:	89 8d       	ldd	r24, Y+25	; 0x19
    16fe:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1702:	8e 8f       	std	Y+30, r24	; 0x1e
    1704:	9d c0       	rjmp	.+314    	; 0x1840 <Nixie_Update+0x476>
									}
									else{
										if(N_Clock.Time_Old.Second/10!=RTC.Time.Second/10){
    1706:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <N_Clock+0x19>
    170a:	3d ec       	ldi	r19, 0xCD	; 205
    170c:	83 9f       	mul	r24, r19
    170e:	21 2d       	mov	r18, r1
    1710:	11 24       	eor	r1, r1
    1712:	26 95       	lsr	r18
    1714:	26 95       	lsr	r18
    1716:	26 95       	lsr	r18
    1718:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <RTC>
    171c:	93 9f       	mul	r25, r19
    171e:	91 2d       	mov	r25, r1
    1720:	11 24       	eor	r1, r1
    1722:	96 95       	lsr	r25
    1724:	96 95       	lsr	r25
    1726:	96 95       	lsr	r25
    1728:	29 17       	cp	r18, r25
    172a:	49 f0       	breq	.+18     	; 0x173e <Nixie_Update+0x374>
											N_Clock.BCD_Nixie5_6=0xAA;
    172c:	e0 e8       	ldi	r30, 0x80	; 128
    172e:	f1 e0       	ldi	r31, 0x01	; 1
    1730:	8a ea       	ldi	r24, 0xAA	; 170
    1732:	86 8f       	std	Z+30, r24	; 0x1e
										N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Time.Second);
									}
								}
								
							}
							if (N_Clock.Fade_Timer_Off==0 && N_Clock.Fade_Timer_On==0){
    1734:	80 8d       	ldd	r24, Z+24	; 0x18
    1736:	88 23       	and	r24, r24
    1738:	09 f4       	brne	.+2      	; 0x173c <Nixie_Update+0x372>
    173a:	8a c0       	rjmp	.+276    	; 0x1850 <Nixie_Update+0x486>
    173c:	93 c0       	rjmp	.+294    	; 0x1864 <Nixie_Update+0x49a>
									else{
										if(N_Clock.Time_Old.Second/10!=RTC.Time.Second/10){
											N_Clock.BCD_Nixie5_6=0xAA;
										}
										else{
											N_Clock.BCD_Nixie5_6=DecimalToBCD(N_Clock.Time_Old.Second);
    173e:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
											N_Clock.BCD_Nixie5_6=0x0F;
    1742:	8f e0       	ldi	r24, 0x0F	; 15
    1744:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <N_Clock+0x1e>
    1748:	7b c0       	rjmp	.+246    	; 0x1840 <Nixie_Update+0x476>
										}
									}
								}
								else{
									//fade hour in
									if(N_Clock.Time_Old.Hour!=RTC.Time.Hour && N_Clock.Fade_Timer_On>0){
    174a:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <N_Clock+0x1b>
    174e:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <RTC+0x2>
    1752:	98 17       	cp	r25, r24
    1754:	19 f1       	breq	.+70     	; 0x179c <Nixie_Update+0x3d2>
    1756:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <N_Clock+0x17>
    175a:	22 23       	and	r18, r18
    175c:	f9 f0       	breq	.+62     	; 0x179c <Nixie_Update+0x3d2>
										if (N_Clock.Time_Old.Hour/10!=RTC.Time.Hour/10){
    175e:	2d ec       	ldi	r18, 0xCD	; 205
    1760:	92 9f       	mul	r25, r18
    1762:	91 2d       	mov	r25, r1
    1764:	11 24       	eor	r1, r1
    1766:	96 95       	lsr	r25
    1768:	96 95       	lsr	r25
    176a:	96 95       	lsr	r25
    176c:	82 9f       	mul	r24, r18
    176e:	21 2d       	mov	r18, r1
    1770:	11 24       	eor	r1, r1
    1772:	26 95       	lsr	r18
    1774:	26 95       	lsr	r18
    1776:	26 95       	lsr	r18
    1778:	92 17       	cp	r25, r18
    177a:	51 f0       	breq	.+20     	; 0x1790 <Nixie_Update+0x3c6>
											N_Clock.BCD_Nixie1_2=0xAA;
    177c:	e0 e8       	ldi	r30, 0x80	; 128
    177e:	f1 e0       	ldi	r31, 0x01	; 1
    1780:	8a ea       	ldi	r24, 0xAA	; 170
    1782:	84 8f       	std	Z+28, r24	; 0x1c
									}
									else{
										N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Time.Hour);
									}
									//fade minutes in
									if(N_Clock.Time_Old.Minute!=RTC.Time.Minute && N_Clock.Fade_Timer_On>0){
    1784:	92 8d       	ldd	r25, Z+26	; 0x1a
    1786:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <RTC+0x1>
    178a:	98 13       	cpse	r25, r24
    178c:	15 c0       	rjmp	.+42     	; 0x17b8 <Nixie_Update+0x3ee>
    178e:	2d c0       	rjmp	.+90     	; 0x17ea <Nixie_Update+0x420>
									if(N_Clock.Time_Old.Hour!=RTC.Time.Hour && N_Clock.Fade_Timer_On>0){
										if (N_Clock.Time_Old.Hour/10!=RTC.Time.Hour/10){
											N_Clock.BCD_Nixie1_2=0xAA;
										}
										else{
											N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Time.Hour);
    1790:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
											N_Clock.BCD_Nixie1_2|=0x0F;
    1794:	8f 60       	ori	r24, 0x0F	; 15
    1796:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N_Clock+0x1c>
    179a:	04 c0       	rjmp	.+8      	; 0x17a4 <Nixie_Update+0x3da>
										}
									}
									else{
										N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Time.Hour);
    179c:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    17a0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N_Clock+0x1c>
									}
									//fade minutes in
									if(N_Clock.Time_Old.Minute!=RTC.Time.Minute && N_Clock.Fade_Timer_On>0){
    17a4:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <N_Clock+0x1a>
    17a8:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <RTC+0x1>
    17ac:	98 17       	cp	r25, r24
    17ae:	e9 f0       	breq	.+58     	; 0x17ea <Nixie_Update+0x420>
    17b0:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <N_Clock+0x17>
    17b4:	22 23       	and	r18, r18
    17b6:	c9 f0       	breq	.+50     	; 0x17ea <Nixie_Update+0x420>
										if(N_Clock.Time_Old.Minute/10!=RTC.Time.Minute/10){
    17b8:	2d ec       	ldi	r18, 0xCD	; 205
    17ba:	92 9f       	mul	r25, r18
    17bc:	91 2d       	mov	r25, r1
    17be:	11 24       	eor	r1, r1
    17c0:	96 95       	lsr	r25
    17c2:	96 95       	lsr	r25
    17c4:	96 95       	lsr	r25
    17c6:	82 9f       	mul	r24, r18
    17c8:	21 2d       	mov	r18, r1
    17ca:	11 24       	eor	r1, r1
    17cc:	26 95       	lsr	r18
    17ce:	26 95       	lsr	r18
    17d0:	26 95       	lsr	r18
    17d2:	92 17       	cp	r25, r18
    17d4:	21 f0       	breq	.+8      	; 0x17de <Nixie_Update+0x414>
											N_Clock.BCD_Nixie3_4=0xAA;
    17d6:	8a ea       	ldi	r24, 0xAA	; 170
    17d8:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <N_Clock+0x1d>
    17dc:	0e c0       	rjmp	.+28     	; 0x17fa <Nixie_Update+0x430>
										}
										else{
											N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Time.Minute);
    17de:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
											N_Clock.BCD_Nixie3_4|=0x0F;
    17e2:	8f 60       	ori	r24, 0x0F	; 15
    17e4:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <N_Clock+0x1d>
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <Nixie_Update+0x428>
										}
									}
									else{
										N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Time.Minute);
    17ea:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    17ee:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <N_Clock+0x1d>
									}
									//fade seconds in
									if (N_Clock.Fade_Timer_On>0){
    17f2:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <N_Clock+0x17>
    17f6:	88 23       	and	r24, r24
    17f8:	e9 f0       	breq	.+58     	; 0x1834 <Nixie_Update+0x46a>
										if(N_Clock.Time_Old.Second/10!=RTC.Time.Second/10){
    17fa:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <RTC>
    17fe:	20 91 99 01 	lds	r18, 0x0199	; 0x800199 <N_Clock+0x19>
    1802:	9d ec       	ldi	r25, 0xCD	; 205
    1804:	29 9f       	mul	r18, r25
    1806:	21 2d       	mov	r18, r1
    1808:	11 24       	eor	r1, r1
    180a:	26 95       	lsr	r18
    180c:	26 95       	lsr	r18
    180e:	26 95       	lsr	r18
    1810:	89 9f       	mul	r24, r25
    1812:	91 2d       	mov	r25, r1
    1814:	11 24       	eor	r1, r1
    1816:	96 95       	lsr	r25
    1818:	96 95       	lsr	r25
    181a:	96 95       	lsr	r25
    181c:	29 17       	cp	r18, r25
    181e:	21 f0       	breq	.+8      	; 0x1828 <Nixie_Update+0x45e>
											N_Clock.BCD_Nixie5_6=0xAA;
    1820:	8a ea       	ldi	r24, 0xAA	; 170
    1822:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <N_Clock+0x1e>
    1826:	1e c0       	rjmp	.+60     	; 0x1864 <Nixie_Update+0x49a>
										}
										else{
											N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Time.Second);
    1828:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
											N_Clock.BCD_Nixie5_6|=0x0F;
    182c:	8f 60       	ori	r24, 0x0F	; 15
    182e:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <N_Clock+0x1e>
    1832:	06 c0       	rjmp	.+12     	; 0x1840 <Nixie_Update+0x476>
										}
									}
									else{
										N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Time.Second);
    1834:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <RTC>
    1838:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    183c:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <N_Clock+0x1e>
									}
								}
								
							}
							if (N_Clock.Fade_Timer_Off==0 && N_Clock.Fade_Timer_On==0){
    1840:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <N_Clock+0x18>
    1844:	81 11       	cpse	r24, r1
    1846:	0e c0       	rjmp	.+28     	; 0x1864 <Nixie_Update+0x49a>
    1848:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <N_Clock+0x17>
    184c:	81 11       	cpse	r24, r1
    184e:	0a c0       	rjmp	.+20     	; 0x1864 <Nixie_Update+0x49a>
								N_Clock.Fade_Timer_On=N_Clock.Setting.Fade_Time-N_Clock.Faded_time;
    1850:	e0 e8       	ldi	r30, 0x80	; 128
    1852:	f1 e0       	ldi	r31, 0x01	; 1
    1854:	86 89       	ldd	r24, Z+22	; 0x16
    1856:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <N_Clock+0x5f>
    185a:	98 1b       	sub	r25, r24
    185c:	97 8b       	std	Z+23, r25	; 0x17
								N_Clock.Fade_Timer_Off=N_Clock.Faded_time;
    185e:	80 8f       	std	Z+24, r24	; 0x18
								N_Clock.Faded_time++;
    1860:	8f 5f       	subi	r24, 0xFF	; 255
    1862:	86 8b       	std	Z+22, r24	; 0x16
							}
							if (N_Clock.Faded_time>N_Clock.Setting.Fade_Time){
    1864:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <N_Clock+0x16>
    1868:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <N_Clock+0x5f>
    186c:	89 17       	cp	r24, r25
    186e:	08 f0       	brcs	.+2      	; 0x1872 <Nixie_Update+0x4a8>
    1870:	8f c1       	rjmp	.+798    	; 0x1b90 <Nixie_Update+0x7c6>
								N_Clock.Fade_Step++;
    1872:	e0 e8       	ldi	r30, 0x80	; 128
    1874:	f1 e0       	ldi	r31, 0x01	; 1
    1876:	85 89       	ldd	r24, Z+21	; 0x15
    1878:	8f 5f       	subi	r24, 0xFF	; 255
    187a:	85 8b       	std	Z+21, r24	; 0x15
    187c:	89 c1       	rjmp	.+786    	; 0x1b90 <Nixie_Update+0x7c6>
						}//1
						break;

						//done fading return to start
						case 2:{
							memcpy(&N_Clock.Time_Old, &RTC.Time, sizeof(N_Clock.Time_Old));
    187e:	e0 e8       	ldi	r30, 0x80	; 128
    1880:	f1 e0       	ldi	r31, 0x01	; 1
    1882:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <RTC>
    1886:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <RTC+0x1>
    188a:	a0 91 e4 01 	lds	r26, 0x01E4	; 0x8001e4 <RTC+0x2>
    188e:	81 8f       	std	Z+25, r24	; 0x19
    1890:	92 8f       	std	Z+26, r25	; 0x1a
    1892:	a3 8f       	std	Z+27, r26	; 0x1b
							N_Clock.Fade_Step=0;
    1894:	15 8a       	std	Z+21, r1	; 0x15
						}//2
						break;
    1896:	7c c1       	rjmp	.+760    	; 0x1b90 <Nixie_Update+0x7c6>
			}
		}
		break;
		
		case Show_Date:{//Show the date
			Power_Mode(Power_Mode_ON);
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <Power_Mode>
			if(N_Clock.Status==Status_Nixie_Menu){
    189e:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <N_Clock+0x21>
    18a2:	83 30       	cpi	r24, 0x03	; 3
    18a4:	49 f4       	brne	.+18     	; 0x18b8 <Nixie_Update+0x4ee>
				if(Timer_Pulse_100ms()){
    18a6:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <Timer_Pulse_100ms>
    18aa:	88 23       	and	r24, r24
    18ac:	31 f0       	breq	.+12     	; 0x18ba <Nixie_Update+0x4f0>
					PORTB ^= (1<<Colon);//blink colon
    18ae:	95 b1       	in	r25, 0x05	; 5
    18b0:	80 e1       	ldi	r24, 0x10	; 16
    18b2:	89 27       	eor	r24, r25
    18b4:	85 b9       	out	0x05, r24	; 5
    18b6:	01 c0       	rjmp	.+2      	; 0x18ba <Nixie_Update+0x4f0>
				}
			}
			else{
				PORTB &= ~(1<<Colon);//put the colons off
    18b8:	2c 98       	cbi	0x05, 4	; 5
			}

			//Update the Nixies
			if(N_Clock.Status==Status_Nixie_Menu){
    18ba:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <N_Clock+0x21>
    18be:	83 30       	cpi	r24, 0x03	; 3
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <Nixie_Update+0x4fa>
    18c2:	83 c0       	rjmp	.+262    	; 0x19ca <Nixie_Update+0x600>
				if(N_Clock.Setting.Nixie_Amount<6 && N_Clock.Menu_Enter>0){
    18c4:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <N_Clock+0x61>
    18c8:	96 30       	cpi	r25, 0x06	; 6
    18ca:	58 f4       	brcc	.+22     	; 0x18e2 <Nixie_Update+0x518>
    18cc:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <N_Clock+0x25>
    18d0:	88 23       	and	r24, r24
    18d2:	39 f0       	breq	.+14     	; 0x18e2 <Nixie_Update+0x518>
					N_Clock.BCD_Nixie1_2=DecimalToBCD(N_Clock.Menu);
    18d4:	c0 e8       	ldi	r28, 0x80	; 128
    18d6:	d1 e0       	ldi	r29, 0x01	; 1
    18d8:	8b a1       	ldd	r24, Y+35	; 0x23
    18da:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    18de:	8c 8f       	std	Y+28, r24	; 0x1c
    18e0:	57 c1       	rjmp	.+686    	; 0x1b90 <Nixie_Update+0x7c6>
				}//N_Clock.Setting.Nixie_Amount
				else{	
					switch(N_Clock.Menu){
    18e2:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <N_Clock+0x23>
    18e6:	8c 30       	cpi	r24, 0x0C	; 12
    18e8:	81 f1       	breq	.+96     	; 0x194a <Nixie_Update+0x580>
    18ea:	8d 30       	cpi	r24, 0x0D	; 13
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <Nixie_Update+0x526>
    18ee:	4d c0       	rjmp	.+154    	; 0x198a <Nixie_Update+0x5c0>
    18f0:	8b 30       	cpi	r24, 0x0B	; 11
    18f2:	09 f0       	breq	.+2      	; 0x18f6 <Nixie_Update+0x52c>
    18f4:	4d c1       	rjmp	.+666    	; 0x1b90 <Nixie_Update+0x7c6>
						case 11:{
							if(N_Clock.Setting.Nixie_Amount>4){
    18f6:	95 30       	cpi	r25, 0x05	; 5
    18f8:	e0 f0       	brcs	.+56     	; 0x1932 <Nixie_Update+0x568>
								N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Date.Day);
    18fa:	c2 ee       	ldi	r28, 0xE2	; 226
    18fc:	d1 e0       	ldi	r29, 0x01	; 1
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1904:	00 e8       	ldi	r16, 0x80	; 128
    1906:	11 e0       	ldi	r17, 0x01	; 1
    1908:	f8 01       	movw	r30, r16
    190a:	84 8f       	std	Z+28, r24	; 0x1c
								N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Date.Month);
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1912:	f8 01       	movw	r30, r16
    1914:	85 8f       	std	Z+29, r24	; 0x1d
								if(RTC.Time.Second%2){
    1916:	88 81       	ld	r24, Y
    1918:	80 ff       	sbrs	r24, 0
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <Nixie_Update+0x55a>
									N_Clock.BCD_Nixie5_6=0xAA;
    191c:	8a ea       	ldi	r24, 0xAA	; 170
    191e:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <N_Clock+0x1e>
    1922:	36 c1       	rjmp	.+620    	; 0x1b90 <Nixie_Update+0x7c6>
								}
								else{
									N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Date.Year);
    1924:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <RTC+0x5>
    1928:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    192c:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <N_Clock+0x1e>
    1930:	2f c1       	rjmp	.+606    	; 0x1b90 <Nixie_Update+0x7c6>
								}
							}
							else{
								N_Clock.BCD_Nixie1_2=DecimalToBCD(20);
    1932:	84 e1       	ldi	r24, 0x14	; 20
    1934:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1938:	c0 e8       	ldi	r28, 0x80	; 128
    193a:	d1 e0       	ldi	r29, 0x01	; 1
    193c:	8c 8f       	std	Y+28, r24	; 0x1c
								N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Date.Year);
    193e:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <RTC+0x5>
    1942:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1946:	8d 8f       	std	Y+29, r24	; 0x1d
    1948:	23 c1       	rjmp	.+582    	; 0x1b90 <Nixie_Update+0x7c6>
							}
						}//11
						break;

						case 12:{
							N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Date.Day);
    194a:	c2 ee       	ldi	r28, 0xE2	; 226
    194c:	d1 e0       	ldi	r29, 0x01	; 1
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1954:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N_Clock+0x1c>
							if(RTC.Time.Second%2){
    1958:	88 81       	ld	r24, Y
    195a:	80 ff       	sbrs	r24, 0
    195c:	04 c0       	rjmp	.+8      	; 0x1966 <Nixie_Update+0x59c>
								N_Clock.BCD_Nixie3_4=0xAA;
    195e:	8a ea       	ldi	r24, 0xAA	; 170
    1960:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <N_Clock+0x1d>
    1964:	06 c0       	rjmp	.+12     	; 0x1972 <Nixie_Update+0x5a8>
							}
							else{
								N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Date.Month);
    1966:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <RTC+0x4>
    196a:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    196e:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <N_Clock+0x1d>
							}
							if(N_Clock.Setting.Nixie_Amount>4){
    1972:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <N_Clock+0x61>
    1976:	85 30       	cpi	r24, 0x05	; 5
    1978:	08 f4       	brcc	.+2      	; 0x197c <Nixie_Update+0x5b2>
    197a:	0a c1       	rjmp	.+532    	; 0x1b90 <Nixie_Update+0x7c6>
								N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Date.Year);
    197c:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <RTC+0x5>
    1980:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1984:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <N_Clock+0x1e>
    1988:	03 c1       	rjmp	.+518    	; 0x1b90 <Nixie_Update+0x7c6>
							}
						}//12
						break;

						case 13:{
							if(RTC.Time.Second%2){
    198a:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <RTC>
    198e:	80 ff       	sbrs	r24, 0
    1990:	04 c0       	rjmp	.+8      	; 0x199a <Nixie_Update+0x5d0>
								N_Clock.BCD_Nixie1_2=0xAA;
    1992:	8a ea       	ldi	r24, 0xAA	; 170
    1994:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N_Clock+0x1c>
    1998:	06 c0       	rjmp	.+12     	; 0x19a6 <Nixie_Update+0x5dc>
							}
							else{
								N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Date.Day);
    199a:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <RTC+0x3>
    199e:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    19a2:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N_Clock+0x1c>
							}
							N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Date.Month);
    19a6:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <RTC+0x4>
    19aa:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    19ae:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <N_Clock+0x1d>
							if(N_Clock.Setting.Nixie_Amount>4){
    19b2:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <N_Clock+0x61>
    19b6:	85 30       	cpi	r24, 0x05	; 5
    19b8:	08 f4       	brcc	.+2      	; 0x19bc <Nixie_Update+0x5f2>
    19ba:	ea c0       	rjmp	.+468    	; 0x1b90 <Nixie_Update+0x7c6>
								N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Date.Year);
    19bc:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <RTC+0x5>
    19c0:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    19c4:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <N_Clock+0x1e>
    19c8:	e3 c0       	rjmp	.+454    	; 0x1b90 <Nixie_Update+0x7c6>
						break;
					}//N_Clock.Menu
				}//else
			}
			else{
				N_Clock.BCD_Nixie1_2=DecimalToBCD(RTC.Date.Day);
    19ca:	02 ee       	ldi	r16, 0xE2	; 226
    19cc:	11 e0       	ldi	r17, 0x01	; 1
    19ce:	f8 01       	movw	r30, r16
    19d0:	83 81       	ldd	r24, Z+3	; 0x03
    19d2:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    19d6:	c0 e8       	ldi	r28, 0x80	; 128
    19d8:	d1 e0       	ldi	r29, 0x01	; 1
    19da:	8c 8f       	std	Y+28, r24	; 0x1c
				N_Clock.BCD_Nixie3_4=DecimalToBCD(RTC.Date.Month);
    19dc:	f8 01       	movw	r30, r16
    19de:	84 81       	ldd	r24, Z+4	; 0x04
    19e0:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    19e4:	8d 8f       	std	Y+29, r24	; 0x1d
				N_Clock.BCD_Nixie5_6=DecimalToBCD(RTC.Date.Year);
    19e6:	f8 01       	movw	r30, r16
    19e8:	85 81       	ldd	r24, Z+5	; 0x05
    19ea:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    19ee:	8e 8f       	std	Y+30, r24	; 0x1e
    19f0:	cf c0       	rjmp	.+414    	; 0x1b90 <Nixie_Update+0x7c6>
			}
		}
		break;
		
		case Show_Menu:{
			Power_Mode(Power_Mode_ON);
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <Power_Mode>
			
			if (Timer_Pulse_100ms()){
    19f8:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <Timer_Pulse_100ms>
    19fc:	88 23       	and	r24, r24
    19fe:	21 f0       	breq	.+8      	; 0x1a08 <Nixie_Update+0x63e>
				PORTB ^= (1<<Colon);//blink colon
    1a00:	95 b1       	in	r25, 0x05	; 5
    1a02:	80 e1       	ldi	r24, 0x10	; 16
    1a04:	89 27       	eor	r24, r25
    1a06:	85 b9       	out	0x05, r24	; 5
			}
			
			//Update the Nixies
			if(N_Clock.Setting.Nixie_Amount>4 || N_Clock.Menu==51){
    1a08:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <N_Clock+0x61>
    1a0c:	85 30       	cpi	r24, 0x05	; 5
    1a0e:	20 f4       	brcc	.+8      	; 0x1a18 <Nixie_Update+0x64e>
    1a10:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <N_Clock+0x23>
    1a14:	83 33       	cpi	r24, 0x33	; 51
    1a16:	51 f5       	brne	.+84     	; 0x1a6c <Nixie_Update+0x6a2>
				N_Clock.BCD_Nixie1_2=DecimalToBCD(N_Clock.Menu);
    1a18:	c0 e8       	ldi	r28, 0x80	; 128
    1a1a:	d1 e0       	ldi	r29, 0x01	; 1
    1a1c:	8b a1       	ldd	r24, Y+35	; 0x23
    1a1e:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1a22:	8c 8f       	std	Y+28, r24	; 0x1c
			
				if (N_Clock.Menu_Nixie3_4>9){
    1a24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a26:	8a 30       	cpi	r24, 0x0A	; 10
    1a28:	28 f0       	brcs	.+10     	; 0x1a34 <Nixie_Update+0x66a>
					N_Clock.BCD_Nixie3_4=DecimalToBCD(N_Clock.Menu_Nixie3_4);
    1a2a:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1a2e:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <N_Clock+0x1d>
    1a32:	0d c0       	rjmp	.+26     	; 0x1a4e <Nixie_Update+0x684>
				}
				else if (N_Clock.BCD_Nixie3_4>0){
    1a34:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <N_Clock+0x1d>
    1a38:	99 23       	and	r25, r25
    1a3a:	31 f0       	breq	.+12     	; 0x1a48 <Nixie_Update+0x67e>
					N_Clock.BCD_Nixie3_4 = DecimalToBCD(N_Clock.Menu_Nixie3_4);
    1a3c:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
					N_Clock.BCD_Nixie3_4 += 0xA0;//Mask out the Nixie that doesn't need to show anything
    1a40:	80 56       	subi	r24, 0x60	; 96
    1a42:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <N_Clock+0x1d>
    1a46:	03 c0       	rjmp	.+6      	; 0x1a4e <Nixie_Update+0x684>
				}
				else{//Otherwise show nothing
					N_Clock.BCD_Nixie3_4 = 0xAA;
    1a48:	8a ea       	ldi	r24, 0xAA	; 170
    1a4a:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <N_Clock+0x1d>
				}
			
				if (N_Clock.BCD_Nixie5_6>0){//Show the value
    1a4e:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <N_Clock+0x1e>
    1a52:	88 23       	and	r24, r24
    1a54:	39 f0       	breq	.+14     	; 0x1a64 <Nixie_Update+0x69a>
					N_Clock.BCD_Nixie5_6 = DecimalToBCD(N_Clock.Menu_Nixie5_6);			
    1a56:	c0 e8       	ldi	r28, 0x80	; 128
    1a58:	d1 e0       	ldi	r29, 0x01	; 1
    1a5a:	88 a1       	ldd	r24, Y+32	; 0x20
    1a5c:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1a60:	8e 8f       	std	Y+30, r24	; 0x1e
    1a62:	96 c0       	rjmp	.+300    	; 0x1b90 <Nixie_Update+0x7c6>
				}
				else{//or show only one 0
					N_Clock.BCD_Nixie5_6 = 0xA0;
    1a64:	80 ea       	ldi	r24, 0xA0	; 160
    1a66:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <N_Clock+0x1e>
    1a6a:	92 c0       	rjmp	.+292    	; 0x1b90 <Nixie_Update+0x7c6>
				}
			}
			else{
				//Determen what to show on menu enter
				if (N_Clock.Menu_Enter>0){
    1a6c:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <N_Clock+0x25>
    1a70:	99 23       	and	r25, r25
    1a72:	29 f0       	breq	.+10     	; 0x1a7e <Nixie_Update+0x6b4>
					N_Clock.BCD_Nixie1_2=DecimalToBCD(N_Clock.Menu);
    1a74:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1a78:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N_Clock+0x1c>
    1a7c:	89 c0       	rjmp	.+274    	; 0x1b90 <Nixie_Update+0x7c6>
				}
				else{
					if (N_Clock.Menu_Nixie3_4>9){
    1a7e:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <N_Clock+0x1f>
    1a82:	8a 30       	cpi	r24, 0x0A	; 10
    1a84:	28 f0       	brcs	.+10     	; 0x1a90 <Nixie_Update+0x6c6>
						N_Clock.BCD_Nixie1_2=DecimalToBCD(N_Clock.Menu_Nixie3_4);
    1a86:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1a8a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N_Clock+0x1c>
    1a8e:	0b c0       	rjmp	.+22     	; 0x1aa6 <Nixie_Update+0x6dc>
					}
					else if (N_Clock.Menu_Nixie3_4>0){
    1a90:	88 23       	and	r24, r24
    1a92:	31 f0       	breq	.+12     	; 0x1aa0 <Nixie_Update+0x6d6>
						N_Clock.BCD_Nixie1_2=DecimalToBCD(N_Clock.Menu_Nixie3_4);
    1a94:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
						N_Clock.BCD_Nixie1_2+=0xA0;
    1a98:	80 56       	subi	r24, 0x60	; 96
    1a9a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N_Clock+0x1c>
    1a9e:	03 c0       	rjmp	.+6      	; 0x1aa6 <Nixie_Update+0x6dc>
					}
					else{
						N_Clock.BCD_Nixie1_2=0xAA;
    1aa0:	8a ea       	ldi	r24, 0xAA	; 170
    1aa2:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N_Clock+0x1c>
					}
					
					if (N_Clock.Menu_Nixie5_6>0){
    1aa6:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N_Clock+0x20>
    1aaa:	88 23       	and	r24, r24
    1aac:	29 f0       	breq	.+10     	; 0x1ab8 <Nixie_Update+0x6ee>
						N_Clock.BCD_Nixie3_4=DecimalToBCD(N_Clock.Menu_Nixie5_6);
    1aae:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1ab2:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <N_Clock+0x1d>
    1ab6:	6c c0       	rjmp	.+216    	; 0x1b90 <Nixie_Update+0x7c6>
					}
					else{
						N_Clock.BCD_Nixie3_4=0xA0;
    1ab8:	80 ea       	ldi	r24, 0xA0	; 160
    1aba:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <N_Clock+0x1d>
    1abe:	68 c0       	rjmp	.+208    	; 0x1b90 <Nixie_Update+0x7c6>
			}
		}
		break;

		case Show_Roll:{
			if (Timer_Pulse_100ms()){
    1ac0:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <Timer_Pulse_100ms>
    1ac4:	88 23       	and	r24, r24
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <Nixie_Update+0x700>
    1ac8:	40 c0       	rjmp	.+128    	; 0x1b4a <Nixie_Update+0x780>
				N_Clock.ROLL_Count++;
    1aca:	e0 e8       	ldi	r30, 0x80	; 128
    1acc:	f1 e0       	ldi	r31, 0x01	; 1
    1ace:	80 85       	ldd	r24, Z+8	; 0x08
    1ad0:	8f 5f       	subi	r24, 0xFF	; 255
    1ad2:	80 87       	std	Z+8, r24	; 0x08
				N_Clock.ROLL_1++;
    1ad4:	82 81       	ldd	r24, Z+2	; 0x02
    1ad6:	8f 5f       	subi	r24, 0xFF	; 255
				if (N_Clock.ROLL_1>9){
    1ad8:	8a 30       	cpi	r24, 0x0A	; 10
    1ada:	18 f4       	brcc	.+6      	; 0x1ae2 <Nixie_Update+0x718>
		break;

		case Show_Roll:{
			if (Timer_Pulse_100ms()){
				N_Clock.ROLL_Count++;
				N_Clock.ROLL_1++;
    1adc:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <N_Clock+0x2>
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <Nixie_Update+0x71c>
				if (N_Clock.ROLL_1>9){
					N_Clock.ROLL_1=0;
    1ae2:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <N_Clock+0x2>
				}
				N_Clock.ROLL_2++;
    1ae6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <N_Clock+0x3>
    1aea:	8f 5f       	subi	r24, 0xFF	; 255
				if (N_Clock.ROLL_2>9){
    1aec:	8a 30       	cpi	r24, 0x0A	; 10
    1aee:	18 f4       	brcc	.+6      	; 0x1af6 <Nixie_Update+0x72c>
				N_Clock.ROLL_Count++;
				N_Clock.ROLL_1++;
				if (N_Clock.ROLL_1>9){
					N_Clock.ROLL_1=0;
				}
				N_Clock.ROLL_2++;
    1af0:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <N_Clock+0x3>
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <Nixie_Update+0x730>
				if (N_Clock.ROLL_2>9){
					N_Clock.ROLL_2=0;
    1af6:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <N_Clock+0x3>
				}
				N_Clock.ROLL_3++;
    1afa:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <N_Clock+0x4>
    1afe:	8f 5f       	subi	r24, 0xFF	; 255
				if (N_Clock.ROLL_3>9){
    1b00:	8a 30       	cpi	r24, 0x0A	; 10
    1b02:	18 f4       	brcc	.+6      	; 0x1b0a <Nixie_Update+0x740>
				}
				N_Clock.ROLL_2++;
				if (N_Clock.ROLL_2>9){
					N_Clock.ROLL_2=0;
				}
				N_Clock.ROLL_3++;
    1b04:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <N_Clock+0x4>
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <Nixie_Update+0x744>
				if (N_Clock.ROLL_3>9){
					N_Clock.ROLL_3=0;
    1b0a:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <N_Clock+0x4>
				}
				N_Clock.ROLL_4++;
    1b0e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <N_Clock+0x5>
    1b12:	8f 5f       	subi	r24, 0xFF	; 255
				if (N_Clock.ROLL_4>9){
    1b14:	8a 30       	cpi	r24, 0x0A	; 10
    1b16:	18 f4       	brcc	.+6      	; 0x1b1e <Nixie_Update+0x754>
				}
				N_Clock.ROLL_3++;
				if (N_Clock.ROLL_3>9){
					N_Clock.ROLL_3=0;
				}
				N_Clock.ROLL_4++;
    1b18:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <N_Clock+0x5>
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <Nixie_Update+0x758>
				if (N_Clock.ROLL_4>9){
					N_Clock.ROLL_4=0;
    1b1e:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <N_Clock+0x5>
				}
				N_Clock.ROLL_5++;
    1b22:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <N_Clock+0x6>
    1b26:	8f 5f       	subi	r24, 0xFF	; 255
				if (N_Clock.ROLL_5>9){
    1b28:	8a 30       	cpi	r24, 0x0A	; 10
    1b2a:	18 f4       	brcc	.+6      	; 0x1b32 <Nixie_Update+0x768>
				}
				N_Clock.ROLL_4++;
				if (N_Clock.ROLL_4>9){
					N_Clock.ROLL_4=0;
				}
				N_Clock.ROLL_5++;
    1b2c:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <N_Clock+0x6>
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <Nixie_Update+0x76c>
				if (N_Clock.ROLL_5>9){
					N_Clock.ROLL_5=0;
    1b32:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <N_Clock+0x6>
				}
				N_Clock.ROLL_6++;
    1b36:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <N_Clock+0x7>
    1b3a:	8f 5f       	subi	r24, 0xFF	; 255
				if (N_Clock.ROLL_6>9){
    1b3c:	8a 30       	cpi	r24, 0x0A	; 10
    1b3e:	18 f4       	brcc	.+6      	; 0x1b46 <Nixie_Update+0x77c>
				}
				N_Clock.ROLL_5++;
				if (N_Clock.ROLL_5>9){
					N_Clock.ROLL_5=0;
				}
				N_Clock.ROLL_6++;
    1b40:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <N_Clock+0x7>
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <Nixie_Update+0x780>
				if (N_Clock.ROLL_6>9){
					N_Clock.ROLL_6=0;
    1b46:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <N_Clock+0x7>
				}
			}
			N_Clock.BCD_Nixie1_2=DecimalToBCD((N_Clock.ROLL_1*10)+N_Clock.ROLL_2);
    1b4a:	c0 e8       	ldi	r28, 0x80	; 128
    1b4c:	d1 e0       	ldi	r29, 0x01	; 1
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	88 0f       	add	r24, r24
    1b52:	98 2f       	mov	r25, r24
    1b54:	99 0f       	add	r25, r25
    1b56:	99 0f       	add	r25, r25
    1b58:	89 0f       	add	r24, r25
    1b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b5c:	89 0f       	add	r24, r25
    1b5e:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1b62:	8c 8f       	std	Y+28, r24	; 0x1c
			N_Clock.BCD_Nixie3_4=DecimalToBCD((N_Clock.ROLL_3*10)+N_Clock.ROLL_4);
    1b64:	8c 81       	ldd	r24, Y+4	; 0x04
    1b66:	88 0f       	add	r24, r24
    1b68:	98 2f       	mov	r25, r24
    1b6a:	99 0f       	add	r25, r25
    1b6c:	99 0f       	add	r25, r25
    1b6e:	89 0f       	add	r24, r25
    1b70:	9d 81       	ldd	r25, Y+5	; 0x05
    1b72:	89 0f       	add	r24, r25
    1b74:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1b78:	8d 8f       	std	Y+29, r24	; 0x1d
			N_Clock.BCD_Nixie5_6=DecimalToBCD((N_Clock.ROLL_5*10)+N_Clock.ROLL_6);
    1b7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b7c:	88 0f       	add	r24, r24
    1b7e:	98 2f       	mov	r25, r24
    1b80:	99 0f       	add	r25, r25
    1b82:	99 0f       	add	r25, r25
    1b84:	89 0f       	add	r24, r25
    1b86:	9f 81       	ldd	r25, Y+7	; 0x07
    1b88:	89 0f       	add	r24, r25
    1b8a:	0e 94 87 02 	call	0x50e	; 0x50e <DecimalToBCD>
    1b8e:	8e 8f       	std	Y+30, r24	; 0x1e
		}
		break;
	}	
}
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	08 95       	ret

00001b9a <Setting_Init>:

//Setting functions
void Setting_Init(void){
	N_Clock.Setting.Init=INIT_NOK;	
    1b9a:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <N_Clock+0x28>
	N_Clock.Setting.EEPROM_File_Size = sizeof(N_Clock.Setting.EEPROM);
    1b9e:	86 e1       	ldi	r24, 0x16	; 22
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <N_Clock+0x43>
    1ba6:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <N_Clock+0x42>
    1baa:	08 95       	ret

00001bac <Nixie_Init>:
		EEPROM_Loop();
    }
}//main

//Nixie functions
void Nixie_Init(){
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
	N_Clock.Version=Version_Def;
    1bb0:	c0 e8       	ldi	r28, 0x80	; 128
    1bb2:	d1 e0       	ldi	r29, 0x01	; 1
    1bb4:	80 e7       	ldi	r24, 0x70	; 112
    1bb6:	88 83       	st	Y, r24
	//Set the correct data direction bits
	DDRD |= (1<<BCD1_0)|(1<<BCD1_1)|(1<<BCD1_2)|(1<<BCD1_3)|(1<<BCD2_0)|(1<<BCD2_1)|(1<<BCD2_2)|(1<<BCD2_3);
    1bb8:	8a b1       	in	r24, 0x0a	; 10
    1bba:	8f ef       	ldi	r24, 0xFF	; 255
    1bbc:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<Nixie1_2)|(1<<Nixie3_4)|(1<<Nixie5_6)|(1<<Colon);
    1bbe:	84 b1       	in	r24, 0x04	; 4
    1bc0:	87 61       	ori	r24, 0x17	; 23
    1bc2:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~((1<<Button1)|(1<<Button2));
    1bc4:	87 b1       	in	r24, 0x07	; 7
    1bc6:	89 7f       	andi	r24, 0xF9	; 249
    1bc8:	87 b9       	out	0x07, r24	; 7
	// Set machine states
	N_Clock.Cur_Nixie=0;
    1bca:	19 82       	std	Y+1, r1	; 0x01
	Power_Mode(Power_Mode_OFF);
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <Power_Mode>
	N_Clock.Status=Status_Nixie_Start;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	89 a3       	std	Y+33, r24	; 0x21
	N_Clock.Setting.Blanking_SV = Nixie_Blanking;
    1bd6:	92 e0       	ldi	r25, 0x02	; 2
    1bd8:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <N_Clock+0x5a>
	N_Clock.Setting.Time_On_SV = Next_Nixie_Time_on;
    1bdc:	95 e0       	ldi	r25, 0x05	; 5
    1bde:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <N_Clock+0x5b>
	N_Clock.Setting.Save_Timeout_PV = 300;
    1be2:	2c e2       	ldi	r18, 0x2C	; 44
    1be4:	31 e0       	ldi	r19, 0x01	; 1
    1be6:	30 93 c1 01 	sts	0x01C1, r19	; 0x8001c1 <N_Clock+0x41>
    1bea:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <N_Clock+0x40>
	N_Clock.Show=Show_Time;
    1bee:	8a a3       	std	Y+34, r24	; 0x22
	//init power circuit
	Power_Init();
    1bf0:	0e 94 9e 14 	call	0x293c	; 0x293c <Power_Init>
	Setting_Init();
    1bf4:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Setting_Init>
}//Nixie_Init
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	08 95       	ret

00001bfe <Setting_Loop>:
	N_Clock.Setting.Init=INIT_NOK;	
	N_Clock.Setting.EEPROM_File_Size = sizeof(N_Clock.Setting.EEPROM);
}//Setting_Init

void Setting_Loop(void){
	switch (N_Clock.Setting.Init){
    1bfe:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <N_Clock+0x28>
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	99 f0       	breq	.+38     	; 0x1c2c <Setting_Loop+0x2e>
    1c06:	20 f0       	brcs	.+8      	; 0x1c10 <Setting_Loop+0x12>
    1c08:	82 30       	cpi	r24, 0x02	; 2
    1c0a:	09 f4       	brne	.+2      	; 0x1c0e <Setting_Loop+0x10>
    1c0c:	60 c0       	rjmp	.+192    	; 0x1cce <Setting_Loop+0xd0>
    1c0e:	08 95       	ret
		case Nixie_Init_NOK:{
			EEPROM_Read(Nixie_EEPROM_Settings_Adress, N_Clock.Setting.EEPROM_File_Size, (uint8_t *)&N_Clock.Setting.EEPROM);
    1c10:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <N_Clock+0x42>
    1c14:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <N_Clock+0x43>
    1c18:	44 ec       	ldi	r20, 0xC4	; 196
    1c1a:	51 e0       	ldi	r21, 0x01	; 1
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	0e 94 2d 07 	call	0xe5a	; 0xe5a <EEPROM_Read>
			N_Clock.Setting.Init = Nixie_Init_Wait;
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <N_Clock+0x28>
		}//Nixie_Init_NOK
		break;
    1c2a:	08 95       	ret
		
		case Nixie_Init_Wait:{
			if (EEPROM_Status()==EEPROM_Status_IDLE){
    1c2c:	0e 94 16 07 	call	0xe2c	; 0xe2c <EEPROM_Status>
    1c30:	81 11       	cpse	r24, r1
    1c32:	ab c0       	rjmp	.+342    	; 0x1d8a <Setting_Loop+0x18c>
				//Copy the file to the structure
				N_Clock.Setting.Date_Show			=N_Clock.Setting.EEPROM.eDate_Show;
    1c34:	e0 e8       	ldi	r30, 0x80	; 128
    1c36:	f1 e0       	ldi	r31, 0x01	; 1
    1c38:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <N_Clock+0x44>
    1c3c:	82 a7       	std	Z+42, r24	; 0x2a
				N_Clock.Setting.Date_Show_SV		=N_Clock.Setting.EEPROM.eDate_Show_SV;
    1c3e:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <N_Clock+0x46>
    1c42:	85 a7       	std	Z+45, r24	; 0x2d
				N_Clock.Setting.Date_Timeout_SV		=N_Clock.Setting.EEPROM.eDate_Timeout_SV;
    1c44:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <N_Clock+0x45>
    1c48:	83 a7       	std	Z+43, r24	; 0x2b
				N_Clock.Setting.Save_Active			=N_Clock.Setting.EEPROM.eSave_Active;
    1c4a:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <N_Clock+0x47>
    1c4e:	87 a7       	std	Z+47, r24	; 0x2f
				N_Clock.Setting.Save_Off_Threshold	=N_Clock.Setting.EEPROM.eSave_Off_Threshold;
    1c50:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <N_Clock+0x48>
    1c54:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <N_Clock+0x49>
    1c58:	91 ab       	std	Z+49, r25	; 0x31
    1c5a:	80 ab       	std	Z+48, r24	; 0x30
				N_Clock.Setting.Save_On_Threshold	=N_Clock.Setting.EEPROM.eSave_On_Threshold;
    1c5c:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <N_Clock+0x4a>
    1c60:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <N_Clock+0x4b>
    1c64:	93 ab       	std	Z+51, r25	; 0x33
    1c66:	82 ab       	std	Z+50, r24	; 0x32
				N_Clock.Setting.Save_Time_OFF		=N_Clock.Setting.EEPROM.eSave_Time_OFF;
    1c68:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <N_Clock+0x4c>
    1c6c:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <N_Clock+0x4d>
    1c70:	a0 91 ce 01 	lds	r26, 0x01CE	; 0x8001ce <N_Clock+0x4e>
    1c74:	86 ab       	std	Z+54, r24	; 0x36
    1c76:	97 ab       	std	Z+55, r25	; 0x37
    1c78:	a0 af       	std	Z+56, r26	; 0x38
				N_Clock.Setting.Save_Time_ON		=N_Clock.Setting.EEPROM.eSave_Time_ON;
    1c7a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <N_Clock+0x4f>
    1c7e:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <N_Clock+0x50>
    1c82:	a0 91 d1 01 	lds	r26, 0x01D1	; 0x8001d1 <N_Clock+0x51>
    1c86:	82 af       	std	Z+58, r24	; 0x3a
    1c88:	93 af       	std	Z+59, r25	; 0x3b
    1c8a:	a4 af       	std	Z+60, r26	; 0x3c
				N_Clock.Setting.Save_Timeout_SV		=N_Clock.Setting.EEPROM.eSave_Timeout_SV;
    1c8c:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <N_Clock+0x52>
    1c90:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <N_Clock+0x53>
    1c94:	97 af       	std	Z+63, r25	; 0x3f
    1c96:	86 af       	std	Z+62, r24	; 0x3e
				N_Clock.Setting.Save_IS_PM			=N_Clock.Setting.EEPROM.eSave_IS_PM;
    1c98:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <N_Clock+0x54>
    1c9c:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <N_Clock+0x5c>
				N_Clock.Setting.Roll_Active			=N_Clock.Setting.EEPROM.eRoll_Active;
    1ca0:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <N_Clock+0x55>
    1ca4:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <N_Clock+0x5d>
				N_Clock.Setting.Fade				=N_Clock.Setting.EEPROM.eFade;
    1ca8:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <N_Clock+0x56>
    1cac:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <N_Clock+0x5e>
				N_Clock.Setting.Fade_Time			=N_Clock.Setting.EEPROM.eFade_Time;
    1cb0:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <N_Clock+0x57>
    1cb4:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <N_Clock+0x5f>
				N_Clock.Setting.Colon_Active		=N_Clock.Setting.EEPROM.eColon_Active;
    1cb8:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <N_Clock+0x58>
    1cbc:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <N_Clock+0x60>
				N_Clock.Setting.Nixie_Amount		=N_Clock.Setting.EEPROM.eNixie_Amount;
    1cc0:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <N_Clock+0x59>
    1cc4:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <N_Clock+0x61>
				N_Clock.Setting.Init=Nixie_Init_OK;
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	80 a7       	std	Z+40, r24	; 0x28
    1ccc:	08 95       	ret
			}
		}//Nixie_Init_Wait
		break;
		
		case Nixie_Init_OK:{
			if (N_Clock.Setting.Write_Settings && EEPROM_Status()==EEPROM_Status_IDLE){
    1cce:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <N_Clock+0x29>
    1cd2:	88 23       	and	r24, r24
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <Setting_Loop+0xda>
    1cd6:	59 c0       	rjmp	.+178    	; 0x1d8a <Setting_Loop+0x18c>
    1cd8:	0e 94 16 07 	call	0xe2c	; 0xe2c <EEPROM_Status>
    1cdc:	81 11       	cpse	r24, r1
    1cde:	55 c0       	rjmp	.+170    	; 0x1d8a <Setting_Loop+0x18c>
				N_Clock.Setting.Write_Settings				=0;
    1ce0:	e0 e8       	ldi	r30, 0x80	; 128
    1ce2:	f1 e0       	ldi	r31, 0x01	; 1
    1ce4:	11 a6       	std	Z+41, r1	; 0x29
				N_Clock.Setting.EEPROM.eDate_Show			=N_Clock.Setting.Date_Show;
    1ce6:	82 a5       	ldd	r24, Z+42	; 0x2a
    1ce8:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <N_Clock+0x44>
				N_Clock.Setting.EEPROM.eDate_Show_SV		=N_Clock.Setting.Date_Show_SV;
    1cec:	85 a5       	ldd	r24, Z+45	; 0x2d
    1cee:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <N_Clock+0x46>
				N_Clock.Setting.EEPROM.eDate_Timeout_SV		=N_Clock.Setting.Date_Timeout_SV;
    1cf2:	83 a5       	ldd	r24, Z+43	; 0x2b
    1cf4:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <N_Clock+0x45>
				N_Clock.Setting.EEPROM.eSave_Active			=N_Clock.Setting.Save_Active;
    1cf8:	87 a5       	ldd	r24, Z+47	; 0x2f
    1cfa:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <N_Clock+0x47>
				N_Clock.Setting.EEPROM.eSave_Off_Threshold	=N_Clock.Setting.Save_Off_Threshold;
    1cfe:	80 a9       	ldd	r24, Z+48	; 0x30
    1d00:	91 a9       	ldd	r25, Z+49	; 0x31
    1d02:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <N_Clock+0x49>
    1d06:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <N_Clock+0x48>
				N_Clock.Setting.EEPROM.eSave_On_Threshold	=N_Clock.Setting.Save_On_Threshold;
    1d0a:	82 a9       	ldd	r24, Z+50	; 0x32
    1d0c:	93 a9       	ldd	r25, Z+51	; 0x33
    1d0e:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <N_Clock+0x4b>
    1d12:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <N_Clock+0x4a>
				N_Clock.Setting.EEPROM.eSave_Time_OFF		=N_Clock.Setting.Save_Time_OFF;
    1d16:	86 a9       	ldd	r24, Z+54	; 0x36
    1d18:	97 a9       	ldd	r25, Z+55	; 0x37
    1d1a:	a0 ad       	ldd	r26, Z+56	; 0x38
    1d1c:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <N_Clock+0x4c>
    1d20:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <N_Clock+0x4d>
    1d24:	a0 93 ce 01 	sts	0x01CE, r26	; 0x8001ce <N_Clock+0x4e>
				N_Clock.Setting.EEPROM.eSave_Time_ON		=N_Clock.Setting.Save_Time_ON;
    1d28:	82 ad       	ldd	r24, Z+58	; 0x3a
    1d2a:	93 ad       	ldd	r25, Z+59	; 0x3b
    1d2c:	a4 ad       	ldd	r26, Z+60	; 0x3c
    1d2e:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <N_Clock+0x4f>
    1d32:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <N_Clock+0x50>
    1d36:	a0 93 d1 01 	sts	0x01D1, r26	; 0x8001d1 <N_Clock+0x51>
				N_Clock.Setting.EEPROM.eSave_Timeout_SV		=N_Clock.Setting.Save_Timeout_SV;
    1d3a:	86 ad       	ldd	r24, Z+62	; 0x3e
    1d3c:	97 ad       	ldd	r25, Z+63	; 0x3f
    1d3e:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <N_Clock+0x53>
    1d42:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <N_Clock+0x52>
				N_Clock.Setting.EEPROM.eSave_IS_PM			=N_Clock.Setting.Save_IS_PM;
    1d46:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <N_Clock+0x5c>
    1d4a:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <N_Clock+0x54>
				N_Clock.Setting.EEPROM.eRoll_Active			=N_Clock.Setting.Roll_Active;
    1d4e:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <N_Clock+0x5d>
    1d52:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <N_Clock+0x55>
				N_Clock.Setting.EEPROM.eFade				=N_Clock.Setting.Fade;
    1d56:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <N_Clock+0x5e>
    1d5a:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <N_Clock+0x56>
				N_Clock.Setting.EEPROM.eFade_Time			=N_Clock.Setting.Fade_Time;
    1d5e:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <N_Clock+0x5f>
    1d62:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <N_Clock+0x57>
				N_Clock.Setting.EEPROM.eColon_Active		=N_Clock.Setting.Colon_Active;
    1d66:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <N_Clock+0x60>
    1d6a:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <N_Clock+0x58>
				N_Clock.Setting.EEPROM.eNixie_Amount		=N_Clock.Setting.Nixie_Amount;
    1d6e:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <N_Clock+0x61>
    1d72:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <N_Clock+0x59>
				EEPROM_Write(Nixie_EEPROM_Settings_Adress, N_Clock.Setting.EEPROM_File_Size, (uint8_t *) &N_Clock.Setting.EEPROM);
    1d76:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <N_Clock+0x42>
    1d7a:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <N_Clock+0x43>
    1d7e:	44 ec       	ldi	r20, 0xC4	; 196
    1d80:	51 e0       	ldi	r21, 0x01	; 1
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0e 94 21 07 	call	0xe42	; 0xe42 <EEPROM_Write>
    1d8a:	08 95       	ret

00001d8c <Power_Safe>:
	}
}//Setting_Loop

uint8_t Power_Safe(void){
	//Nixie isn't running, no need to do this yet
	if (N_Clock.Status!=Status_Nixie_Run || N_Clock.Setting.Save_Active==0){
    1d8c:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <N_Clock+0x21>
    1d90:	82 30       	cpi	r24, 0x02	; 2
    1d92:	09 f0       	breq	.+2      	; 0x1d96 <Power_Safe+0xa>
    1d94:	62 c0       	rjmp	.+196    	; 0x1e5a <Power_Safe+0xce>
    1d96:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <N_Clock+0x2f>
    1d9a:	88 23       	and	r24, r24
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <Power_Safe+0x14>
    1d9e:	76 c0       	rjmp	.+236    	; 0x1e8c <Power_Safe+0x100>
		return 0;
	}
	//Get the analogue value for safe mode
	if(Analog_Channel_Ready(Power_Analog_Save_Channel)){
    1da0:	83 e0       	ldi	r24, 0x03	; 3
    1da2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <Analog_Channel_Ready>
    1da6:	88 23       	and	r24, r24
    1da8:	39 f0       	breq	.+14     	; 0x1db8 <Power_Safe+0x2c>
		N_Clock.Setting.Save_AI	= Analog_Channel_Read(Power_Analog_Save_Channel);
    1daa:	83 e0       	ldi	r24, 0x03	; 3
    1dac:	0e 94 3e 02 	call	0x47c	; 0x47c <Analog_Channel_Read>
    1db0:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <N_Clock+0x35>
    1db4:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <N_Clock+0x34>
	}

	//RTC is not ready or we are not saving on time settings, go back
	if (RTC_Ready()==0 || N_Clock.Setting.Save_Active==1){
    1db8:	0e 94 49 15 	call	0x2a92	; 0x2a92 <RTC_Ready>
    1dbc:	88 23       	and	r24, r24
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <Power_Safe+0x36>
    1dc0:	65 c0       	rjmp	.+202    	; 0x1e8c <Power_Safe+0x100>
    1dc2:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <N_Clock+0x2f>
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <Power_Safe+0x40>
    1dca:	49 c0       	rjmp	.+146    	; 0x1e5e <Power_Safe+0xd2>
		return 0;
	}

	//See if it is daytime
	RTC_time_struct _Save_Time_ON	= N_Clock.Setting.Save_Time_ON;
    1dcc:	e0 e8       	ldi	r30, 0x80	; 128
    1dce:	f1 e0       	ldi	r31, 0x01	; 1
    1dd0:	b2 ad       	ldd	r27, Z+58	; 0x3a
    1dd2:	63 ad       	ldd	r22, Z+59	; 0x3b
    1dd4:	94 ad       	ldd	r25, Z+60	; 0x3c
	RTC_time_struct _Save_Time_OFF	= N_Clock.Setting.Save_Time_OFF;
    1dd6:	a6 a9       	ldd	r26, Z+54	; 0x36
    1dd8:	57 a9       	ldd	r21, Z+55	; 0x37
    1dda:	80 ad       	ldd	r24, Z+56	; 0x38
	RTC_time_struct _RTC_Time		= RTC.Time;
    1ddc:	e2 ee       	ldi	r30, 0xE2	; 226
    1dde:	f1 e0       	ldi	r31, 0x01	; 1
    1de0:	70 81       	ld	r23, Z
    1de2:	41 81       	ldd	r20, Z+1	; 0x01
    1de4:	22 81       	ldd	r18, Z+2	; 0x02

	//If we use 12 hour format, we convert it to 24 hour for easy calculating.
	//NOTE: After 12:00:00 IS_PM is set, take this into account
	if(RTC.IS_TWLF){
    1de6:	30 85       	ldd	r19, Z+8	; 0x08
    1de8:	33 23       	and	r19, r19
    1dea:	a9 f0       	breq	.+42     	; 0x1e16 <Power_Safe+0x8a>
		if (N_Clock.Setting.Save_Time_ON_PM && _Save_Time_ON.Hour!=12){
    1dec:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <N_Clock+0x3d>
    1df0:	33 23       	and	r19, r19
    1df2:	19 f0       	breq	.+6      	; 0x1dfa <Power_Safe+0x6e>
    1df4:	9c 30       	cpi	r25, 0x0C	; 12
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <Power_Safe+0x6e>
			_Save_Time_ON.Hour	+= 12;
    1df8:	94 5f       	subi	r25, 0xF4	; 244
		}
		if(N_Clock.Setting.Save_Time_OFF_PM && _Save_Time_OFF.Hour!=12){
    1dfa:	30 91 b9 01 	lds	r19, 0x01B9	; 0x8001b9 <N_Clock+0x39>
    1dfe:	33 23       	and	r19, r19
    1e00:	19 f0       	breq	.+6      	; 0x1e08 <Power_Safe+0x7c>
    1e02:	8c 30       	cpi	r24, 0x0C	; 12
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <Power_Safe+0x7c>
			_Save_Time_OFF.Hour	+= 12;
    1e06:	84 5f       	subi	r24, 0xF4	; 244
		}
		if(RTC.IS_PM && _RTC_Time.Hour!=12){
    1e08:	30 91 eb 01 	lds	r19, 0x01EB	; 0x8001eb <RTC+0x9>
    1e0c:	33 23       	and	r19, r19
    1e0e:	19 f0       	breq	.+6      	; 0x1e16 <Power_Safe+0x8a>
    1e10:	2c 30       	cpi	r18, 0x0C	; 12
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <Power_Safe+0x8a>
			_RTC_Time.Hour		+= 12;
    1e14:	24 5f       	subi	r18, 0xF4	; 244
	//else if (_Midnight<=0 && (_On_Time>0 || _Off_Time>0)){
	//	return 1;
	//}
	
	//New method, not as elegant but,  ce la vie
	if (_Save_Time_OFF.Hour>_Save_Time_ON.Hour){
    1e16:	98 17       	cp	r25, r24
    1e18:	78 f4       	brcc	.+30     	; 0x1e38 <Power_Safe+0xac>
		if (_RTC_Time.Hour>_Save_Time_OFF.Hour && _RTC_Time.Hour<_Save_Time_ON.Hour){
    1e1a:	82 17       	cp	r24, r18
    1e1c:	10 f5       	brcc	.+68     	; 0x1e62 <Power_Safe+0xd6>
    1e1e:	29 17       	cp	r18, r25
    1e20:	10 f5       	brcc	.+68     	; 0x1e66 <Power_Safe+0xda>
			if(_RTC_Time.Minute>_Save_Time_OFF.Minute && _RTC_Time.Minute<_Save_Time_ON.Minute){
    1e22:	54 17       	cp	r21, r20
    1e24:	10 f5       	brcc	.+68     	; 0x1e6a <Power_Safe+0xde>
    1e26:	46 17       	cp	r20, r22
    1e28:	10 f5       	brcc	.+68     	; 0x1e6e <Power_Safe+0xe2>
				if (_RTC_Time.Second>_Save_Time_OFF.Second && _RTC_Time.Second<_Save_Time_ON.Second){
    1e2a:	a7 17       	cp	r26, r23
    1e2c:	10 f5       	brcc	.+68     	; 0x1e72 <Power_Safe+0xe6>
}//Setting_Loop

uint8_t Power_Safe(void){
	//Nixie isn't running, no need to do this yet
	if (N_Clock.Status!=Status_Nixie_Run || N_Clock.Setting.Save_Active==0){
		return 0;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	7b 17       	cp	r23, r27
    1e32:	60 f1       	brcs	.+88     	; 0x1e8c <Power_Safe+0x100>
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	08 95       	ret
					return 1;
				}
			}
		}
	}
	else if (_Save_Time_OFF.Hour<_Save_Time_ON.Hour){
    1e38:	89 17       	cp	r24, r25
    1e3a:	e8 f4       	brcc	.+58     	; 0x1e76 <Power_Safe+0xea>
		if (_RTC_Time.Hour<_Save_Time_OFF.Hour && _RTC_Time.Hour>_Save_Time_ON.Hour){
    1e3c:	28 17       	cp	r18, r24
    1e3e:	e8 f4       	brcc	.+58     	; 0x1e7a <Power_Safe+0xee>
    1e40:	92 17       	cp	r25, r18
    1e42:	e8 f4       	brcc	.+58     	; 0x1e7e <Power_Safe+0xf2>
			if(_RTC_Time.Minute<_Save_Time_OFF.Minute && _RTC_Time.Minute>_Save_Time_ON.Minute){
    1e44:	45 17       	cp	r20, r21
    1e46:	e8 f4       	brcc	.+58     	; 0x1e82 <Power_Safe+0xf6>
    1e48:	64 17       	cp	r22, r20
    1e4a:	e8 f4       	brcc	.+58     	; 0x1e86 <Power_Safe+0xfa>
				if (_RTC_Time.Second<_Save_Time_OFF.Second && _RTC_Time.Second>_Save_Time_ON.Second){
    1e4c:	7a 17       	cp	r23, r26
    1e4e:	e8 f4       	brcc	.+58     	; 0x1e8a <Power_Safe+0xfe>
}//Setting_Loop

uint8_t Power_Safe(void){
	//Nixie isn't running, no need to do this yet
	if (N_Clock.Status!=Status_Nixie_Run || N_Clock.Setting.Save_Active==0){
		return 0;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	b7 17       	cp	r27, r23
    1e54:	d8 f0       	brcs	.+54     	; 0x1e8c <Power_Safe+0x100>
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	08 95       	ret
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	08 95       	ret
		N_Clock.Setting.Save_AI	= Analog_Channel_Read(Power_Analog_Save_Channel);
	}

	//RTC is not ready or we are not saving on time settings, go back
	if (RTC_Ready()==0 || N_Clock.Setting.Save_Active==1){
		return 0;
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	08 95       	ret
				}
			}
		}
	}
	
	return 0;	
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	08 95       	ret
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	08 95       	ret
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	08 95       	ret
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	08 95       	ret
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	08 95       	ret
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	08 95       	ret
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	08 95       	ret
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	08 95       	ret
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	08 95       	ret
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	08 95       	ret
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	08 95       	ret

00001e8e <Nixie_Loop>:
	//init power circuit
	Power_Init();
	Setting_Init();
}//Nixie_Init

void Nixie_Loop(void){
    1e8e:	ef 92       	push	r14
    1e90:	ff 92       	push	r15
    1e92:	0f 93       	push	r16
    1e94:	1f 93       	push	r17
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
	uint8_t _Save_On = Power_Safe();
    1e9a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <Power_Safe>
    1e9e:	c8 2f       	mov	r28, r24

	switch (N_Clock.Status){
    1ea0:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <N_Clock+0x21>
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	29 f0       	breq	.+10     	; 0x1eb2 <Nixie_Loop+0x24>
    1ea8:	08 f4       	brcc	.+2      	; 0x1eac <Nixie_Loop+0x1e>
    1eaa:	69 c4       	rjmp	.+2258   	; 0x277e <Nixie_Loop+0x8f0>
    1eac:	84 30       	cpi	r24, 0x04	; 4
    1eae:	98 f0       	brcs	.+38     	; 0x1ed6 <Nixie_Loop+0x48>
    1eb0:	66 c4       	rjmp	.+2252   	; 0x277e <Nixie_Loop+0x8f0>
		
		case Status_Nixie_Start:{
			if (N_Clock.Setting.Init==Nixie_Init_OK){
    1eb2:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <N_Clock+0x28>
    1eb6:	82 30       	cpi	r24, 0x02	; 2
    1eb8:	09 f0       	breq	.+2      	; 0x1ebc <Nixie_Loop+0x2e>
    1eba:	61 c4       	rjmp	.+2242   	; 0x277e <Nixie_Loop+0x8f0>
				Power_Mode(Power_Mode_ON);
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <Power_Mode>
				if (N_Clock.Setting.Nixie_Amount!=6 || N_Clock.Setting.Nixie_Amount!=4){//If the amount is not correct, we assume this is a new chip or something went wrong with the EE-PROM
					N_Clock.Setting.Nixie_Amount=4;
    1ec2:	e0 e8       	ldi	r30, 0x80	; 128
    1ec4:	f1 e0       	ldi	r31, 0x01	; 1
    1ec6:	84 e0       	ldi	r24, 0x04	; 4
    1ec8:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <N_Clock+0x61>
					N_Clock.Status=Status_Nixie_Menu;
    1ecc:	83 e0       	ldi	r24, 0x03	; 3
    1ece:	81 a3       	std	Z+33, r24	; 0x21
					N_Clock.Menu=51;
    1ed0:	83 e3       	ldi	r24, 0x33	; 51
    1ed2:	83 a3       	std	Z+35, r24	; 0x23
    1ed4:	54 c4       	rjmp	.+2216   	; 0x277e <Nixie_Loop+0x8f0>
		}//Status_Nixie_Start
		break;
		
		case Status_Nixie_Run:
		case Status_Nixie_Menu:{
			Next_Nixie();
    1ed6:	0e 94 aa 09 	call	0x1354	; 0x1354 <Next_Nixie>

			//See if we want to go in or out of the menu...
			if ((PINC & (1<<Button1)) || (PINC & (1<<Button2))){
    1eda:	31 99       	sbic	0x06, 1	; 6
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <Nixie_Loop+0x54>
    1ede:	32 9b       	sbis	0x06, 2	; 6
    1ee0:	04 c0       	rjmp	.+8      	; 0x1eea <Nixie_Loop+0x5c>
				Debounce.Menu=200;//2s
    1ee2:	88 ec       	ldi	r24, 0xC8	; 200
    1ee4:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <Debounce>
    1ee8:	28 c0       	rjmp	.+80     	; 0x1f3a <Nixie_Loop+0xac>
			}
		
			if (Debounce.Menu==0){
    1eea:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <Debounce>
    1eee:	81 11       	cpse	r24, r1
    1ef0:	24 c0       	rjmp	.+72     	; 0x1f3a <Nixie_Loop+0xac>
				if (N_Clock.Status==Status_Nixie_Run){
    1ef2:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <N_Clock+0x21>
    1ef6:	82 30       	cpi	r24, 0x02	; 2
    1ef8:	a9 f4       	brne	.+42     	; 0x1f24 <Nixie_Loop+0x96>
					N_Clock.Status=Status_Nixie_Menu;
    1efa:	83 e0       	ldi	r24, 0x03	; 3
    1efc:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <N_Clock+0x21>
					Debounce.Menu=200;//2s
    1f00:	ed e7       	ldi	r30, 0x7D	; 125
    1f02:	f1 e0       	ldi	r31, 0x01	; 1
    1f04:	88 ec       	ldi	r24, 0xC8	; 200
    1f06:	80 83       	st	Z, r24
					Debounce.Sub_Menu=100;//1sec
    1f08:	84 e6       	ldi	r24, 0x64	; 100
    1f0a:	81 83       	std	Z+1, r24	; 0x01
					if(N_Clock.Setting.Nixie_Amount<6){
    1f0c:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <N_Clock+0x61>
    1f10:	86 30       	cpi	r24, 0x06	; 6
    1f12:	20 f4       	brcc	.+8      	; 0x1f1c <Nixie_Loop+0x8e>
						N_Clock.Menu=2;
    1f14:	82 e0       	ldi	r24, 0x02	; 2
    1f16:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <N_Clock+0x23>
    1f1a:	8e c1       	rjmp	.+796    	; 0x2238 <Nixie_Loop+0x3aa>
					}
					else{
						N_Clock.Menu=1;
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <N_Clock+0x23>
    1f22:	8a c1       	rjmp	.+788    	; 0x2238 <Nixie_Loop+0x3aa>
					}
				}
				else{
					N_Clock.Status=Status_Nixie_Run;
    1f24:	e0 e8       	ldi	r30, 0x80	; 128
    1f26:	f1 e0       	ldi	r31, 0x01	; 1
    1f28:	82 e0       	ldi	r24, 0x02	; 2
    1f2a:	81 a3       	std	Z+33, r24	; 0x21
					Debounce.Menu=200;
    1f2c:	88 ec       	ldi	r24, 0xC8	; 200
    1f2e:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <Debounce>
					N_Clock.Setting.Write_Settings++;
    1f32:	81 a5       	ldd	r24, Z+41	; 0x29
    1f34:	8f 5f       	subi	r24, 0xFF	; 255
    1f36:	81 a7       	std	Z+41, r24	; 0x29
    1f38:	08 c0       	rjmp	.+16     	; 0x1f4a <Nixie_Loop+0xbc>
				}
			}

			switch(N_Clock.Status){
    1f3a:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <N_Clock+0x21>
    1f3e:	82 30       	cpi	r24, 0x02	; 2
    1f40:	21 f0       	breq	.+8      	; 0x1f4a <Nixie_Loop+0xbc>
    1f42:	83 30       	cpi	r24, 0x03	; 3
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <Nixie_Loop+0xba>
    1f46:	1b c4       	rjmp	.+2102   	; 0x277e <Nixie_Loop+0x8f0>
    1f48:	77 c1       	rjmp	.+750    	; 0x2238 <Nixie_Loop+0x3aa>
				case Status_Nixie_Run:{
					//N_Clock.Menu=0;
					
					//If enabled, roll the Nixies every minute				
					if(N_Clock.Show==Show_Time || N_Clock.Show==Show_Date){
    1f4a:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <N_Clock+0x22>
    1f4e:	81 50       	subi	r24, 0x01	; 1
    1f50:	82 30       	cpi	r24, 0x02	; 2
    1f52:	08 f0       	brcs	.+2      	; 0x1f56 <Nixie_Loop+0xc8>
    1f54:	ce c0       	rjmp	.+412    	; 0x20f2 <Nixie_Loop+0x264>
						if(N_Clock.Setting.Roll_Active && RTC.Time.Second==0){
    1f56:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <N_Clock+0x5d>
    1f5a:	88 23       	and	r24, r24
    1f5c:	f1 f1       	breq	.+124    	; 0x1fda <Nixie_Loop+0x14c>
    1f5e:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <RTC>
    1f62:	81 11       	cpse	r24, r1
    1f64:	3a c0       	rjmp	.+116    	; 0x1fda <Nixie_Loop+0x14c>
							N_Clock.ROLL_1=(RTC.Time.Hour/10);
    1f66:	a2 ee       	ldi	r26, 0xE2	; 226
    1f68:	b1 e0       	ldi	r27, 0x01	; 1
    1f6a:	12 96       	adiw	r26, 0x02	; 2
    1f6c:	2c 91       	ld	r18, X
    1f6e:	12 97       	sbiw	r26, 0x02	; 2
    1f70:	e0 e8       	ldi	r30, 0x80	; 128
    1f72:	f1 e0       	ldi	r31, 0x01	; 1
    1f74:	8d ec       	ldi	r24, 0xCD	; 205
    1f76:	28 9f       	mul	r18, r24
    1f78:	91 2d       	mov	r25, r1
    1f7a:	11 24       	eor	r1, r1
    1f7c:	96 95       	lsr	r25
    1f7e:	96 95       	lsr	r25
    1f80:	96 95       	lsr	r25
    1f82:	92 83       	std	Z+2, r25	; 0x02
							N_Clock.ROLL_2=(RTC.Time.Hour%10);
    1f84:	99 0f       	add	r25, r25
    1f86:	39 2f       	mov	r19, r25
    1f88:	33 0f       	add	r19, r19
    1f8a:	33 0f       	add	r19, r19
    1f8c:	93 0f       	add	r25, r19
    1f8e:	29 1b       	sub	r18, r25
    1f90:	23 83       	std	Z+3, r18	; 0x03
							N_Clock.ROLL_3=(RTC.Time.Minute/10);
    1f92:	11 96       	adiw	r26, 0x01	; 1
    1f94:	9c 91       	ld	r25, X
    1f96:	98 9f       	mul	r25, r24
    1f98:	81 2d       	mov	r24, r1
    1f9a:	11 24       	eor	r1, r1
    1f9c:	86 95       	lsr	r24
    1f9e:	86 95       	lsr	r24
    1fa0:	86 95       	lsr	r24
    1fa2:	84 83       	std	Z+4, r24	; 0x04
							N_Clock.ROLL_4=(RTC.Time.Minute%10);
    1fa4:	88 0f       	add	r24, r24
    1fa6:	38 2f       	mov	r19, r24
    1fa8:	33 0f       	add	r19, r19
    1faa:	33 0f       	add	r19, r19
    1fac:	83 0f       	add	r24, r19
    1fae:	98 1b       	sub	r25, r24
    1fb0:	95 83       	std	Z+5, r25	; 0x05
							if(N_Clock.Setting.Nixie_Amount>4){
    1fb2:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <N_Clock+0x61>
    1fb6:	85 30       	cpi	r24, 0x05	; 5
    1fb8:	10 f0       	brcs	.+4      	; 0x1fbe <Nixie_Loop+0x130>
								N_Clock.ROLL_5=(RTC.Time.Hour%10);
    1fba:	26 83       	std	Z+6, r18	; 0x06
								N_Clock.ROLL_6=(RTC.Time.Minute%10);
    1fbc:	97 83       	std	Z+7, r25	; 0x07
							}
							N_Clock.Show=Show_Roll;
    1fbe:	e0 e8       	ldi	r30, 0x80	; 128
    1fc0:	f1 e0       	ldi	r31, 0x01	; 1
    1fc2:	84 e0       	ldi	r24, 0x04	; 4
    1fc4:	82 a3       	std	Z+34, r24	; 0x22
						}

						//Determine if we need to go into power save mode
						switch(N_Clock.Setting.Save_Active){
    1fc6:	87 a5       	ldd	r24, Z+47	; 0x2f
    1fc8:	82 30       	cpi	r24, 0x02	; 2
    1fca:	f1 f1       	breq	.+124    	; 0x2048 <Nixie_Loop+0x1ba>
    1fcc:	83 30       	cpi	r24, 0x03	; 3
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <Nixie_Loop+0x144>
    1fd0:	61 c0       	rjmp	.+194    	; 0x2094 <Nixie_Loop+0x206>
    1fd2:	81 30       	cpi	r24, 0x01	; 1
    1fd4:	09 f0       	breq	.+2      	; 0x1fd8 <Nixie_Loop+0x14a>
    1fd6:	22 c1       	rjmp	.+580    	; 0x221c <Nixie_Loop+0x38e>
    1fd8:	0a c0       	rjmp	.+20     	; 0x1fee <Nixie_Loop+0x160>
    1fda:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <N_Clock+0x2f>
    1fde:	82 30       	cpi	r24, 0x02	; 2
    1fe0:	99 f1       	breq	.+102    	; 0x2048 <Nixie_Loop+0x1ba>
    1fe2:	83 30       	cpi	r24, 0x03	; 3
    1fe4:	09 f4       	brne	.+2      	; 0x1fe8 <Nixie_Loop+0x15a>
    1fe6:	56 c0       	rjmp	.+172    	; 0x2094 <Nixie_Loop+0x206>
    1fe8:	81 30       	cpi	r24, 0x01	; 1
    1fea:	09 f0       	breq	.+2      	; 0x1fee <Nixie_Loop+0x160>
    1fec:	82 c0       	rjmp	.+260    	; 0x20f2 <Nixie_Loop+0x264>
							case Nixie_Save_AI:{
								if (N_Clock.Setting.Save_On_Threshold<N_Clock.Setting.Save_AI){
    1fee:	e0 e8       	ldi	r30, 0x80	; 128
    1ff0:	f1 e0       	ldi	r31, 0x01	; 1
    1ff2:	22 a9       	ldd	r18, Z+50	; 0x32
    1ff4:	33 a9       	ldd	r19, Z+51	; 0x33
    1ff6:	84 a9       	ldd	r24, Z+52	; 0x34
    1ff8:	95 a9       	ldd	r25, Z+53	; 0x35
    1ffa:	28 17       	cp	r18, r24
    1ffc:	39 07       	cpc	r19, r25
    1ffe:	d8 f4       	brcc	.+54     	; 0x2036 <Nixie_Loop+0x1a8>
									N_Clock.Setting.Save_Timeout_PV -= N_Clock.Setting.Save_Timeout_PV && Timer_Pulse_1s();
    2000:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <N_Clock+0x40>
    2004:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <N_Clock+0x41>
    2008:	89 2b       	or	r24, r25
    200a:	51 f0       	breq	.+20     	; 0x2020 <Nixie_Loop+0x192>
    200c:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <Timer_Pulse_1s>
    2010:	41 e0       	ldi	r20, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	81 11       	cpse	r24, r1
    2016:	01 c0       	rjmp	.+2      	; 0x201a <Nixie_Loop+0x18c>
    2018:	40 e0       	ldi	r20, 0x00	; 0
    201a:	24 2f       	mov	r18, r20
    201c:	39 2f       	mov	r19, r25
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <Nixie_Loop+0x196>
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	e0 ec       	ldi	r30, 0xC0	; 192
    2026:	f1 e0       	ldi	r31, 0x01	; 1
    2028:	80 81       	ld	r24, Z
    202a:	91 81       	ldd	r25, Z+1	; 0x01
    202c:	82 1b       	sub	r24, r18
    202e:	93 0b       	sbc	r25, r19
    2030:	91 83       	std	Z+1, r25	; 0x01
    2032:	80 83       	st	Z, r24
    2034:	5e c0       	rjmp	.+188    	; 0x20f2 <Nixie_Loop+0x264>
								}
								else{
									N_Clock.Setting.Save_Timeout_PV = N_Clock.Setting.Save_Timeout_SV;
    2036:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <N_Clock+0x3e>
    203a:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <N_Clock+0x3f>
    203e:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <N_Clock+0x41>
    2042:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <N_Clock+0x40>
    2046:	55 c0       	rjmp	.+170    	; 0x20f2 <Nixie_Loop+0x264>
								}
							}//Nixie_Save_AI
							break;
							case Nixie_Save_Time:{
								if (_Save_On>0){
    2048:	cc 23       	and	r28, r28
    204a:	d9 f0       	breq	.+54     	; 0x2082 <Nixie_Loop+0x1f4>
									N_Clock.Setting.Save_Timeout_PV -= N_Clock.Setting.Save_Timeout_PV && Timer_Pulse_1s();
    204c:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <N_Clock+0x40>
    2050:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <N_Clock+0x41>
    2054:	89 2b       	or	r24, r25
    2056:	51 f0       	breq	.+20     	; 0x206c <Nixie_Loop+0x1de>
    2058:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <Timer_Pulse_1s>
    205c:	41 e0       	ldi	r20, 0x01	; 1
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	81 11       	cpse	r24, r1
    2062:	01 c0       	rjmp	.+2      	; 0x2066 <Nixie_Loop+0x1d8>
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	24 2f       	mov	r18, r20
    2068:	39 2f       	mov	r19, r25
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <Nixie_Loop+0x1e2>
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	e0 ec       	ldi	r30, 0xC0	; 192
    2072:	f1 e0       	ldi	r31, 0x01	; 1
    2074:	80 81       	ld	r24, Z
    2076:	91 81       	ldd	r25, Z+1	; 0x01
    2078:	82 1b       	sub	r24, r18
    207a:	93 0b       	sbc	r25, r19
    207c:	91 83       	std	Z+1, r25	; 0x01
    207e:	80 83       	st	Z, r24
    2080:	38 c0       	rjmp	.+112    	; 0x20f2 <Nixie_Loop+0x264>
								}
								else{
									N_Clock.Setting.Save_Timeout_PV = N_Clock.Setting.Save_Timeout_SV;
    2082:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <N_Clock+0x3e>
    2086:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <N_Clock+0x3f>
    208a:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <N_Clock+0x41>
    208e:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <N_Clock+0x40>
    2092:	2f c0       	rjmp	.+94     	; 0x20f2 <Nixie_Loop+0x264>
								}
							}//Nixie_Save_Time
							break;
							case Nixie_Save_AI_Time:{
								if(_Save_On>0){
    2094:	cc 23       	and	r28, r28
    2096:	69 f1       	breq	.+90     	; 0x20f2 <Nixie_Loop+0x264>
									if (N_Clock.Setting.Save_On_Threshold<N_Clock.Setting.Save_AI){
    2098:	e0 e8       	ldi	r30, 0x80	; 128
    209a:	f1 e0       	ldi	r31, 0x01	; 1
    209c:	22 a9       	ldd	r18, Z+50	; 0x32
    209e:	33 a9       	ldd	r19, Z+51	; 0x33
    20a0:	84 a9       	ldd	r24, Z+52	; 0x34
    20a2:	95 a9       	ldd	r25, Z+53	; 0x35
    20a4:	28 17       	cp	r18, r24
    20a6:	39 07       	cpc	r19, r25
    20a8:	e0 f4       	brcc	.+56     	; 0x20e2 <Nixie_Loop+0x254>
										N_Clock.Setting.Save_Timeout_PV -= N_Clock.Setting.Save_Timeout_PV && Timer_Pulse_1s();
    20aa:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <N_Clock+0x40>
    20ae:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <N_Clock+0x41>
    20b2:	89 2b       	or	r24, r25
    20b4:	51 f0       	breq	.+20     	; 0x20ca <Nixie_Loop+0x23c>
    20b6:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <Timer_Pulse_1s>
    20ba:	31 e0       	ldi	r19, 0x01	; 1
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	81 11       	cpse	r24, r1
    20c0:	01 c0       	rjmp	.+2      	; 0x20c4 <Nixie_Loop+0x236>
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	83 2f       	mov	r24, r19
    20c6:	92 2f       	mov	r25, r18
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <Nixie_Loop+0x240>
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	e0 ec       	ldi	r30, 0xC0	; 192
    20d0:	f1 e0       	ldi	r31, 0x01	; 1
    20d2:	20 81       	ld	r18, Z
    20d4:	31 81       	ldd	r19, Z+1	; 0x01
    20d6:	a9 01       	movw	r20, r18
    20d8:	48 1b       	sub	r20, r24
    20da:	59 0b       	sbc	r21, r25
    20dc:	51 83       	std	Z+1, r21	; 0x01
    20de:	40 83       	st	Z, r20
    20e0:	08 c0       	rjmp	.+16     	; 0x20f2 <Nixie_Loop+0x264>
									}
									else{
										N_Clock.Setting.Save_Timeout_PV = N_Clock.Setting.Save_Timeout_SV;
    20e2:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <N_Clock+0x3e>
    20e6:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <N_Clock+0x3f>
    20ea:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <N_Clock+0x41>
    20ee:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <N_Clock+0x40>
							break;
						}//switch(N_Clock.Setting.Save_Active)
					}

					//Update the Nixies with what we want to show.
					switch(N_Clock.Show){
    20f2:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <N_Clock+0x22>
    20f6:	81 30       	cpi	r24, 0x01	; 1
    20f8:	39 f0       	breq	.+14     	; 0x2108 <Nixie_Loop+0x27a>
    20fa:	c0 f1       	brcs	.+112    	; 0x216c <Nixie_Loop+0x2de>
    20fc:	82 30       	cpi	r24, 0x02	; 2
    20fe:	39 f1       	breq	.+78     	; 0x214e <Nixie_Loop+0x2c0>
    2100:	84 30       	cpi	r24, 0x04	; 4
    2102:	09 f0       	breq	.+2      	; 0x2106 <Nixie_Loop+0x278>
    2104:	94 c0       	rjmp	.+296    	; 0x222e <Nixie_Loop+0x3a0>
    2106:	8a c0       	rjmp	.+276    	; 0x221c <Nixie_Loop+0x38e>
						case Show_Time:{
							//Alternate between date and time?
							if (N_Clock.Setting.Save_Timeout_PV==0){
    2108:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <N_Clock+0x40>
    210c:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <N_Clock+0x41>
    2110:	89 2b       	or	r24, r25
    2112:	49 f4       	brne	.+18     	; 0x2126 <Nixie_Loop+0x298>
								N_Clock.Setting.Save_Timeout_PV=10;//debouncing
    2114:	8a e0       	ldi	r24, 0x0A	; 10
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <N_Clock+0x41>
    211c:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <N_Clock+0x40>
								N_Clock.Show=Show_Nothing;
    2120:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <N_Clock+0x22>
								break;
    2124:	84 c0       	rjmp	.+264    	; 0x222e <Nixie_Loop+0x3a0>
							}

							if (N_Clock.Setting.Date_Show){
    2126:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <N_Clock+0x2a>
    212a:	88 23       	and	r24, r24
    212c:	09 f4       	brne	.+2      	; 0x2130 <Nixie_Loop+0x2a2>
    212e:	7f c0       	rjmp	.+254    	; 0x222e <Nixie_Loop+0x3a0>
								if (N_Clock.Setting.Date_Show_SV>0 && N_Clock.Setting.Date_Timeout_PV==0){
    2130:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <N_Clock+0x2d>
    2134:	88 23       	and	r24, r24
    2136:	09 f4       	brne	.+2      	; 0x213a <Nixie_Loop+0x2ac>
    2138:	7a c0       	rjmp	.+244    	; 0x222e <Nixie_Loop+0x3a0>
    213a:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <N_Clock+0x2c>
    213e:	91 11       	cpse	r25, r1
    2140:	76 c0       	rjmp	.+236    	; 0x222e <Nixie_Loop+0x3a0>
									N_Clock.Setting.Date_Show_PV=N_Clock.Setting.Date_Show_SV;
    2142:	e0 e8       	ldi	r30, 0x80	; 128
    2144:	f1 e0       	ldi	r31, 0x01	; 1
    2146:	86 a7       	std	Z+46, r24	; 0x2e
									N_Clock.Show=Show_Date;
    2148:	82 e0       	ldi	r24, 0x02	; 2
    214a:	82 a3       	std	Z+34, r24	; 0x22
    214c:	70 c0       	rjmp	.+224    	; 0x222e <Nixie_Loop+0x3a0>
						}//Show_Time
						break;
						
						case Show_Date:{
							//After a timeout, cycle back to showing the time
							if (N_Clock.Setting.Date_Timeout_SV>0 && N_Clock.Setting.Date_Show_PV==0){
    214e:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <N_Clock+0x2b>
    2152:	88 23       	and	r24, r24
    2154:	09 f4       	brne	.+2      	; 0x2158 <Nixie_Loop+0x2ca>
    2156:	6b c0       	rjmp	.+214    	; 0x222e <Nixie_Loop+0x3a0>
    2158:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <N_Clock+0x2e>
    215c:	91 11       	cpse	r25, r1
    215e:	67 c0       	rjmp	.+206    	; 0x222e <Nixie_Loop+0x3a0>
								N_Clock.Setting.Date_Timeout_PV=N_Clock.Setting.Date_Timeout_SV;
    2160:	e0 e8       	ldi	r30, 0x80	; 128
    2162:	f1 e0       	ldi	r31, 0x01	; 1
    2164:	84 a7       	std	Z+44, r24	; 0x2c
								N_Clock.Show=Show_Time;
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	82 a3       	std	Z+34, r24	; 0x22
    216a:	61 c0       	rjmp	.+194    	; 0x222e <Nixie_Loop+0x3a0>
							}
						}//Show_Date
						break;

						case Show_Nothing:{
							if (N_Clock.Setting.Save_AI<N_Clock.Setting.Save_Off_Threshold){
    216c:	e0 e8       	ldi	r30, 0x80	; 128
    216e:	f1 e0       	ldi	r31, 0x01	; 1
    2170:	24 a9       	ldd	r18, Z+52	; 0x34
    2172:	35 a9       	ldd	r19, Z+53	; 0x35
    2174:	80 a9       	ldd	r24, Z+48	; 0x30
    2176:	91 a9       	ldd	r25, Z+49	; 0x31
    2178:	28 17       	cp	r18, r24
    217a:	39 07       	cpc	r19, r25
    217c:	d8 f4       	brcc	.+54     	; 0x21b4 <Nixie_Loop+0x326>
								N_Clock.Setting.Save_Timeout_PV -= N_Clock.Setting.Save_Timeout_PV && Timer_Pulse_1s();
    217e:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <N_Clock+0x40>
    2182:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <N_Clock+0x41>
    2186:	89 2b       	or	r24, r25
    2188:	51 f0       	breq	.+20     	; 0x219e <Nixie_Loop+0x310>
    218a:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <Timer_Pulse_1s>
    218e:	41 e0       	ldi	r20, 0x01	; 1
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	81 11       	cpse	r24, r1
    2194:	01 c0       	rjmp	.+2      	; 0x2198 <Nixie_Loop+0x30a>
    2196:	40 e0       	ldi	r20, 0x00	; 0
    2198:	24 2f       	mov	r18, r20
    219a:	39 2f       	mov	r19, r25
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <Nixie_Loop+0x314>
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	e0 ec       	ldi	r30, 0xC0	; 192
    21a4:	f1 e0       	ldi	r31, 0x01	; 1
    21a6:	80 81       	ld	r24, Z
    21a8:	91 81       	ldd	r25, Z+1	; 0x01
    21aa:	82 1b       	sub	r24, r18
    21ac:	93 0b       	sbc	r25, r19
    21ae:	91 83       	std	Z+1, r25	; 0x01
    21b0:	80 83       	st	Z, r24
    21b2:	08 c0       	rjmp	.+16     	; 0x21c4 <Nixie_Loop+0x336>
							}
							else{
								N_Clock.Setting.Save_Timeout_PV = N_Clock.Setting.Save_Timeout_SV;
    21b4:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <N_Clock+0x3e>
    21b8:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <N_Clock+0x3f>
    21bc:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <N_Clock+0x41>
    21c0:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <N_Clock+0x40>
							}

							//User wants to see the time for a short while
							if (!(PINC & (1<<Button1)) || !(PINC & (1<<Button2))){
    21c4:	31 9b       	sbis	0x06, 1	; 6
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <Nixie_Loop+0x33e>
    21c8:	32 99       	sbic	0x06, 2	; 6
    21ca:	04 c0       	rjmp	.+8      	; 0x21d4 <Nixie_Loop+0x346>
								N_Clock.Show=Show_Time;//return to where we came from
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <N_Clock+0x22>
								break;
    21d2:	2d c0       	rjmp	.+90     	; 0x222e <Nixie_Loop+0x3a0>
							}
							
							//Check if we need to go to normal operation
							if(N_Clock.Setting.Save_Active==Nixie_Save_AI){
    21d4:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <N_Clock+0x2f>
    21d8:	81 30       	cpi	r24, 0x01	; 1
    21da:	51 f4       	brne	.+20     	; 0x21f0 <Nixie_Loop+0x362>
								if (N_Clock.Setting.Save_Timeout_PV==0){
    21dc:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <N_Clock+0x40>
    21e0:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <N_Clock+0x41>
    21e4:	89 2b       	or	r24, r25
    21e6:	19 f5       	brne	.+70     	; 0x222e <Nixie_Loop+0x3a0>
									N_Clock.Show=Show_Time;//return to where we came from
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <N_Clock+0x22>
									break;
    21ee:	1f c0       	rjmp	.+62     	; 0x222e <Nixie_Loop+0x3a0>
								}
							}//Nixie_Save_AI
							if (N_Clock.Setting.Save_Active==Nixie_Save_Time){
    21f0:	82 30       	cpi	r24, 0x02	; 2
    21f2:	31 f4       	brne	.+12     	; 0x2200 <Nixie_Loop+0x372>
								if (_Save_On==0){
    21f4:	c1 11       	cpse	r28, r1
    21f6:	1b c0       	rjmp	.+54     	; 0x222e <Nixie_Loop+0x3a0>
									N_Clock.Show=Show_Time;//return to where we came from
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <N_Clock+0x22>
									break;
    21fe:	17 c0       	rjmp	.+46     	; 0x222e <Nixie_Loop+0x3a0>
								}
							}//Nixie_Save_Time
							if(N_Clock.Setting.Save_Active==Nixie_Save_AI_Time){
    2200:	83 30       	cpi	r24, 0x03	; 3
    2202:	a9 f4       	brne	.+42     	; 0x222e <Nixie_Loop+0x3a0>
								if (N_Clock.Setting.Save_Timeout_PV==0 && _Save_On==0){
    2204:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <N_Clock+0x40>
    2208:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <N_Clock+0x41>
    220c:	89 2b       	or	r24, r25
    220e:	79 f4       	brne	.+30     	; 0x222e <Nixie_Loop+0x3a0>
    2210:	c1 11       	cpse	r28, r1
    2212:	0d c0       	rjmp	.+26     	; 0x222e <Nixie_Loop+0x3a0>
									N_Clock.Show=Show_Time;//return to where we came from
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <N_Clock+0x22>
    221a:	09 c0       	rjmp	.+18     	; 0x222e <Nixie_Loop+0x3a0>
							}//Nixie_Save_AI_Time
							
						}//Show_Nothing
						break;
						case Show_Roll:{
							if (N_Clock.ROLL_Count>10){
    221c:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <N_Clock+0x8>
    2220:	8b 30       	cpi	r24, 0x0B	; 11
    2222:	28 f0       	brcs	.+10     	; 0x222e <Nixie_Loop+0x3a0>
								N_Clock.ROLL_Count=0;
    2224:	e0 e8       	ldi	r30, 0x80	; 128
    2226:	f1 e0       	ldi	r31, 0x01	; 1
    2228:	10 86       	std	Z+8, r1	; 0x08
								N_Clock.Show=Show_Time;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	82 a3       	std	Z+34, r24	; 0x22
							}
						}//Show_Roll
						break;
					}//N_Clock.Show
					Nixie_Update(N_Clock.Show);
    222e:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <N_Clock+0x22>
    2232:	0e 94 e5 09 	call	0x13ca	; 0x13ca <Nixie_Update>

				}//Status_Nixie_Run
				break;
    2236:	a3 c2       	rjmp	.+1350   	; 0x277e <Nixie_Loop+0x8f0>
				
				case Status_Nixie_Menu:{
					
					//Is there a button pressed?					
					if((PINC & (1<<Button1)) && (PINC & (1<<Button2))){
    2238:	31 9b       	sbis	0x06, 1	; 6
    223a:	06 c0       	rjmp	.+12     	; 0x2248 <Nixie_Loop+0x3ba>
    223c:	32 9b       	sbis	0x06, 2	; 6
    223e:	04 c0       	rjmp	.+8      	; 0x2248 <Nixie_Loop+0x3ba>
						Debounce.Sub_Menu=10;//100ms debounce
    2240:	8a e0       	ldi	r24, 0x0A	; 10
    2242:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <Debounce+0x1>
    2246:	b1 c1       	rjmp	.+866    	; 0x25aa <Nixie_Loop+0x71c>
					}
					else if(~(PINC & (1<<Button1)) && (PINC & (1<<Button2)) && Debounce.Sub_Menu==0){
    2248:	86 b1       	in	r24, 0x06	; 6
    224a:	32 9b       	sbis	0x06, 2	; 6
    224c:	54 c0       	rjmp	.+168    	; 0x22f6 <Nixie_Loop+0x468>
    224e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <Debounce+0x1>
    2252:	81 11       	cpse	r24, r1
    2254:	12 c3       	rjmp	.+1572   	; 0x287a <Nixie_Loop+0x9ec>
						if(N_Clock.Setting.Nixie_Amount<6){
    2256:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <N_Clock+0x61>
    225a:	86 30       	cpi	r24, 0x06	; 6
    225c:	50 f4       	brcc	.+20     	; 0x2272 <Nixie_Loop+0x3e4>
							N_Clock.Menu_Enter=2;
    225e:	e0 e8       	ldi	r30, 0x80	; 128
    2260:	f1 e0       	ldi	r31, 0x01	; 1
    2262:	82 e0       	ldi	r24, 0x02	; 2
    2264:	85 a3       	std	Z+37, r24	; 0x25
						}
						//Walk through the menu.
						N_Clock.Menu++;
    2266:	83 a1       	ldd	r24, Z+35	; 0x23
    2268:	8f 5f       	subi	r24, 0xFF	; 255
    226a:	83 a3       	std	Z+35, r24	; 0x23
						if (N_Clock.Menu==1 && N_Clock.Setting.Nixie_Amount<6){
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	69 f4       	brne	.+26     	; 0x228a <Nixie_Loop+0x3fc>
    2270:	08 c0       	rjmp	.+16     	; 0x2282 <Nixie_Loop+0x3f4>
					else if(~(PINC & (1<<Button1)) && (PINC & (1<<Button2)) && Debounce.Sub_Menu==0){
						if(N_Clock.Setting.Nixie_Amount<6){
							N_Clock.Menu_Enter=2;
						}
						//Walk through the menu.
						N_Clock.Menu++;
    2272:	e0 e8       	ldi	r30, 0x80	; 128
    2274:	f1 e0       	ldi	r31, 0x01	; 1
    2276:	83 a1       	ldd	r24, Z+35	; 0x23
    2278:	8f 5f       	subi	r24, 0xFF	; 255
    227a:	83 a3       	std	Z+35, r24	; 0x23
						if (N_Clock.Menu==1 && N_Clock.Setting.Nixie_Amount<6){
    227c:	81 30       	cpi	r24, 0x01	; 1
    227e:	29 f4       	brne	.+10     	; 0x228a <Nixie_Loop+0x3fc>
    2280:	36 c0       	rjmp	.+108    	; 0x22ee <Nixie_Loop+0x460>
							N_Clock.Menu=2;
    2282:	82 e0       	ldi	r24, 0x02	; 2
    2284:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <N_Clock+0x23>
    2288:	32 c0       	rjmp	.+100    	; 0x22ee <Nixie_Loop+0x460>
						}
						else if (N_Clock.Menu==4){
    228a:	84 30       	cpi	r24, 0x04	; 4
    228c:	21 f4       	brne	.+8      	; 0x2296 <Nixie_Loop+0x408>
							N_Clock.Menu=11;
    228e:	8b e0       	ldi	r24, 0x0B	; 11
    2290:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <N_Clock+0x23>
    2294:	2c c0       	rjmp	.+88     	; 0x22ee <Nixie_Loop+0x460>
						}
						else if (N_Clock.Menu==14){
    2296:	8e 30       	cpi	r24, 0x0E	; 14
    2298:	21 f4       	brne	.+8      	; 0x22a2 <Nixie_Loop+0x414>
							N_Clock.Menu=20;
    229a:	84 e1       	ldi	r24, 0x14	; 20
    229c:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <N_Clock+0x23>
    22a0:	26 c0       	rjmp	.+76     	; 0x22ee <Nixie_Loop+0x460>
						}
						else if (N_Clock.Menu==23){
    22a2:	87 31       	cpi	r24, 0x17	; 23
    22a4:	21 f4       	brne	.+8      	; 0x22ae <Nixie_Loop+0x420>
							N_Clock.Menu=30;
    22a6:	8e e1       	ldi	r24, 0x1E	; 30
    22a8:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <N_Clock+0x23>
    22ac:	20 c0       	rjmp	.+64     	; 0x22ee <Nixie_Loop+0x460>
						}
						else if (N_Clock.Menu==31){
    22ae:	8f 31       	cpi	r24, 0x1F	; 31
    22b0:	71 f4       	brne	.+28     	; 0x22ce <Nixie_Loop+0x440>
							if(N_Clock.Setting.Save_Active==2){
    22b2:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <N_Clock+0x2f>
    22b6:	82 30       	cpi	r24, 0x02	; 2
    22b8:	21 f4       	brne	.+8      	; 0x22c2 <Nixie_Loop+0x434>
								N_Clock.Menu=33;
    22ba:	81 e2       	ldi	r24, 0x21	; 33
    22bc:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <N_Clock+0x23>
    22c0:	16 c0       	rjmp	.+44     	; 0x22ee <Nixie_Loop+0x460>
							}
							else if(N_Clock.Setting.Save_Active==0){
    22c2:	81 11       	cpse	r24, r1
    22c4:	14 c0       	rjmp	.+40     	; 0x22ee <Nixie_Loop+0x460>
								N_Clock.Menu=40;
    22c6:	88 e2       	ldi	r24, 0x28	; 40
    22c8:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <N_Clock+0x23>
    22cc:	10 c0       	rjmp	.+32     	; 0x22ee <Nixie_Loop+0x460>
							}
						}
						else if (N_Clock.Menu==38){
    22ce:	86 32       	cpi	r24, 0x26	; 38
    22d0:	21 f4       	brne	.+8      	; 0x22da <Nixie_Loop+0x44c>
							N_Clock.Menu=40;
    22d2:	88 e2       	ldi	r24, 0x28	; 40
    22d4:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <N_Clock+0x23>
    22d8:	0a c0       	rjmp	.+20     	; 0x22ee <Nixie_Loop+0x460>
						}
						else if (N_Clock.Menu==43){
    22da:	8b 32       	cpi	r24, 0x2B	; 43
    22dc:	21 f4       	brne	.+8      	; 0x22e6 <Nixie_Loop+0x458>
							N_Clock.Menu=50;
    22de:	82 e3       	ldi	r24, 0x32	; 50
    22e0:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <N_Clock+0x23>
    22e4:	04 c0       	rjmp	.+8      	; 0x22ee <Nixie_Loop+0x460>
						}
						else if (N_Clock.Menu==52){
    22e6:	84 33       	cpi	r24, 0x34	; 52
    22e8:	11 f4       	brne	.+4      	; 0x22ee <Nixie_Loop+0x460>
							N_Clock.Menu=0;
    22ea:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <N_Clock+0x23>
						}
						Debounce.Sub_Menu=Debounce_Overshoot;//set debounce to 300ms to prevent overshoot
    22ee:	8e e1       	ldi	r24, 0x1E	; 30
    22f0:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <Debounce+0x1>
    22f4:	5a c1       	rjmp	.+692    	; 0x25aa <Nixie_Loop+0x71c>
					}
					else if ((PINC & (1<<Button1)) && ~(PINC & (1<<Button2)) && Debounce.Sub_Menu==0){
    22f6:	31 9b       	sbis	0x06, 1	; 6
    22f8:	58 c1       	rjmp	.+688    	; 0x25aa <Nixie_Loop+0x71c>
    22fa:	86 b1       	in	r24, 0x06	; 6
    22fc:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <Debounce+0x1>
    2300:	81 11       	cpse	r24, r1
    2302:	53 c1       	rjmp	.+678    	; 0x25aa <Nixie_Loop+0x71c>
						RTC_time_struct _Time = RTC.Time;
    2304:	e2 ee       	ldi	r30, 0xE2	; 226
    2306:	f1 e0       	ldi	r31, 0x01	; 1
    2308:	f0 80       	ld	r15, Z
    230a:	11 81       	ldd	r17, Z+1	; 0x01
    230c:	d2 81       	ldd	r29, Z+2	; 0x02
						RTC_date_struct _Date = RTC.Date;
    230e:	c3 81       	ldd	r28, Z+3	; 0x03
    2310:	04 81       	ldd	r16, Z+4	; 0x04
    2312:	e5 80       	ldd	r14, Z+5	; 0x05

						switch(N_Clock.Menu){
    2314:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <N_Clock+0x23>
    2318:	8e 2f       	mov	r24, r30
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	fc 01       	movw	r30, r24
    231e:	31 97       	sbiw	r30, 0x01	; 1
    2320:	e3 33       	cpi	r30, 0x33	; 51
    2322:	f1 05       	cpc	r31, r1
    2324:	08 f0       	brcs	.+2      	; 0x2328 <Nixie_Loop+0x49a>
    2326:	38 c1       	rjmp	.+624    	; 0x2598 <Nixie_Loop+0x70a>
    2328:	e3 50       	subi	r30, 0x03	; 3
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__tablejump2__>
							case 1:{
								if (++_Time.Second>=60){//protect the seconds from beeing wrong
    2330:	f3 94       	inc	r15
    2332:	5b e3       	ldi	r21, 0x3B	; 59
    2334:	5f 15       	cp	r21, r15
    2336:	08 f0       	brcs	.+2      	; 0x233a <Nixie_Loop+0x4ac>
    2338:	2f c1       	rjmp	.+606    	; 0x2598 <Nixie_Loop+0x70a>
									_Time.Second=0;
    233a:	f1 2c       	mov	r15, r1
    233c:	2d c1       	rjmp	.+602    	; 0x2598 <Nixie_Loop+0x70a>
								}
							}//1
							break;
							case 2:{
								if (++_Time.Minute>=60){//protect the minutes from beeing wrong
    233e:	1f 5f       	subi	r17, 0xFF	; 255
    2340:	1c 33       	cpi	r17, 0x3C	; 60
    2342:	08 f4       	brcc	.+2      	; 0x2346 <Nixie_Loop+0x4b8>
    2344:	29 c1       	rjmp	.+594    	; 0x2598 <Nixie_Loop+0x70a>
									_Time.Minute=0;
    2346:	10 e0       	ldi	r17, 0x00	; 0
    2348:	27 c1       	rjmp	.+590    	; 0x2598 <Nixie_Loop+0x70a>
								}
							}//2
							break;
							case 3:{
								_Time.Hour++;//update the hours
    234a:	df 5f       	subi	r29, 0xFF	; 255
									if(RTC_Get_TWLF()){
    234c:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <RTC_Get_TWLF>
    2350:	88 23       	and	r24, r24
    2352:	b1 f0       	breq	.+44     	; 0x2380 <Nixie_Loop+0x4f2>
										if (RTC_Get_PM() && _Time.Hour>11){
    2354:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <RTC_Get_PM>
    2358:	88 23       	and	r24, r24
    235a:	51 f0       	breq	.+20     	; 0x2370 <Nixie_Loop+0x4e2>
    235c:	dc 30       	cpi	r29, 0x0C	; 12
    235e:	40 f0       	brcs	.+16     	; 0x2370 <Nixie_Loop+0x4e2>
											RTC_Set_TWLF(0);
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	0e 94 19 15 	call	0x2a32	; 0x2a32 <RTC_Set_TWLF>
											RTC_Set_PM(0);
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	0e 94 31 15 	call	0x2a62	; 0x2a62 <RTC_Set_PM>
											_Time.Hour=0;
    236c:	d0 e0       	ldi	r29, 0x00	; 0
    236e:	14 c1       	rjmp	.+552    	; 0x2598 <Nixie_Loop+0x70a>
										}
										else if (_Time.Hour>12){
    2370:	dd 30       	cpi	r29, 0x0D	; 13
    2372:	08 f4       	brcc	.+2      	; 0x2376 <Nixie_Loop+0x4e8>
    2374:	11 c1       	rjmp	.+546    	; 0x2598 <Nixie_Loop+0x70a>
											RTC_Set_PM(1);
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	0e 94 31 15 	call	0x2a62	; 0x2a62 <RTC_Set_PM>
											_Time.Hour=1;
    237c:	d1 e0       	ldi	r29, 0x01	; 1
    237e:	0c c1       	rjmp	.+536    	; 0x2598 <Nixie_Loop+0x70a>
										}
									}
									else{
										if (_Time.Hour>=24){//protect the hours from beeing wrong
    2380:	d8 31       	cpi	r29, 0x18	; 24
    2382:	08 f4       	brcc	.+2      	; 0x2386 <Nixie_Loop+0x4f8>
    2384:	09 c1       	rjmp	.+530    	; 0x2598 <Nixie_Loop+0x70a>
											RTC_Set_TWLF(1);
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	0e 94 19 15 	call	0x2a32	; 0x2a32 <RTC_Set_TWLF>
											RTC_Set_PM(0);
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	0e 94 31 15 	call	0x2a62	; 0x2a62 <RTC_Set_PM>
											_Time.Hour=0;
    2392:	d0 e0       	ldi	r29, 0x00	; 0
    2394:	01 c1       	rjmp	.+514    	; 0x2598 <Nixie_Loop+0x70a>
										}
									}
							}//3
							break;
							case 11:{
								_Date.Year++;//update the years
    2396:	e3 94       	inc	r14
								if (_Date.Year>99){//protect the year from beeing wrong
    2398:	83 e6       	ldi	r24, 0x63	; 99
    239a:	8e 15       	cp	r24, r14
    239c:	08 f0       	brcs	.+2      	; 0x23a0 <Nixie_Loop+0x512>
    239e:	fc c0       	rjmp	.+504    	; 0x2598 <Nixie_Loop+0x70a>
									_Date.Year=0;
    23a0:	e1 2c       	mov	r14, r1
    23a2:	fa c0       	rjmp	.+500    	; 0x2598 <Nixie_Loop+0x70a>
								}
							}//4
							break;
							case 12:{
								_Date.Month++;//update the month
    23a4:	0f 5f       	subi	r16, 0xFF	; 255
								if (_Date.Month>12){//protect the month from beeing wrong
    23a6:	0d 30       	cpi	r16, 0x0D	; 13
    23a8:	08 f4       	brcc	.+2      	; 0x23ac <Nixie_Loop+0x51e>
    23aa:	f6 c0       	rjmp	.+492    	; 0x2598 <Nixie_Loop+0x70a>
									_Date.Month=1;
    23ac:	01 e0       	ldi	r16, 0x01	; 1
    23ae:	f4 c0       	rjmp	.+488    	; 0x2598 <Nixie_Loop+0x70a>
								}
							}//5
							break;
							case 13:{
								_Date.Day++;//update the day
    23b0:	cf 5f       	subi	r28, 0xFF	; 255
								//protect the day from beeing wrong.
								if ((_Date.Month==2) && (_Date.Day>28) && (RTC_not_leap())){//February and not a leap year
    23b2:	02 30       	cpi	r16, 0x02	; 2
    23b4:	09 f0       	breq	.+2      	; 0x23b8 <Nixie_Loop+0x52a>
    23b6:	68 c2       	rjmp	.+1232   	; 0x2888 <Nixie_Loop+0x9fa>
    23b8:	cd 31       	cpi	r28, 0x1D	; 29
    23ba:	08 f4       	brcc	.+2      	; 0x23be <Nixie_Loop+0x530>
    23bc:	61 c2       	rjmp	.+1218   	; 0x2880 <Nixie_Loop+0x9f2>
    23be:	0e 94 56 15 	call	0x2aac	; 0x2aac <RTC_not_leap>
    23c2:	81 11       	cpse	r24, r1
    23c4:	de c0       	rjmp	.+444    	; 0x2582 <Nixie_Loop+0x6f4>
    23c6:	5c c2       	rjmp	.+1208   	; 0x2880 <Nixie_Loop+0x9f2>
									_Date.Day=1;
								}
								else if ((_Date.Month==2) && (_Date.Day>29)){//February in a leap year
									_Date.Day=1;
								}
								else if ((_Date.Day>30) && ((_Date.Month==4)||(_Date.Month==6)||(_Date.Month==9)||(_Date.Month==11))){//30 day months
    23c8:	04 30       	cpi	r16, 0x04	; 4
    23ca:	09 f4       	brne	.+2      	; 0x23ce <Nixie_Loop+0x540>
    23cc:	dc c0       	rjmp	.+440    	; 0x2586 <Nixie_Loop+0x6f8>
    23ce:	06 30       	cpi	r16, 0x06	; 6
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <Nixie_Loop+0x546>
    23d2:	db c0       	rjmp	.+438    	; 0x258a <Nixie_Loop+0x6fc>
    23d4:	09 30       	cpi	r16, 0x09	; 9
    23d6:	09 f4       	brne	.+2      	; 0x23da <Nixie_Loop+0x54c>
    23d8:	da c0       	rjmp	.+436    	; 0x258e <Nixie_Loop+0x700>
    23da:	0b 30       	cpi	r16, 0x0B	; 11
    23dc:	09 f4       	brne	.+2      	; 0x23e0 <Nixie_Loop+0x552>
    23de:	d9 c0       	rjmp	.+434    	; 0x2592 <Nixie_Loop+0x704>
									_Date.Day=1;
								}
								else if (_Date.Day>31){//31 day months
    23e0:	c0 32       	cpi	r28, 0x20	; 32
    23e2:	08 f4       	brcc	.+2      	; 0x23e6 <Nixie_Loop+0x558>
    23e4:	d9 c0       	rjmp	.+434    	; 0x2598 <Nixie_Loop+0x70a>
									_Date.Day=1;
    23e6:	c1 e0       	ldi	r28, 0x01	; 1
    23e8:	d7 c0       	rjmp	.+430    	; 0x2598 <Nixie_Loop+0x70a>
								}
							}//13
							break;
							
							case 20:{
								if (N_Clock.Setting.Date_Show){
    23ea:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <N_Clock+0x2a>
    23ee:	88 23       	and	r24, r24
    23f0:	19 f0       	breq	.+6      	; 0x23f8 <Nixie_Loop+0x56a>
									N_Clock.Setting.Date_Show=0;
    23f2:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <N_Clock+0x2a>
    23f6:	d0 c0       	rjmp	.+416    	; 0x2598 <Nixie_Loop+0x70a>
								}
								else {
									N_Clock.Setting.Date_Show++;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <N_Clock+0x2a>
    23fe:	cc c0       	rjmp	.+408    	; 0x2598 <Nixie_Loop+0x70a>
								}
							}//20
							break;
														
							case 21:{
								N_Clock.Setting.Date_Show_SV++;
    2400:	e0 e8       	ldi	r30, 0x80	; 128
    2402:	f1 e0       	ldi	r31, 0x01	; 1
    2404:	85 a5       	ldd	r24, Z+45	; 0x2d
    2406:	8f 5f       	subi	r24, 0xFF	; 255
    2408:	85 a7       	std	Z+45, r24	; 0x2d
							}//21
							break;
    240a:	c6 c0       	rjmp	.+396    	; 0x2598 <Nixie_Loop+0x70a>
							case 22:{
								N_Clock.Setting.Date_Timeout_SV++;
    240c:	e0 e8       	ldi	r30, 0x80	; 128
    240e:	f1 e0       	ldi	r31, 0x01	; 1
    2410:	83 a5       	ldd	r24, Z+43	; 0x2b
    2412:	8f 5f       	subi	r24, 0xFF	; 255
    2414:	83 a7       	std	Z+43, r24	; 0x2b
							}//22
							break;
    2416:	c0 c0       	rjmp	.+384    	; 0x2598 <Nixie_Loop+0x70a>
							
							//Save active setting: 0=off, 1=light only, 2=time only, 3=time & light
							case 30:{
								N_Clock.Setting.Save_Active++;
    2418:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <N_Clock+0x2f>
    241c:	8f 5f       	subi	r24, 0xFF	; 255
								if (N_Clock.Setting.Save_Active>3){
    241e:	84 30       	cpi	r24, 0x04	; 4
    2420:	18 f4       	brcc	.+6      	; 0x2428 <Nixie_Loop+0x59a>
							}//22
							break;
							
							//Save active setting: 0=off, 1=light only, 2=time only, 3=time & light
							case 30:{
								N_Clock.Setting.Save_Active++;
    2422:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <N_Clock+0x2f>
    2426:	b8 c0       	rjmp	.+368    	; 0x2598 <Nixie_Loop+0x70a>
								if (N_Clock.Setting.Save_Active>3){
									N_Clock.Setting.Save_Active=0;
    2428:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <N_Clock+0x2f>
    242c:	b5 c0       	rjmp	.+362    	; 0x2598 <Nixie_Loop+0x70a>
							}//30
							break;
							
							//Value from the LDR to go activate the Nixie's
							case 31:{
								N_Clock.Setting.Save_On_Threshold=N_Clock.Setting.Save_AI;
    242e:	e0 e8       	ldi	r30, 0x80	; 128
    2430:	f1 e0       	ldi	r31, 0x01	; 1
    2432:	84 a9       	ldd	r24, Z+52	; 0x34
    2434:	95 a9       	ldd	r25, Z+53	; 0x35
    2436:	93 ab       	std	Z+51, r25	; 0x33
    2438:	82 ab       	std	Z+50, r24	; 0x32
							}//31
							break;
    243a:	ae c0       	rjmp	.+348    	; 0x2598 <Nixie_Loop+0x70a>
							
							//Value from the LDR to go to sleep
							case 32:{
								N_Clock.Setting.Save_Off_Threshold=N_Clock.Setting.Save_AI;
    243c:	e0 e8       	ldi	r30, 0x80	; 128
    243e:	f1 e0       	ldi	r31, 0x01	; 1
    2440:	84 a9       	ldd	r24, Z+52	; 0x34
    2442:	95 a9       	ldd	r25, Z+53	; 0x35
    2444:	91 ab       	std	Z+49, r25	; 0x31
    2446:	80 ab       	std	Z+48, r24	; 0x30
							}//32
							break;
    2448:	a7 c0       	rjmp	.+334    	; 0x2598 <Nixie_Loop+0x70a>
							
							//Time at which the Nixie's should be active again
							case 33:{
								N_Clock.Setting.Save_Time_ON.Minute++;
    244a:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <N_Clock+0x3b>
    244e:	8f 5f       	subi	r24, 0xFF	; 255
								if(N_Clock.Setting.Save_Time_ON.Minute>59){
    2450:	8c 33       	cpi	r24, 0x3C	; 60
    2452:	18 f4       	brcc	.+6      	; 0x245a <Nixie_Loop+0x5cc>
							}//32
							break;
							
							//Time at which the Nixie's should be active again
							case 33:{
								N_Clock.Setting.Save_Time_ON.Minute++;
    2454:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <N_Clock+0x3b>
    2458:	9f c0       	rjmp	.+318    	; 0x2598 <Nixie_Loop+0x70a>
								if(N_Clock.Setting.Save_Time_ON.Minute>59){
									N_Clock.Setting.Save_Time_ON.Minute=0;
    245a:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <N_Clock+0x3b>
    245e:	9c c0       	rjmp	.+312    	; 0x2598 <Nixie_Loop+0x70a>
								}
							}//33
							break;
							case 34:{
								N_Clock.Setting.Save_Time_ON.Hour++;
    2460:	e0 e8       	ldi	r30, 0x80	; 128
    2462:	f1 e0       	ldi	r31, 0x01	; 1
    2464:	84 ad       	ldd	r24, Z+60	; 0x3c
    2466:	8f 5f       	subi	r24, 0xFF	; 255
    2468:	84 af       	std	Z+60, r24	; 0x3c
								if (RTC.IS_TWLF){
    246a:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <RTC+0x8>
    246e:	99 23       	and	r25, r25
    2470:	79 f0       	breq	.+30     	; 0x2490 <Nixie_Loop+0x602>
									if (RTC.IS_PM && N_Clock.Setting.Save_Time_ON.Hour>11){
    2472:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <RTC+0x9>
    2476:	99 23       	and	r25, r25
    2478:	29 f0       	breq	.+10     	; 0x2484 <Nixie_Loop+0x5f6>
    247a:	8c 30       	cpi	r24, 0x0C	; 12
    247c:	18 f0       	brcs	.+6      	; 0x2484 <Nixie_Loop+0x5f6>
										N_Clock.Setting.Save_Time_ON.Hour=0;
    247e:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <N_Clock+0x3c>
    2482:	8a c0       	rjmp	.+276    	; 0x2598 <Nixie_Loop+0x70a>
									}
									else if (N_Clock.Setting.Save_Time_ON.Hour>12){
    2484:	8d 30       	cpi	r24, 0x0D	; 13
    2486:	08 f4       	brcc	.+2      	; 0x248a <Nixie_Loop+0x5fc>
    2488:	87 c0       	rjmp	.+270    	; 0x2598 <Nixie_Loop+0x70a>
										N_Clock.Setting.Save_Time_ON.Hour=0;
    248a:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <N_Clock+0x3c>
    248e:	84 c0       	rjmp	.+264    	; 0x2598 <Nixie_Loop+0x70a>
									}
								}
								else if(N_Clock.Setting.Save_Time_ON.Hour>23){
    2490:	88 31       	cpi	r24, 0x18	; 24
    2492:	08 f4       	brcc	.+2      	; 0x2496 <Nixie_Loop+0x608>
    2494:	81 c0       	rjmp	.+258    	; 0x2598 <Nixie_Loop+0x70a>
									N_Clock.Setting.Save_Time_ON.Hour=0;
    2496:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <N_Clock+0x3c>
    249a:	7e c0       	rjmp	.+252    	; 0x2598 <Nixie_Loop+0x70a>
							}//34
							break;
							
							//Time at which we go to sleep
							case 35:{
								N_Clock.Setting.Save_Time_OFF.Minute++;
    249c:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <N_Clock+0x37>
    24a0:	8f 5f       	subi	r24, 0xFF	; 255
								if (N_Clock.Setting.Save_Time_OFF.Minute>59){
    24a2:	8c 33       	cpi	r24, 0x3C	; 60
    24a4:	18 f4       	brcc	.+6      	; 0x24ac <Nixie_Loop+0x61e>
							}//34
							break;
							
							//Time at which we go to sleep
							case 35:{
								N_Clock.Setting.Save_Time_OFF.Minute++;
    24a6:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <N_Clock+0x37>
    24aa:	76 c0       	rjmp	.+236    	; 0x2598 <Nixie_Loop+0x70a>
								if (N_Clock.Setting.Save_Time_OFF.Minute>59){
									N_Clock.Setting.Save_Time_OFF.Minute=0;
    24ac:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <N_Clock+0x37>
    24b0:	73 c0       	rjmp	.+230    	; 0x2598 <Nixie_Loop+0x70a>
								}
							}//35
							break;
							case 36:{
								N_Clock.Setting.Save_Time_OFF.Hour++;
    24b2:	e0 e8       	ldi	r30, 0x80	; 128
    24b4:	f1 e0       	ldi	r31, 0x01	; 1
    24b6:	80 ad       	ldd	r24, Z+56	; 0x38
    24b8:	8f 5f       	subi	r24, 0xFF	; 255
    24ba:	80 af       	std	Z+56, r24	; 0x38
								if (RTC.IS_TWLF){
    24bc:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <RTC+0x8>
    24c0:	99 23       	and	r25, r25
    24c2:	79 f0       	breq	.+30     	; 0x24e2 <Nixie_Loop+0x654>
									if (RTC.IS_PM && N_Clock.Setting.Save_Time_OFF.Hour>11){
    24c4:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <RTC+0x9>
    24c8:	99 23       	and	r25, r25
    24ca:	29 f0       	breq	.+10     	; 0x24d6 <Nixie_Loop+0x648>
    24cc:	8c 30       	cpi	r24, 0x0C	; 12
    24ce:	18 f0       	brcs	.+6      	; 0x24d6 <Nixie_Loop+0x648>
										N_Clock.Setting.Save_Time_OFF.Hour=0;
    24d0:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <N_Clock+0x38>
    24d4:	61 c0       	rjmp	.+194    	; 0x2598 <Nixie_Loop+0x70a>
									}
									else if (N_Clock.Setting.Save_Time_OFF.Hour>12){
    24d6:	8d 30       	cpi	r24, 0x0D	; 13
    24d8:	08 f4       	brcc	.+2      	; 0x24dc <Nixie_Loop+0x64e>
    24da:	5e c0       	rjmp	.+188    	; 0x2598 <Nixie_Loop+0x70a>
										N_Clock.Setting.Save_Time_OFF.Hour=0;
    24dc:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <N_Clock+0x38>
    24e0:	5b c0       	rjmp	.+182    	; 0x2598 <Nixie_Loop+0x70a>
									}
								}
								else if(N_Clock.Setting.Save_Time_OFF.Hour>23){
    24e2:	88 31       	cpi	r24, 0x18	; 24
    24e4:	08 f4       	brcc	.+2      	; 0x24e8 <Nixie_Loop+0x65a>
    24e6:	58 c0       	rjmp	.+176    	; 0x2598 <Nixie_Loop+0x70a>
									N_Clock.Setting.Save_Time_OFF.Hour=0;
    24e8:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <N_Clock+0x38>
    24ec:	55 c0       	rjmp	.+170    	; 0x2598 <Nixie_Loop+0x70a>
							}//36
							break;

							//Timeout before we go into or out of save mode. To prevent the clock to go on and off during thressholds
							case 37:{
								N_Clock.Setting.Save_Timeout_SV++;
    24ee:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <N_Clock+0x3e>
    24f2:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <N_Clock+0x3f>
    24f6:	01 96       	adiw	r24, 0x01	; 1
								if (N_Clock.Setting.Save_Timeout_SV>100){
    24f8:	85 36       	cpi	r24, 0x65	; 101
    24fa:	91 05       	cpc	r25, r1
    24fc:	28 f4       	brcc	.+10     	; 0x2508 <Nixie_Loop+0x67a>
							}//36
							break;

							//Timeout before we go into or out of save mode. To prevent the clock to go on and off during thressholds
							case 37:{
								N_Clock.Setting.Save_Timeout_SV++;
    24fe:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <N_Clock+0x3f>
    2502:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <N_Clock+0x3e>
    2506:	48 c0       	rjmp	.+144    	; 0x2598 <Nixie_Loop+0x70a>
								if (N_Clock.Setting.Save_Timeout_SV>100){
									N_Clock.Setting.Save_Timeout_SV=0;
    2508:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <N_Clock+0x3f>
    250c:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <N_Clock+0x3e>
    2510:	43 c0       	rjmp	.+134    	; 0x2598 <Nixie_Loop+0x70a>
								}
							}//37
							break;
							
							case 40:{
								N_Clock.Setting.Roll_Active++;
    2512:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <N_Clock+0x5d>
    2516:	8f 5f       	subi	r24, 0xFF	; 255
								if (N_Clock.Setting.Roll_Active>1){
    2518:	82 30       	cpi	r24, 0x02	; 2
    251a:	18 f4       	brcc	.+6      	; 0x2522 <Nixie_Loop+0x694>
								}
							}//37
							break;
							
							case 40:{
								N_Clock.Setting.Roll_Active++;
    251c:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <N_Clock+0x5d>
    2520:	3b c0       	rjmp	.+118    	; 0x2598 <Nixie_Loop+0x70a>
								if (N_Clock.Setting.Roll_Active>1){
									N_Clock.Setting.Roll_Active=0;
    2522:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <N_Clock+0x5d>
    2526:	38 c0       	rjmp	.+112    	; 0x2598 <Nixie_Loop+0x70a>
								}
							}//40
							break;
							case 41:{
								N_Clock.Setting.Fade++;
    2528:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <N_Clock+0x5e>
    252c:	8f 5f       	subi	r24, 0xFF	; 255
								if (N_Clock.Setting.Fade>2){
    252e:	83 30       	cpi	r24, 0x03	; 3
    2530:	18 f4       	brcc	.+6      	; 0x2538 <Nixie_Loop+0x6aa>
									N_Clock.Setting.Roll_Active=0;
								}
							}//40
							break;
							case 41:{
								N_Clock.Setting.Fade++;
    2532:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <N_Clock+0x5e>
    2536:	30 c0       	rjmp	.+96     	; 0x2598 <Nixie_Loop+0x70a>
								if (N_Clock.Setting.Fade>2){
									N_Clock.Setting.Fade=0;
    2538:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <N_Clock+0x5e>
    253c:	2d c0       	rjmp	.+90     	; 0x2598 <Nixie_Loop+0x70a>
								}
							}//41
							break;
							case 42:{
								N_Clock.Setting.Fade_Time++;
    253e:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <N_Clock+0x5f>
    2542:	8f 5f       	subi	r24, 0xFF	; 255
								if (N_Clock.Setting.Fade_Time>200){
    2544:	89 3c       	cpi	r24, 0xC9	; 201
    2546:	18 f4       	brcc	.+6      	; 0x254e <Nixie_Loop+0x6c0>
									N_Clock.Setting.Fade=0;
								}
							}//41
							break;
							case 42:{
								N_Clock.Setting.Fade_Time++;
    2548:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <N_Clock+0x5f>
    254c:	25 c0       	rjmp	.+74     	; 0x2598 <Nixie_Loop+0x70a>
								if (N_Clock.Setting.Fade_Time>200){
									N_Clock.Setting.Fade_Time=0;
    254e:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <N_Clock+0x5f>
    2552:	22 c0       	rjmp	.+68     	; 0x2598 <Nixie_Loop+0x70a>
								}
							}//42
							break;
							
							case 50:{
								N_Clock.Setting.Colon_Active++;
    2554:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <N_Clock+0x60>
    2558:	8f 5f       	subi	r24, 0xFF	; 255
								if (N_Clock.Setting.Colon_Active>1){
    255a:	82 30       	cpi	r24, 0x02	; 2
    255c:	18 f4       	brcc	.+6      	; 0x2564 <Nixie_Loop+0x6d6>
								}
							}//42
							break;
							
							case 50:{
								N_Clock.Setting.Colon_Active++;
    255e:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <N_Clock+0x60>
    2562:	1a c0       	rjmp	.+52     	; 0x2598 <Nixie_Loop+0x70a>
								if (N_Clock.Setting.Colon_Active>1){
									N_Clock.Setting.Colon_Active=0;
    2564:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <N_Clock+0x60>
    2568:	17 c0       	rjmp	.+46     	; 0x2598 <Nixie_Loop+0x70a>
								}
							}//50
							break;
							case 51:{
								if(N_Clock.Setting.Nixie_Amount>4){
    256a:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <N_Clock+0x61>
    256e:	85 30       	cpi	r24, 0x05	; 5
    2570:	20 f0       	brcs	.+8      	; 0x257a <Nixie_Loop+0x6ec>
									N_Clock.Setting.Nixie_Amount=4;
    2572:	84 e0       	ldi	r24, 0x04	; 4
    2574:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <N_Clock+0x61>
    2578:	0f c0       	rjmp	.+30     	; 0x2598 <Nixie_Loop+0x70a>
								}
								else{
									N_Clock.Setting.Nixie_Amount=6;
    257a:	86 e0       	ldi	r24, 0x06	; 6
    257c:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <N_Clock+0x61>
    2580:	0b c0       	rjmp	.+22     	; 0x2598 <Nixie_Loop+0x70a>
							break;
							case 13:{
								_Date.Day++;//update the day
								//protect the day from beeing wrong.
								if ((_Date.Month==2) && (_Date.Day>28) && (RTC_not_leap())){//February and not a leap year
									_Date.Day=1;
    2582:	c1 e0       	ldi	r28, 0x01	; 1
    2584:	09 c0       	rjmp	.+18     	; 0x2598 <Nixie_Loop+0x70a>
								}
								else if ((_Date.Month==2) && (_Date.Day>29)){//February in a leap year
									_Date.Day=1;
								}
								else if ((_Date.Day>30) && ((_Date.Month==4)||(_Date.Month==6)||(_Date.Month==9)||(_Date.Month==11))){//30 day months
									_Date.Day=1;
    2586:	c1 e0       	ldi	r28, 0x01	; 1
    2588:	07 c0       	rjmp	.+14     	; 0x2598 <Nixie_Loop+0x70a>
    258a:	c1 e0       	ldi	r28, 0x01	; 1
    258c:	05 c0       	rjmp	.+10     	; 0x2598 <Nixie_Loop+0x70a>
    258e:	c1 e0       	ldi	r28, 0x01	; 1
    2590:	03 c0       	rjmp	.+6      	; 0x2598 <Nixie_Loop+0x70a>
    2592:	c1 e0       	ldi	r28, 0x01	; 1
    2594:	01 c0       	rjmp	.+2      	; 0x2598 <Nixie_Loop+0x70a>
								//protect the day from beeing wrong.
								if ((_Date.Month==2) && (_Date.Day>28) && (RTC_not_leap())){//February and not a leap year
									_Date.Day=1;
								}
								else if ((_Date.Month==2) && (_Date.Day>29)){//February in a leap year
									_Date.Day=1;
    2596:	c1 e0       	ldi	r28, 0x01	; 1
								}
							}//51
							break;
						}//N_Clock.Menu
						
						Debounce.Sub_Menu=Debounce_Overshoot;
    2598:	8e e1       	ldi	r24, 0x1E	; 30
    259a:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <Debounce+0x1>
						//Save the time and date
						RTC_Set_DateTime(_Time.Second, _Time.Minute, _Time.Hour, _Date.Day, _Date.Month, _Date.Year);
    259e:	2c 2f       	mov	r18, r28
    25a0:	4d 2f       	mov	r20, r29
    25a2:	61 2f       	mov	r22, r17
    25a4:	8f 2d       	mov	r24, r15
    25a6:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <RTC_Set_DateTime>
					}
					
					//What do we need to show on the Nixies?
					switch(N_Clock.Menu){
    25aa:	40 91 a3 01 	lds	r20, 0x01A3	; 0x8001a3 <N_Clock+0x23>
    25ae:	84 2f       	mov	r24, r20
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	84 33       	cpi	r24, 0x34	; 52
    25b4:	91 05       	cpc	r25, r1
    25b6:	08 f0       	brcs	.+2      	; 0x25ba <Nixie_Loop+0x72c>
    25b8:	d2 c0       	rjmp	.+420    	; 0x275e <Nixie_Loop+0x8d0>
    25ba:	fc 01       	movw	r30, r24
    25bc:	e0 5d       	subi	r30, 0xD0	; 208
    25be:	fe 4f       	sbci	r31, 0xFE	; 254
    25c0:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__tablejump2__>
						case 0:{
							N_Clock.Menu_Nixie3_4=N_Clock.Version/100;
    25c4:	e0 e8       	ldi	r30, 0x80	; 128
    25c6:	f1 e0       	ldi	r31, 0x01	; 1
    25c8:	90 81       	ld	r25, Z
    25ca:	89 e2       	ldi	r24, 0x29	; 41
    25cc:	98 9f       	mul	r25, r24
    25ce:	81 2d       	mov	r24, r1
    25d0:	11 24       	eor	r1, r1
    25d2:	82 95       	swap	r24
    25d4:	8f 70       	andi	r24, 0x0F	; 15
    25d6:	87 8f       	std	Z+31, r24	; 0x1f
							N_Clock.Menu_Nixie5_6=N_Clock.Version%100;
    25d8:	24 e6       	ldi	r18, 0x64	; 100
    25da:	82 9f       	mul	r24, r18
    25dc:	90 19       	sub	r25, r0
    25de:	11 24       	eor	r1, r1
    25e0:	90 a3       	std	Z+32, r25	; 0x20
    25e2:	bf c0       	rjmp	.+382    	; 0x2762 <Nixie_Loop+0x8d4>
						}
						break;
						case 20:{
							N_Clock.Menu_Nixie3_4=0;
    25e4:	e0 e8       	ldi	r30, 0x80	; 128
    25e6:	f1 e0       	ldi	r31, 0x01	; 1
    25e8:	17 8e       	std	Z+31, r1	; 0x1f
							N_Clock.Menu_Nixie5_6=N_Clock.Setting.Date_Show;
    25ea:	82 a5       	ldd	r24, Z+42	; 0x2a
    25ec:	80 a3       	std	Z+32, r24	; 0x20
						}//20
						break;
    25ee:	c4 c0       	rjmp	.+392    	; 0x2778 <Nixie_Loop+0x8ea>
						case 21:{
							N_Clock.Menu_Nixie3_4=N_Clock.Setting.Date_Show_SV/100;
    25f0:	e0 e8       	ldi	r30, 0x80	; 128
    25f2:	f1 e0       	ldi	r31, 0x01	; 1
    25f4:	95 a5       	ldd	r25, Z+45	; 0x2d
    25f6:	89 e2       	ldi	r24, 0x29	; 41
    25f8:	98 9f       	mul	r25, r24
    25fa:	81 2d       	mov	r24, r1
    25fc:	11 24       	eor	r1, r1
    25fe:	82 95       	swap	r24
    2600:	8f 70       	andi	r24, 0x0F	; 15
    2602:	87 8f       	std	Z+31, r24	; 0x1f
							N_Clock.Menu_Nixie5_6=N_Clock.Setting.Date_Show_SV%100;
    2604:	44 e6       	ldi	r20, 0x64	; 100
    2606:	84 9f       	mul	r24, r20
    2608:	90 19       	sub	r25, r0
    260a:	11 24       	eor	r1, r1
    260c:	90 a3       	std	Z+32, r25	; 0x20
						}
						break;
    260e:	b4 c0       	rjmp	.+360    	; 0x2778 <Nixie_Loop+0x8ea>
						case 22:{
							N_Clock.Menu_Nixie3_4=N_Clock.Setting.Date_Timeout_SV/100;
    2610:	e0 e8       	ldi	r30, 0x80	; 128
    2612:	f1 e0       	ldi	r31, 0x01	; 1
    2614:	93 a5       	ldd	r25, Z+43	; 0x2b
    2616:	89 e2       	ldi	r24, 0x29	; 41
    2618:	98 9f       	mul	r25, r24
    261a:	81 2d       	mov	r24, r1
    261c:	11 24       	eor	r1, r1
    261e:	82 95       	swap	r24
    2620:	8f 70       	andi	r24, 0x0F	; 15
    2622:	87 8f       	std	Z+31, r24	; 0x1f
							N_Clock.Menu_Nixie5_6=N_Clock.Setting.Date_Timeout_SV%100;
    2624:	54 e6       	ldi	r21, 0x64	; 100
    2626:	85 9f       	mul	r24, r21
    2628:	90 19       	sub	r25, r0
    262a:	11 24       	eor	r1, r1
    262c:	90 a3       	std	Z+32, r25	; 0x20
						}//22
						break;
    262e:	a4 c0       	rjmp	.+328    	; 0x2778 <Nixie_Loop+0x8ea>

						case 30:{
							N_Clock.Menu_Nixie3_4=0;
    2630:	e0 e8       	ldi	r30, 0x80	; 128
    2632:	f1 e0       	ldi	r31, 0x01	; 1
    2634:	17 8e       	std	Z+31, r1	; 0x1f
							N_Clock.Menu_Nixie5_6=N_Clock.Setting.Save_Active;
    2636:	87 a5       	ldd	r24, Z+47	; 0x2f
    2638:	80 a3       	std	Z+32, r24	; 0x20
						}
						break;
    263a:	9e c0       	rjmp	.+316    	; 0x2778 <Nixie_Loop+0x8ea>
						case 31:
						case 32:{
							N_Clock.Menu_Nixie3_4=N_Clock.Setting.Save_AI/100;
    263c:	c0 e8       	ldi	r28, 0x80	; 128
    263e:	d1 e0       	ldi	r29, 0x01	; 1
    2640:	ec a9       	ldd	r30, Y+52	; 0x34
    2642:	fd a9       	ldd	r31, Y+53	; 0x35
    2644:	9f 01       	movw	r18, r30
    2646:	36 95       	lsr	r19
    2648:	27 95       	ror	r18
    264a:	36 95       	lsr	r19
    264c:	27 95       	ror	r18
    264e:	ab e7       	ldi	r26, 0x7B	; 123
    2650:	b4 e1       	ldi	r27, 0x14	; 20
    2652:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <__umulhisi3>
    2656:	96 95       	lsr	r25
    2658:	87 95       	ror	r24
    265a:	8f 8f       	std	Y+31, r24	; 0x1f
							N_Clock.Menu_Nixie5_6=N_Clock.Setting.Save_AI%100;		
    265c:	54 e6       	ldi	r21, 0x64	; 100
    265e:	58 9f       	mul	r21, r24
    2660:	90 01       	movw	r18, r0
    2662:	59 9f       	mul	r21, r25
    2664:	30 0d       	add	r19, r0
    2666:	11 24       	eor	r1, r1
    2668:	e2 1b       	sub	r30, r18
    266a:	f3 0b       	sbc	r31, r19
    266c:	e8 a3       	std	Y+32, r30	; 0x20
						}//23 & 24
						break;
    266e:	77 c0       	rjmp	.+238    	; 0x275e <Nixie_Loop+0x8d0>
						case 33:{
							N_Clock.Menu_Nixie3_4=N_Clock.Setting.Save_Time_ON.Hour;
    2670:	e0 e8       	ldi	r30, 0x80	; 128
    2672:	f1 e0       	ldi	r31, 0x01	; 1
    2674:	84 ad       	ldd	r24, Z+60	; 0x3c
    2676:	87 8f       	std	Z+31, r24	; 0x1f
							N_Clock.Menu_Nixie5_6=N_Clock.Setting.Save_Time_ON.Minute;
    2678:	83 ad       	ldd	r24, Z+59	; 0x3b
    267a:	80 a3       	std	Z+32, r24	; 0x20
						}//33
						break;
    267c:	7d c0       	rjmp	.+250    	; 0x2778 <Nixie_Loop+0x8ea>
						case 34:{
							N_Clock.Menu_Nixie3_4=N_Clock.Setting.Save_Time_ON.Hour;
    267e:	e0 e8       	ldi	r30, 0x80	; 128
    2680:	f1 e0       	ldi	r31, 0x01	; 1
    2682:	84 ad       	ldd	r24, Z+60	; 0x3c
    2684:	87 8f       	std	Z+31, r24	; 0x1f
							N_Clock.Menu_Nixie5_6=N_Clock.Setting.Save_Time_ON.Minute;
    2686:	83 ad       	ldd	r24, Z+59	; 0x3b
    2688:	80 a3       	std	Z+32, r24	; 0x20
						}//34
						break;
    268a:	76 c0       	rjmp	.+236    	; 0x2778 <Nixie_Loop+0x8ea>
						case 35:{
							N_Clock.Menu_Nixie3_4=N_Clock.Setting.Save_Time_OFF.Hour;
    268c:	e0 e8       	ldi	r30, 0x80	; 128
    268e:	f1 e0       	ldi	r31, 0x01	; 1
    2690:	80 ad       	ldd	r24, Z+56	; 0x38
    2692:	87 8f       	std	Z+31, r24	; 0x1f
							N_Clock.Menu_Nixie5_6=N_Clock.Setting.Save_Time_OFF.Minute;
    2694:	87 a9       	ldd	r24, Z+55	; 0x37
    2696:	80 a3       	std	Z+32, r24	; 0x20
						}//35
						break;
    2698:	6f c0       	rjmp	.+222    	; 0x2778 <Nixie_Loop+0x8ea>
						case 36:{
							N_Clock.Menu_Nixie3_4=N_Clock.Setting.Save_Time_OFF.Hour;
    269a:	e0 e8       	ldi	r30, 0x80	; 128
    269c:	f1 e0       	ldi	r31, 0x01	; 1
    269e:	80 ad       	ldd	r24, Z+56	; 0x38
    26a0:	87 8f       	std	Z+31, r24	; 0x1f
							N_Clock.Menu_Nixie5_6=N_Clock.Setting.Save_Time_OFF.Minute;
    26a2:	87 a9       	ldd	r24, Z+55	; 0x37
    26a4:	80 a3       	std	Z+32, r24	; 0x20
						}//36
						break;
    26a6:	68 c0       	rjmp	.+208    	; 0x2778 <Nixie_Loop+0x8ea>
						case 37:{
							N_Clock.Menu_Nixie3_4=N_Clock.Setting.Save_Timeout_SV/100;
    26a8:	e0 e8       	ldi	r30, 0x80	; 128
    26aa:	f1 e0       	ldi	r31, 0x01	; 1
    26ac:	46 ad       	ldd	r20, Z+62	; 0x3e
    26ae:	57 ad       	ldd	r21, Z+63	; 0x3f
    26b0:	9a 01       	movw	r18, r20
    26b2:	36 95       	lsr	r19
    26b4:	27 95       	ror	r18
    26b6:	36 95       	lsr	r19
    26b8:	27 95       	ror	r18
    26ba:	ab e7       	ldi	r26, 0x7B	; 123
    26bc:	b4 e1       	ldi	r27, 0x14	; 20
    26be:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <__umulhisi3>
    26c2:	96 95       	lsr	r25
    26c4:	87 95       	ror	r24
    26c6:	87 8f       	std	Z+31, r24	; 0x1f
							N_Clock.Menu_Nixie5_6=N_Clock.Setting.Save_Timeout_SV%100;
    26c8:	64 e6       	ldi	r22, 0x64	; 100
    26ca:	68 9f       	mul	r22, r24
    26cc:	90 01       	movw	r18, r0
    26ce:	69 9f       	mul	r22, r25
    26d0:	30 0d       	add	r19, r0
    26d2:	11 24       	eor	r1, r1
    26d4:	42 1b       	sub	r20, r18
    26d6:	53 0b       	sbc	r21, r19
    26d8:	40 a3       	std	Z+32, r20	; 0x20
						}//37
						break;
    26da:	4e c0       	rjmp	.+156    	; 0x2778 <Nixie_Loop+0x8ea>
						case 40:{
							N_Clock.Menu_Nixie3_4=N_Clock.Setting.Roll_Active/100;
    26dc:	e0 e8       	ldi	r30, 0x80	; 128
    26de:	f1 e0       	ldi	r31, 0x01	; 1
    26e0:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <N_Clock+0x5d>
    26e4:	89 e2       	ldi	r24, 0x29	; 41
    26e6:	98 9f       	mul	r25, r24
    26e8:	81 2d       	mov	r24, r1
    26ea:	11 24       	eor	r1, r1
    26ec:	82 95       	swap	r24
    26ee:	8f 70       	andi	r24, 0x0F	; 15
    26f0:	87 8f       	std	Z+31, r24	; 0x1f
							N_Clock.Menu_Nixie5_6=N_Clock.Setting.Roll_Active%100;
    26f2:	24 e6       	ldi	r18, 0x64	; 100
    26f4:	82 9f       	mul	r24, r18
    26f6:	90 19       	sub	r25, r0
    26f8:	11 24       	eor	r1, r1
    26fa:	90 a3       	std	Z+32, r25	; 0x20
						}//40
						break;
    26fc:	3d c0       	rjmp	.+122    	; 0x2778 <Nixie_Loop+0x8ea>
						case 41:{
							N_Clock.Menu_Nixie3_4=N_Clock.Setting.Fade/100;
    26fe:	e0 e8       	ldi	r30, 0x80	; 128
    2700:	f1 e0       	ldi	r31, 0x01	; 1
    2702:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <N_Clock+0x5e>
    2706:	89 e2       	ldi	r24, 0x29	; 41
    2708:	98 9f       	mul	r25, r24
    270a:	81 2d       	mov	r24, r1
    270c:	11 24       	eor	r1, r1
    270e:	82 95       	swap	r24
    2710:	8f 70       	andi	r24, 0x0F	; 15
    2712:	87 8f       	std	Z+31, r24	; 0x1f
							N_Clock.Menu_Nixie5_6=N_Clock.Setting.Fade%100;
    2714:	44 e6       	ldi	r20, 0x64	; 100
    2716:	84 9f       	mul	r24, r20
    2718:	90 19       	sub	r25, r0
    271a:	11 24       	eor	r1, r1
    271c:	90 a3       	std	Z+32, r25	; 0x20
						}//41
						break;
    271e:	2c c0       	rjmp	.+88     	; 0x2778 <Nixie_Loop+0x8ea>
						case 42:{
							N_Clock.Menu_Nixie3_4=N_Clock.Setting.Fade_Time/100;
    2720:	e0 e8       	ldi	r30, 0x80	; 128
    2722:	f1 e0       	ldi	r31, 0x01	; 1
    2724:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <N_Clock+0x5f>
    2728:	89 e2       	ldi	r24, 0x29	; 41
    272a:	98 9f       	mul	r25, r24
    272c:	81 2d       	mov	r24, r1
    272e:	11 24       	eor	r1, r1
    2730:	82 95       	swap	r24
    2732:	8f 70       	andi	r24, 0x0F	; 15
    2734:	87 8f       	std	Z+31, r24	; 0x1f
							N_Clock.Menu_Nixie5_6=N_Clock.Setting.Fade_Time%100;
    2736:	54 e6       	ldi	r21, 0x64	; 100
    2738:	85 9f       	mul	r24, r21
    273a:	90 19       	sub	r25, r0
    273c:	11 24       	eor	r1, r1
    273e:	90 a3       	std	Z+32, r25	; 0x20
						}//42
						break;
    2740:	1b c0       	rjmp	.+54     	; 0x2778 <Nixie_Loop+0x8ea>
						case 50:{
							N_Clock.Menu_Nixie3_4=0;
    2742:	e0 e8       	ldi	r30, 0x80	; 128
    2744:	f1 e0       	ldi	r31, 0x01	; 1
    2746:	17 8e       	std	Z+31, r1	; 0x1f
							N_Clock.Menu_Nixie5_6=N_Clock.Setting.Colon_Active;
    2748:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <N_Clock+0x60>
    274c:	80 a3       	std	Z+32, r24	; 0x20
						}//50
						break;
    274e:	14 c0       	rjmp	.+40     	; 0x2778 <Nixie_Loop+0x8ea>
						case 51:{
							N_Clock.Menu_Nixie3_4=N_Clock.Setting.Nixie_Amount;
    2750:	e0 e8       	ldi	r30, 0x80	; 128
    2752:	f1 e0       	ldi	r31, 0x01	; 1
    2754:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <N_Clock+0x61>
    2758:	87 8f       	std	Z+31, r24	; 0x1f
							N_Clock.Menu_Nixie5_6=0;
    275a:	10 a2       	std	Z+32, r1	; 0x20
						}
						break;
    275c:	0d c0       	rjmp	.+26     	; 0x2778 <Nixie_Loop+0x8ea>

					}//switch
					
					if (N_Clock.Menu<4){
    275e:	44 30       	cpi	r20, 0x04	; 4
    2760:	20 f4       	brcc	.+8      	; 0x276a <Nixie_Loop+0x8dc>
						Nixie_Update(Show_Time);
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	0e 94 e5 09 	call	0x13ca	; 0x13ca <Nixie_Update>
    2768:	0a c0       	rjmp	.+20     	; 0x277e <Nixie_Loop+0x8f0>
					}
					else if (N_Clock.Menu>9 && N_Clock.Menu<20){
    276a:	4a 50       	subi	r20, 0x0A	; 10
    276c:	4a 30       	cpi	r20, 0x0A	; 10
    276e:	20 f4       	brcc	.+8      	; 0x2778 <Nixie_Loop+0x8ea>
						Nixie_Update(Show_Date);
    2770:	82 e0       	ldi	r24, 0x02	; 2
    2772:	0e 94 e5 09 	call	0x13ca	; 0x13ca <Nixie_Update>
    2776:	03 c0       	rjmp	.+6      	; 0x277e <Nixie_Loop+0x8f0>
					}
					else{
						Nixie_Update(Show_Menu);
    2778:	83 e0       	ldi	r24, 0x03	; 3
    277a:	0e 94 e5 09 	call	0x13ca	; 0x13ca <Nixie_Update>
		break;
	}//N_Clock.Status

	//Timers
	//10ms timers
	uint8_t _Pulse_10ms = Timer_Pulse_10ms();
    277e:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Timer_Pulse_10ms>
	Debounce.Menu					-= Debounce.Menu && _Pulse_10ms;
    2782:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <Debounce>
    2786:	99 23       	and	r25, r25
    2788:	11 f0       	breq	.+4      	; 0x278e <Nixie_Loop+0x900>
    278a:	81 11       	cpse	r24, r1
    278c:	9a c0       	rjmp	.+308    	; 0x28c2 <Nixie_Loop+0xa34>
    278e:	ed e7       	ldi	r30, 0x7D	; 125
    2790:	f1 e0       	ldi	r31, 0x01	; 1
    2792:	90 83       	st	Z, r25
	Debounce.Sub_Menu				-= Debounce.Sub_Menu && _Pulse_10ms;
    2794:	91 81       	ldd	r25, Z+1	; 0x01
    2796:	99 23       	and	r25, r25
    2798:	11 f0       	breq	.+4      	; 0x279e <Nixie_Loop+0x910>
    279a:	81 11       	cpse	r24, r1
    279c:	79 c0       	rjmp	.+242    	; 0x2890 <Nixie_Loop+0xa02>
	Debounce.Timer					-= Debounce.Timer && _Pulse_10ms;
    279e:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <Debounce+0x2>
    27a2:	99 23       	and	r25, r25
    27a4:	11 f0       	breq	.+4      	; 0x27aa <Nixie_Loop+0x91c>
    27a6:	81 11       	cpse	r24, r1
    27a8:	02 c0       	rjmp	.+4      	; 0x27ae <Nixie_Loop+0x920>
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	03 c0       	rjmp	.+6      	; 0x27b4 <Nixie_Loop+0x926>
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	01 c0       	rjmp	.+2      	; 0x27b4 <Nixie_Loop+0x926>
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	98 1b       	sub	r25, r24
    27b6:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <Debounce+0x2>

	//Setting timers
	uint8_t _Pulse_1s = Timer_Pulse_1s();
    27ba:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <Timer_Pulse_1s>
	N_Clock.Setting.Date_Show_PV	-= N_Clock.Setting.Date_Show_PV && _Pulse_1s;
    27be:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <N_Clock+0x2e>
    27c2:	99 23       	and	r25, r25
    27c4:	11 f0       	breq	.+4      	; 0x27ca <Nixie_Loop+0x93c>
    27c6:	81 11       	cpse	r24, r1
    27c8:	6b c0       	rjmp	.+214    	; 0x28a0 <Nixie_Loop+0xa12>
	N_Clock.Setting.Date_Timeout_PV -= N_Clock.Setting.Date_Timeout_PV && _Pulse_1s;
    27ca:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <N_Clock+0x2c>
    27ce:	99 23       	and	r25, r25
    27d0:	11 f0       	breq	.+4      	; 0x27d6 <Nixie_Loop+0x948>
    27d2:	81 11       	cpse	r24, r1
    27d4:	02 c0       	rjmp	.+4      	; 0x27da <Nixie_Loop+0x94c>
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	03 c0       	rjmp	.+6      	; 0x27e0 <Nixie_Loop+0x952>
    27da:	21 e0       	ldi	r18, 0x01	; 1
    27dc:	01 c0       	rjmp	.+2      	; 0x27e0 <Nixie_Loop+0x952>
    27de:	21 e0       	ldi	r18, 0x01	; 1
    27e0:	e0 e8       	ldi	r30, 0x80	; 128
    27e2:	f1 e0       	ldi	r31, 0x01	; 1
    27e4:	92 1b       	sub	r25, r18
    27e6:	94 a7       	std	Z+44, r25	; 0x2c
	N_Clock.Menu_Enter				-= N_Clock.Menu_Enter && N_Clock.Status==Status_Nixie_Menu && _Pulse_1s;
    27e8:	95 a1       	ldd	r25, Z+37	; 0x25
    27ea:	99 23       	and	r25, r25
    27ec:	51 f0       	breq	.+20     	; 0x2802 <Nixie_Loop+0x974>
    27ee:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <N_Clock+0x21>
    27f2:	23 30       	cpi	r18, 0x03	; 3
    27f4:	41 f4       	brne	.+16     	; 0x2806 <Nixie_Loop+0x978>
    27f6:	21 e0       	ldi	r18, 0x01	; 1
    27f8:	81 11       	cpse	r24, r1
    27fa:	01 c0       	rjmp	.+2      	; 0x27fe <Nixie_Loop+0x970>
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	82 2f       	mov	r24, r18
    2800:	03 c0       	rjmp	.+6      	; 0x2808 <Nixie_Loop+0x97a>
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	01 c0       	rjmp	.+2      	; 0x2808 <Nixie_Loop+0x97a>
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	c0 e8       	ldi	r28, 0x80	; 128
    280a:	d1 e0       	ldi	r29, 0x01	; 1
    280c:	98 1b       	sub	r25, r24
    280e:	9d a3       	std	Y+37, r25	; 0x25

	//Misc timers
	uint8_t _Pulse_1ms = Timer_Pulse_1ms();
    2810:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <Timer_Pulse_1ms>
	N_Clock.Nixie_Blanking_Timer	-= N_Clock.Nixie_Blanking_Timer && _Pulse_1ms;
    2814:	9e a1       	ldd	r25, Y+38	; 0x26
    2816:	99 23       	and	r25, r25
    2818:	09 f4       	brne	.+2      	; 0x281c <Nixie_Loop+0x98e>
    281a:	5b c0       	rjmp	.+182    	; 0x28d2 <Nixie_Loop+0xa44>
    281c:	88 23       	and	r24, r24
    281e:	09 f4       	brne	.+2      	; 0x2822 <Nixie_Loop+0x994>
    2820:	5f c0       	rjmp	.+190    	; 0x28e0 <Nixie_Loop+0xa52>
    2822:	91 50       	subi	r25, 0x01	; 1
    2824:	9e a3       	std	Y+38, r25	; 0x26
	N_Clock.Next_Nixie_Timer		-= N_Clock.Next_Nixie_Timer && N_Clock.Nixie_Blanking_Timer==0 && _Pulse_1ms;
    2826:	2f a1       	ldd	r18, Y+39	; 0x27
    2828:	22 23       	and	r18, r18
    282a:	21 f0       	breq	.+8      	; 0x2834 <Nixie_Loop+0x9a6>
    282c:	91 11       	cpse	r25, r1
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <Nixie_Loop+0x9a6>
    2830:	81 11       	cpse	r24, r1
    2832:	3e c0       	rjmp	.+124    	; 0x28b0 <Nixie_Loop+0xa22>
	N_Clock.Fade_Timer_On			-= N_Clock.Fade_Timer_On && _Pulse_1ms;
    2834:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <N_Clock+0x17>
    2838:	99 23       	and	r25, r25
    283a:	11 f0       	breq	.+4      	; 0x2840 <Nixie_Loop+0x9b2>
    283c:	81 11       	cpse	r24, r1
    283e:	02 c0       	rjmp	.+4      	; 0x2844 <Nixie_Loop+0x9b6>
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	03 c0       	rjmp	.+6      	; 0x284a <Nixie_Loop+0x9bc>
    2844:	21 e0       	ldi	r18, 0x01	; 1
    2846:	01 c0       	rjmp	.+2      	; 0x284a <Nixie_Loop+0x9bc>
    2848:	21 e0       	ldi	r18, 0x01	; 1
    284a:	92 1b       	sub	r25, r18
    284c:	e0 e8       	ldi	r30, 0x80	; 128
    284e:	f1 e0       	ldi	r31, 0x01	; 1
    2850:	97 8b       	std	Z+23, r25	; 0x17
	N_Clock.Fade_Timer_Off			-= N_Clock.Fade_Timer_Off && N_Clock.Fade_Timer_On==0 && _Pulse_1ms;
    2852:	20 8d       	ldd	r18, Z+24	; 0x18
    2854:	22 23       	and	r18, r18
    2856:	41 f0       	breq	.+16     	; 0x2868 <Nixie_Loop+0x9da>
    2858:	91 11       	cpse	r25, r1
    285a:	08 c0       	rjmp	.+16     	; 0x286c <Nixie_Loop+0x9de>
    285c:	91 e0       	ldi	r25, 0x01	; 1
    285e:	81 11       	cpse	r24, r1
    2860:	01 c0       	rjmp	.+2      	; 0x2864 <Nixie_Loop+0x9d6>
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	89 2f       	mov	r24, r25
    2866:	03 c0       	rjmp	.+6      	; 0x286e <Nixie_Loop+0x9e0>
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	01 c0       	rjmp	.+2      	; 0x286e <Nixie_Loop+0x9e0>
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	28 1b       	sub	r18, r24
    2870:	20 93 98 01 	sts	0x0198, r18	; 0x800198 <N_Clock+0x18>
}//Nixie_Loop
    2874:	38 c0       	rjmp	.+112    	; 0x28e6 <Nixie_Loop+0xa58>
						else if (N_Clock.Menu==52){
							N_Clock.Menu=0;
						}
						Debounce.Sub_Menu=Debounce_Overshoot;//set debounce to 300ms to prevent overshoot
					}
					else if ((PINC & (1<<Button1)) && ~(PINC & (1<<Button2)) && Debounce.Sub_Menu==0){
    2876:	86 b1       	in	r24, 0x06	; 6
    2878:	98 ce       	rjmp	.-720    	; 0x25aa <Nixie_Loop+0x71c>
    287a:	31 99       	sbic	0x06, 1	; 6
    287c:	fc cf       	rjmp	.-8      	; 0x2876 <Nixie_Loop+0x9e8>
    287e:	95 ce       	rjmp	.-726    	; 0x25aa <Nixie_Loop+0x71c>
								_Date.Day++;//update the day
								//protect the day from beeing wrong.
								if ((_Date.Month==2) && (_Date.Day>28) && (RTC_not_leap())){//February and not a leap year
									_Date.Day=1;
								}
								else if ((_Date.Month==2) && (_Date.Day>29)){//February in a leap year
    2880:	ce 31       	cpi	r28, 0x1E	; 30
    2882:	08 f0       	brcs	.+2      	; 0x2886 <Nixie_Loop+0x9f8>
    2884:	88 ce       	rjmp	.-752    	; 0x2596 <Nixie_Loop+0x708>
    2886:	ac cd       	rjmp	.-1192   	; 0x23e0 <Nixie_Loop+0x552>
									_Date.Day=1;
								}
								else if ((_Date.Day>30) && ((_Date.Month==4)||(_Date.Month==6)||(_Date.Month==9)||(_Date.Month==11))){//30 day months
    2888:	cf 31       	cpi	r28, 0x1F	; 31
    288a:	08 f0       	brcs	.+2      	; 0x288e <Nixie_Loop+0xa00>
    288c:	9d cd       	rjmp	.-1222   	; 0x23c8 <Nixie_Loop+0x53a>
    288e:	a8 cd       	rjmp	.-1200   	; 0x23e0 <Nixie_Loop+0x552>

	//Timers
	//10ms timers
	uint8_t _Pulse_10ms = Timer_Pulse_10ms();
	Debounce.Menu					-= Debounce.Menu && _Pulse_10ms;
	Debounce.Sub_Menu				-= Debounce.Sub_Menu && _Pulse_10ms;
    2890:	ed e7       	ldi	r30, 0x7D	; 125
    2892:	f1 e0       	ldi	r31, 0x01	; 1
    2894:	91 50       	subi	r25, 0x01	; 1
    2896:	91 83       	std	Z+1, r25	; 0x01
	Debounce.Timer					-= Debounce.Timer && _Pulse_10ms;
    2898:	92 81       	ldd	r25, Z+2	; 0x02
    289a:	91 11       	cpse	r25, r1
    289c:	8a cf       	rjmp	.-236    	; 0x27b2 <Nixie_Loop+0x924>
    289e:	85 cf       	rjmp	.-246    	; 0x27aa <Nixie_Loop+0x91c>

	//Setting timers
	uint8_t _Pulse_1s = Timer_Pulse_1s();
	N_Clock.Setting.Date_Show_PV	-= N_Clock.Setting.Date_Show_PV && _Pulse_1s;
    28a0:	e0 e8       	ldi	r30, 0x80	; 128
    28a2:	f1 e0       	ldi	r31, 0x01	; 1
    28a4:	91 50       	subi	r25, 0x01	; 1
    28a6:	96 a7       	std	Z+46, r25	; 0x2e
	N_Clock.Setting.Date_Timeout_PV -= N_Clock.Setting.Date_Timeout_PV && _Pulse_1s;
    28a8:	94 a5       	ldd	r25, Z+44	; 0x2c
    28aa:	91 11       	cpse	r25, r1
    28ac:	98 cf       	rjmp	.-208    	; 0x27de <Nixie_Loop+0x950>
    28ae:	93 cf       	rjmp	.-218    	; 0x27d6 <Nixie_Loop+0x948>
	N_Clock.Menu_Enter				-= N_Clock.Menu_Enter && N_Clock.Status==Status_Nixie_Menu && _Pulse_1s;

	//Misc timers
	uint8_t _Pulse_1ms = Timer_Pulse_1ms();
	N_Clock.Nixie_Blanking_Timer	-= N_Clock.Nixie_Blanking_Timer && _Pulse_1ms;
	N_Clock.Next_Nixie_Timer		-= N_Clock.Next_Nixie_Timer && N_Clock.Nixie_Blanking_Timer==0 && _Pulse_1ms;
    28b0:	e0 e8       	ldi	r30, 0x80	; 128
    28b2:	f1 e0       	ldi	r31, 0x01	; 1
    28b4:	21 50       	subi	r18, 0x01	; 1
    28b6:	27 a3       	std	Z+39, r18	; 0x27
	N_Clock.Fade_Timer_On			-= N_Clock.Fade_Timer_On && _Pulse_1ms;
    28b8:	97 89       	ldd	r25, Z+23	; 0x17
    28ba:	99 23       	and	r25, r25
    28bc:	09 f4       	brne	.+2      	; 0x28c0 <Nixie_Loop+0xa32>
    28be:	c0 cf       	rjmp	.-128    	; 0x2840 <Nixie_Loop+0x9b2>
    28c0:	c3 cf       	rjmp	.-122    	; 0x2848 <Nixie_Loop+0x9ba>
	}//N_Clock.Status

	//Timers
	//10ms timers
	uint8_t _Pulse_10ms = Timer_Pulse_10ms();
	Debounce.Menu					-= Debounce.Menu && _Pulse_10ms;
    28c2:	ed e7       	ldi	r30, 0x7D	; 125
    28c4:	f1 e0       	ldi	r31, 0x01	; 1
    28c6:	91 50       	subi	r25, 0x01	; 1
    28c8:	90 83       	st	Z, r25
	Debounce.Sub_Menu				-= Debounce.Sub_Menu && _Pulse_10ms;
    28ca:	91 81       	ldd	r25, Z+1	; 0x01
    28cc:	91 11       	cpse	r25, r1
    28ce:	e0 cf       	rjmp	.-64     	; 0x2890 <Nixie_Loop+0xa02>
    28d0:	66 cf       	rjmp	.-308    	; 0x279e <Nixie_Loop+0x910>
	N_Clock.Setting.Date_Timeout_PV -= N_Clock.Setting.Date_Timeout_PV && _Pulse_1s;
	N_Clock.Menu_Enter				-= N_Clock.Menu_Enter && N_Clock.Status==Status_Nixie_Menu && _Pulse_1s;

	//Misc timers
	uint8_t _Pulse_1ms = Timer_Pulse_1ms();
	N_Clock.Nixie_Blanking_Timer	-= N_Clock.Nixie_Blanking_Timer && _Pulse_1ms;
    28d2:	e0 e8       	ldi	r30, 0x80	; 128
    28d4:	f1 e0       	ldi	r31, 0x01	; 1
    28d6:	96 a3       	std	Z+38, r25	; 0x26
	N_Clock.Next_Nixie_Timer		-= N_Clock.Next_Nixie_Timer && N_Clock.Nixie_Blanking_Timer==0 && _Pulse_1ms;
    28d8:	27 a1       	ldd	r18, Z+39	; 0x27
    28da:	21 11       	cpse	r18, r1
    28dc:	a9 cf       	rjmp	.-174    	; 0x2830 <Nixie_Loop+0x9a2>
    28de:	aa cf       	rjmp	.-172    	; 0x2834 <Nixie_Loop+0x9a6>
	N_Clock.Setting.Date_Timeout_PV -= N_Clock.Setting.Date_Timeout_PV && _Pulse_1s;
	N_Clock.Menu_Enter				-= N_Clock.Menu_Enter && N_Clock.Status==Status_Nixie_Menu && _Pulse_1s;

	//Misc timers
	uint8_t _Pulse_1ms = Timer_Pulse_1ms();
	N_Clock.Nixie_Blanking_Timer	-= N_Clock.Nixie_Blanking_Timer && _Pulse_1ms;
    28e0:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <N_Clock+0x26>
    28e4:	a7 cf       	rjmp	.-178    	; 0x2834 <Nixie_Loop+0x9a6>
	N_Clock.Next_Nixie_Timer		-= N_Clock.Next_Nixie_Timer && N_Clock.Nixie_Blanking_Timer==0 && _Pulse_1ms;
	N_Clock.Fade_Timer_On			-= N_Clock.Fade_Timer_On && _Pulse_1ms;
	N_Clock.Fade_Timer_Off			-= N_Clock.Fade_Timer_Off && N_Clock.Fade_Timer_On==0 && _Pulse_1ms;
}//Nixie_Loop
    28e6:	df 91       	pop	r29
    28e8:	cf 91       	pop	r28
    28ea:	1f 91       	pop	r17
    28ec:	0f 91       	pop	r16
    28ee:	ff 90       	pop	r15
    28f0:	ef 90       	pop	r14
    28f2:	08 95       	ret

000028f4 <main>:
//Power_struct N_Power;
Nixie_struct N_Clock;

//Main program
int main(void){
	Timer_Init();
    28f4:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <Timer_Init>
	I2C_Init();
    28f8:	0e 94 27 09 	call	0x124e	; 0x124e <I2C_Init>
	I2C_Enable();
    28fc:	0e 94 2e 09 	call	0x125c	; 0x125c <I2C_Enable>
	DS1307_Init();
    2900:	0e 94 00 06 	call	0xc00	; 0xc00 <DS1307_Init>
//	RTC_USE_EXT_TIM2();
	RTC_Init();
    2904:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <RTC_Init>
	Analog_Init();
    2908:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Analog_Init>
	Setting_Init();
    290c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Setting_Init>
	Nixie_Init();
    2910:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <Nixie_Init>
	sei();
    2914:	78 94       	sei
		
    while(1){
		Timer_loop();
    2916:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <Timer_loop>
 		I2C_Loop();
    291a:	0e 94 37 07 	call	0xe6e	; 0xe6e <I2C_Loop>
		DS1307_Loop();
    291e:	0e 94 a7 02 	call	0x54e	; 0x54e <DS1307_Loop>
		RTC_Loop();
    2922:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <RTC_Loop>
		Analog_loop();
    2926:	0e 94 88 01 	call	0x310	; 0x310 <Analog_loop>
		Setting_Loop();
    292a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <Setting_Loop>
		Nixie_Loop();
    292e:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <Nixie_Loop>
		Power_Loop();
    2932:	0e 94 b9 14 	call	0x2972	; 0x2972 <Power_Loop>
		EEPROM_Loop();
    2936:	0e 94 97 06 	call	0xd2e	; 0xd2e <EEPROM_Loop>
    293a:	ed cf       	rjmp	.-38     	; 0x2916 <main+0x22>

0000293c <Power_Init>:

//Power functions
void Power_Init(void){
	//The required voltage for the Nixies is created by a boost converter. From the website https://learn.adafruit.com/diy-boost-calc/the-calculator I calculated that
	// when you use a 330uH coil you have to generate a 60KHZ block wave to get 170~190V.
	Power_TCCRA = Power_TCCRA_Setting;//See .h file
    293c:	82 e0       	ldi	r24, 0x02	; 2
    293e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	#ifdef Power_TCCRB
	Power_TCCRB = Power_TCCRB_Setting;//See .h file
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	#endif
	Power_OCR = 0x78;//8MHZ/66(0x42) = ~121.2121/2 = a block wave of ~60.6060KHZ
    2948:	88 e7       	ldi	r24, 0x78	; 120
    294a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	Power_DDR |= (1<<Power_Pin);//Make the powerpin output
    294e:	23 9a       	sbi	0x04, 3	; 4
	N_Power.Power_Threshold_SV = Power_Threshold;
    2950:	8b e2       	ldi	r24, 0x2B	; 43
    2952:	92 e0       	ldi	r25, 0x02	; 2
    2954:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <N_Power+0x4>
    2958:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <N_Power+0x3>
	Analog_Channel_Init(Power_Analog_Channel, Power_Analog_Timeout);
    295c:	61 e0       	ldi	r22, 0x01	; 1
    295e:	70 e0       	ldi	r23, 0x00	; 0
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	0e 94 30 02 	call	0x460	; 0x460 <Analog_Channel_Init>
	Analog_Channel_Init(Power_Analog_Save_Channel, Power_Analog_Save_Timeout);
    2966:	64 e6       	ldi	r22, 0x64	; 100
    2968:	70 e0       	ldi	r23, 0x00	; 0
    296a:	83 e0       	ldi	r24, 0x03	; 3
    296c:	0e 94 30 02 	call	0x460	; 0x460 <Analog_Channel_Init>
    2970:	08 95       	ret

00002972 <Power_Loop>:
}//Power_Init

void Power_Loop(void){
	if (Analog_Channel_Ready(Power_Analog_Channel)){
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	0e 94 63 02 	call	0x4c6	; 0x4c6 <Analog_Channel_Ready>
    2978:	88 23       	and	r24, r24
    297a:	39 f0       	breq	.+14     	; 0x298a <Power_Loop+0x18>
		N_Power.Analog_In=Analog_Channel_Read(Power_Analog_Channel);
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	0e 94 3e 02 	call	0x47c	; 0x47c <Analog_Channel_Read>
    2982:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <N_Power+0x2>
    2986:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <N_Power+0x1>
	}
	switch(N_Power.mode){	
    298a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <N_Power>
    298e:	88 23       	and	r24, r24
    2990:	19 f0       	breq	.+6      	; 0x2998 <Power_Loop+0x26>
    2992:	81 30       	cpi	r24, 0x01	; 1
    2994:	41 f0       	breq	.+16     	; 0x29a6 <Power_Loop+0x34>
    2996:	08 95       	ret
		case Power_Mode_OFF:{
			Power_TCCRA &= ~((1<<Power_COMx1)|(1<<Power_COMx0));//Disconnect the output pin
    2998:	e0 eb       	ldi	r30, 0xB0	; 176
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	8f 73       	andi	r24, 0x3F	; 63
    29a0:	80 83       	st	Z, r24
			Power_Port &= ~(1<<Power_Pin);//Make sure it is really low
    29a2:	2b 98       	cbi	0x05, 3	; 5
		}//Mode_Power_OFF
		break;
    29a4:	08 95       	ret
		case Power_Mode_ON:{//This has to be tested. Will shutting the frequency on and off work or do I need to change the OCR2 value?
			if (N_Power.Analog_In>N_Power.Power_Threshold_SV)//if the voltage is to high
    29a6:	e8 e0       	ldi	r30, 0x08	; 8
    29a8:	f2 e0       	ldi	r31, 0x02	; 2
    29aa:	21 81       	ldd	r18, Z+1	; 0x01
    29ac:	32 81       	ldd	r19, Z+2	; 0x02
    29ae:	83 81       	ldd	r24, Z+3	; 0x03
    29b0:	94 81       	ldd	r25, Z+4	; 0x04
    29b2:	82 17       	cp	r24, r18
    29b4:	93 07       	cpc	r25, r19
    29b6:	38 f4       	brcc	.+14     	; 0x29c6 <Power_Loop+0x54>
			{
				Power_TCCRA &= ~((1<<Power_COMx1)|(1<<Power_COMx0));//Disconnect the output pin
    29b8:	e0 eb       	ldi	r30, 0xB0	; 176
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	8f 73       	andi	r24, 0x3F	; 63
    29c0:	80 83       	st	Z, r24
				Power_Port &= ~(1<<Power_Pin);//Make sure it is really low
    29c2:	2b 98       	cbi	0x05, 3	; 5
    29c4:	08 95       	ret
			}
			else{
				Power_TCCRA |= (1<<Power_COMx0);//Else toggle PB3(OC2)
    29c6:	e0 eb       	ldi	r30, 0xB0	; 176
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	80 64       	ori	r24, 0x40	; 64
    29ce:	80 83       	st	Z, r24
    29d0:	08 95       	ret

000029d2 <Power_Mode>:
		break;
	}//N_Power.mode
}//Power_Loop

void Power_Mode(const uint8_t _Command){
	N_Power.mode=_Command;
    29d2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <N_Power>
    29d6:	08 95       	ret

000029d8 <RTC_Init>:
void RTC_Set_Enable_Function(Set_Ext_Enable_Function _Function_Ptr){
	RTC.Set_Ext_Enable_Function_Ptr=_Function_Ptr;
}

void RTC_Set_Disable_Function(Set_Ext_Disable_Function _Function_Ptr){
	RTC.Set_Ext_Disable_Function_Ptr=_Function_Ptr;
    29d8:	e2 ee       	ldi	r30, 0xE2	; 226
    29da:	f1 e0       	ldi	r31, 0x01	; 1
    29dc:	86 e1       	ldi	r24, 0x16	; 22
    29de:	96 e0       	ldi	r25, 0x06	; 6
    29e0:	97 87       	std	Z+15, r25	; 0x0f
    29e2:	86 87       	std	Z+14, r24	; 0x0e
    29e4:	8a e3       	ldi	r24, 0x3A	; 58
    29e6:	96 e0       	ldi	r25, 0x06	; 6
    29e8:	91 8b       	std	Z+17, r25	; 0x11
    29ea:	80 8b       	std	Z+16, r24	; 0x10
    29ec:	88 e2       	ldi	r24, 0x28	; 40
    29ee:	96 e0       	ldi	r25, 0x06	; 6
    29f0:	93 8b       	std	Z+19, r25	; 0x13
    29f2:	82 8b       	std	Z+18, r24	; 0x12
    29f4:	80 e5       	ldi	r24, 0x50	; 80
    29f6:	96 e0       	ldi	r25, 0x06	; 6
    29f8:	95 8b       	std	Z+21, r25	; 0x15
    29fa:	84 8b       	std	Z+20, r24	; 0x14
    29fc:	84 e3       	ldi	r24, 0x34	; 52
    29fe:	96 e0       	ldi	r25, 0x06	; 6
    2a00:	97 8b       	std	Z+23, r25	; 0x17
    2a02:	86 8b       	std	Z+22, r24	; 0x16
    2a04:	86 e7       	ldi	r24, 0x76	; 118
    2a06:	96 e0       	ldi	r25, 0x06	; 6
    2a08:	91 8f       	std	Z+25, r25	; 0x19
    2a0a:	80 8f       	std	Z+24, r24	; 0x18
    2a0c:	87 e3       	ldi	r24, 0x37	; 55
    2a0e:	96 e0       	ldi	r25, 0x06	; 6
    2a10:	93 8f       	std	Z+27, r25	; 0x1b
    2a12:	82 8f       	std	Z+26, r24	; 0x1a
    2a14:	81 e9       	ldi	r24, 0x91	; 145
    2a16:	96 e0       	ldi	r25, 0x06	; 6
    2a18:	95 8f       	std	Z+29, r25	; 0x1d
    2a1a:	84 8f       	std	Z+28, r24	; 0x1c
    2a1c:	8c e7       	ldi	r24, 0x7C	; 124
    2a1e:	96 e0       	ldi	r25, 0x06	; 6
    2a20:	97 8f       	std	Z+31, r25	; 0x1f
    2a22:	86 8f       	std	Z+30, r24	; 0x1e
    2a24:	86 e8       	ldi	r24, 0x86	; 134
    2a26:	96 e0       	ldi	r25, 0x06	; 6
    2a28:	91 a3       	std	Z+33, r25	; 0x21
    2a2a:	80 a3       	std	Z+32, r24	; 0x20
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	87 83       	std	Z+7, r24	; 0x07
    2a30:	08 95       	ret

00002a32 <RTC_Set_TWLF>:
    2a32:	cf 93       	push	r28
    2a34:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <RTC+0x14>
    2a38:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <RTC+0x15>
    2a3c:	30 97       	sbiw	r30, 0x00	; 0
    2a3e:	21 f0       	breq	.+8      	; 0x2a48 <RTC_Set_TWLF+0x16>
    2a40:	c8 2f       	mov	r28, r24
    2a42:	09 95       	icall
    2a44:	c0 93 ea 01 	sts	0x01EA, r28	; 0x8001ea <RTC+0x8>
    2a48:	cf 91       	pop	r28
    2a4a:	08 95       	ret

00002a4c <RTC_Get_TWLF>:
    2a4c:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <RTC+0x16>
    2a50:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <RTC+0x17>
    2a54:	30 97       	sbiw	r30, 0x00	; 0
    2a56:	11 f0       	breq	.+4      	; 0x2a5c <RTC_Get_TWLF+0x10>
    2a58:	09 95       	icall
    2a5a:	08 95       	ret
    2a5c:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <RTC+0x8>
    2a60:	08 95       	ret

00002a62 <RTC_Set_PM>:
    2a62:	cf 93       	push	r28
    2a64:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <RTC+0x18>
    2a68:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <RTC+0x19>
    2a6c:	30 97       	sbiw	r30, 0x00	; 0
    2a6e:	21 f0       	breq	.+8      	; 0x2a78 <RTC_Set_PM+0x16>
    2a70:	c8 2f       	mov	r28, r24
    2a72:	09 95       	icall
    2a74:	c0 93 eb 01 	sts	0x01EB, r28	; 0x8001eb <RTC+0x9>
    2a78:	cf 91       	pop	r28
    2a7a:	08 95       	ret

00002a7c <RTC_Get_PM>:
    2a7c:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <RTC+0x1a>
    2a80:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <RTC+0x1b>
    2a84:	30 97       	sbiw	r30, 0x00	; 0
    2a86:	11 f0       	breq	.+4      	; 0x2a8c <RTC_Get_PM+0x10>
    2a88:	09 95       	icall
    2a8a:	08 95       	ret
    2a8c:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <RTC+0x9>
    2a90:	08 95       	ret

00002a92 <RTC_Ready>:
    2a92:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <RTC+0x7>
    2a96:	82 30       	cpi	r24, 0x02	; 2
    2a98:	39 f4       	brne	.+14     	; 0x2aa8 <RTC_Ready+0x16>
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <RTC+0xa>
    2aa0:	99 23       	and	r25, r25
    2aa2:	19 f0       	breq	.+6      	; 0x2aaa <RTC_Ready+0x18>
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	08 95       	ret
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	08 95       	ret

00002aac <RTC_not_leap>:
}

char RTC_not_leap(void){      //check for leap year
	int year = RTC.Date.Year + 2000;
    2aac:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <RTC+0x5>
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	20 53       	subi	r18, 0x30	; 48
    2ab4:	38 4f       	sbci	r19, 0xF8	; 248
	if (!(year%100))
    2ab6:	c9 01       	movw	r24, r18
    2ab8:	64 e6       	ldi	r22, 0x64	; 100
    2aba:	70 e0       	ldi	r23, 0x00	; 0
    2abc:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divmodhi4>
    2ac0:	89 2b       	or	r24, r25
    2ac2:	31 f4       	brne	.+12     	; 0x2ad0 <RTC_not_leap+0x24>
	return (char)(year%400);
    2ac4:	c9 01       	movw	r24, r18
    2ac6:	60 e9       	ldi	r22, 0x90	; 144
    2ac8:	71 e0       	ldi	r23, 0x01	; 1
    2aca:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divmodhi4>
    2ace:	08 95       	ret
	else
	return (char)(year%4);
    2ad0:	23 70       	andi	r18, 0x03	; 3
    2ad2:	30 78       	andi	r19, 0x80	; 128
    2ad4:	33 23       	and	r19, r19
    2ad6:	34 f4       	brge	.+12     	; 0x2ae4 <RTC_not_leap+0x38>
    2ad8:	21 50       	subi	r18, 0x01	; 1
    2ada:	31 09       	sbc	r19, r1
    2adc:	2c 6f       	ori	r18, 0xFC	; 252
    2ade:	3f 6f       	ori	r19, 0xFF	; 255
    2ae0:	2f 5f       	subi	r18, 0xFF	; 255
    2ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae4:	82 2f       	mov	r24, r18
}
    2ae6:	08 95       	ret

00002ae8 <RTC_Loop>:
#include <stdlib.h>
#include "Timers/timers.h"
#include "RTClib/RTC.h"


void RTC_Loop(void){
    2ae8:	0f 93       	push	r16
    2aea:	1f 93       	push	r17
    2aec:	cf 93       	push	r28
	uint8_t _Pulse_1S;
	//uint8_t _Pulse_1S = Timers.Pulse_1s;
	if (RTC.Ext_Tim2){
    2aee:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <RTC+0xc>
    2af2:	88 23       	and	r24, r24
    2af4:	41 f0       	breq	.+16     	; 0x2b06 <RTC_Loop+0x1e>
		if(RTC.Ext_Tim2_1s){
    2af6:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <RTC+0xd>
    2afa:	88 23       	and	r24, r24
    2afc:	41 f0       	breq	.+16     	; 0x2b0e <RTC_Loop+0x26>
			_Pulse_1S		= 1;
			RTC.Ext_Tim2_1s	= 0;
    2afe:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <RTC+0xd>
void RTC_Loop(void){
	uint8_t _Pulse_1S;
	//uint8_t _Pulse_1S = Timers.Pulse_1s;
	if (RTC.Ext_Tim2){
		if(RTC.Ext_Tim2_1s){
			_Pulse_1S		= 1;
    2b02:	c1 e0       	ldi	r28, 0x01	; 1
    2b04:	05 c0       	rjmp	.+10     	; 0x2b10 <RTC_Loop+0x28>
		else{
			_Pulse_1S		= 0;
		} 
	}
	else{
		_Pulse_1S = Timer_Pulse_1s();
    2b06:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <Timer_Pulse_1s>
    2b0a:	c8 2f       	mov	r28, r24
    2b0c:	01 c0       	rjmp	.+2      	; 0x2b10 <RTC_Loop+0x28>
		if(RTC.Ext_Tim2_1s){
			_Pulse_1S		= 1;
			RTC.Ext_Tim2_1s	= 0;
		}
		else{
			_Pulse_1S		= 0;
    2b0e:	c0 e0       	ldi	r28, 0x00	; 0
	}
	else{
		_Pulse_1S = Timer_Pulse_1s();
	}
		
	switch(RTC.Status){
    2b10:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <RTC+0x7>
    2b14:	81 30       	cpi	r24, 0x01	; 1
    2b16:	41 f0       	breq	.+16     	; 0x2b28 <RTC_Loop+0x40>
    2b18:	08 f4       	brcc	.+2      	; 0x2b1c <RTC_Loop+0x34>
    2b1a:	2a c1       	rjmp	.+596    	; 0x2d70 <RTC_Loop+0x288>
    2b1c:	82 30       	cpi	r24, 0x02	; 2
    2b1e:	81 f0       	breq	.+32     	; 0x2b40 <RTC_Loop+0x58>
    2b20:	83 30       	cpi	r24, 0x03	; 3
    2b22:	09 f4       	brne	.+2      	; 0x2b26 <RTC_Loop+0x3e>
    2b24:	c3 c0       	rjmp	.+390    	; 0x2cac <RTC_Loop+0x1c4>
    2b26:	22 c1       	rjmp	.+580    	; 0x2d6c <RTC_Loop+0x284>
			//no init yet, do nothing
		}
		break;
		
		case Status_RTC_Init:{
			RTC.Init=RTC_Init_OK;
    2b28:	e2 ee       	ldi	r30, 0xE2	; 226
    2b2a:	f1 e0       	ldi	r31, 0x01	; 1
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	86 83       	std	Z+6, r24	; 0x06
			RTC.WorkInterval=1;
			RTC.IS_Sync=0;
    2b30:	13 86       	std	Z+11, r1	; 0x0b
			RTC.Sync_Type=RTC_GetSync;
    2b32:	82 e0       	ldi	r24, 0x02	; 2
    2b34:	82 87       	std	Z+10, r24	; 0x0a
			RTC.Status=Status_RTC_Sync;
    2b36:	83 e0       	ldi	r24, 0x03	; 3
    2b38:	87 83       	std	Z+7, r24	; 0x07
		default:{//something went wrong
			RTC.Status=Status_RTC_Idle;
		}//Default
		break;
	}//switch(RTC.Status)
	RTC.WorkInterval -= RTC.WorkInterval && _Pulse_1S;
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	1e c1       	rjmp	.+572    	; 0x2d7c <RTC_Loop+0x294>
		}//RTC_Init
		break;
		
		case Status_RTC_Run:{
			//1st see if we need to sync with an external time keeper
			if (RTC.Sync_Type==RTC_SetSync){
    2b40:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <RTC+0xa>
    2b44:	81 30       	cpi	r24, 0x01	; 1
    2b46:	21 f4       	brne	.+8      	; 0x2b50 <RTC_Loop+0x68>
				RTC.Status=Status_RTC_Sync;
    2b48:	83 e0       	ldi	r24, 0x03	; 3
    2b4a:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <RTC+0x7>
				break;
    2b4e:	10 c1       	rjmp	.+544    	; 0x2d70 <RTC_Loop+0x288>
			}
			else if (RTC.WorkInterval==0){
    2b50:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <RTC+0x24>
    2b54:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <RTC+0x25>
    2b58:	89 2b       	or	r24, r25
    2b5a:	c9 f4       	brne	.+50     	; 0x2b8e <RTC_Loop+0xa6>
				if (RTC.Interval>0){
    2b5c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <RTC+0x22>
    2b60:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <RTC+0x23>
    2b64:	18 16       	cp	r1, r24
    2b66:	19 06       	cpc	r1, r25
    2b68:	2c f4       	brge	.+10     	; 0x2b74 <RTC_Loop+0x8c>
					RTC.WorkInterval=RTC.Interval;
    2b6a:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <RTC+0x25>
    2b6e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <RTC+0x24>
    2b72:	06 c0       	rjmp	.+12     	; 0x2b80 <RTC_Loop+0x98>
				}
				else if (timeout){
					RTC.WorkInterval=timeout;
    2b74:	8a e0       	ldi	r24, 0x0A	; 10
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <RTC+0x25>
    2b7c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <RTC+0x24>
				}
				RTC.Sync_Type=RTC_GetSync;
    2b80:	e2 ee       	ldi	r30, 0xE2	; 226
    2b82:	f1 e0       	ldi	r31, 0x01	; 1
    2b84:	82 e0       	ldi	r24, 0x02	; 2
    2b86:	82 87       	std	Z+10, r24	; 0x0a
				RTC.Status=Status_RTC_Sync;
    2b88:	83 e0       	ldi	r24, 0x03	; 3
    2b8a:	87 83       	std	Z+7, r24	; 0x07
				break;
    2b8c:	f1 c0       	rjmp	.+482    	; 0x2d70 <RTC_Loop+0x288>
			}
			else if (RTC.Ext_Sync_Ready_Ptr() && !RTC.IS_Sync){
    2b8e:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <RTC+0xe>
    2b92:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <RTC+0xf>
    2b96:	09 95       	icall
    2b98:	88 23       	and	r24, r24
    2b9a:	01 f1       	breq	.+64     	; 0x2bdc <RTC_Loop+0xf4>
    2b9c:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <RTC+0xb>
    2ba0:	81 11       	cpse	r24, r1
    2ba2:	1c c0       	rjmp	.+56     	; 0x2bdc <RTC_Loop+0xf4>
				RTC.IS_Sync=1;
    2ba4:	e2 ee       	ldi	r30, 0xE2	; 226
    2ba6:	f1 e0       	ldi	r31, 0x01	; 1
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	83 87       	std	Z+11, r24	; 0x0b
				RTC.IS_TWLF=RTC.Get_Ext_IS_TWLF_Function_Ptr()>0;
    2bac:	06 88       	ldd	r0, Z+22	; 0x16
    2bae:	f7 89       	ldd	r31, Z+23	; 0x17
    2bb0:	e0 2d       	mov	r30, r0
    2bb2:	09 95       	icall
    2bb4:	91 e0       	ldi	r25, 0x01	; 1
    2bb6:	81 11       	cpse	r24, r1
    2bb8:	01 c0       	rjmp	.+2      	; 0x2bbc <RTC_Loop+0xd4>
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <RTC+0x8>
				if (RTC.IS_TWLF){
    2bc0:	88 23       	and	r24, r24
    2bc2:	61 f0       	breq	.+24     	; 0x2bdc <RTC_Loop+0xf4>
					RTC.IS_PM=RTC.Get_Ext_IS_PM_Function_Ptr()>0;
    2bc4:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <RTC+0x1a>
    2bc8:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <RTC+0x1b>
    2bcc:	fc 01       	movw	r30, r24
    2bce:	09 95       	icall
    2bd0:	91 e0       	ldi	r25, 0x01	; 1
    2bd2:	81 11       	cpse	r24, r1
    2bd4:	01 c0       	rjmp	.+2      	; 0x2bd8 <RTC_Loop+0xf0>
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <RTC+0x9>
				}
				
			}

			RTC.Time.Second += _Pulse_1S;
    2bdc:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <RTC>
    2be0:	8c 0f       	add	r24, r28
			//RTC.Time.Second += _Pulse_1S;
			//Update the time
			//if( _Pulse_1S>0 && RTC.Init>0){
				//RTC.Time.Second++;
				if (RTC.Time.Second>59){
    2be2:	8c 33       	cpi	r24, 0x3C	; 60
    2be4:	18 f4       	brcc	.+6      	; 0x2bec <RTC_Loop+0x104>
					RTC.IS_PM=RTC.Get_Ext_IS_PM_Function_Ptr()>0;
				}
				
			}

			RTC.Time.Second += _Pulse_1S;
    2be6:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <RTC>
    2bea:	c2 c0       	rjmp	.+388    	; 0x2d70 <RTC_Loop+0x288>
			//RTC.Time.Second += _Pulse_1S;
			//Update the time
			//if( _Pulse_1S>0 && RTC.Init>0){
				//RTC.Time.Second++;
				if (RTC.Time.Second>59){
					RTC.Time.Second=0;
    2bec:	e2 ee       	ldi	r30, 0xE2	; 226
    2bee:	f1 e0       	ldi	r31, 0x01	; 1
    2bf0:	10 82       	st	Z, r1
					if (++RTC.Time.Minute>59){
    2bf2:	81 81       	ldd	r24, Z+1	; 0x01
    2bf4:	8f 5f       	subi	r24, 0xFF	; 255
    2bf6:	8c 33       	cpi	r24, 0x3C	; 60
    2bf8:	18 f4       	brcc	.+6      	; 0x2c00 <RTC_Loop+0x118>
    2bfa:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <RTC+0x1>
    2bfe:	b8 c0       	rjmp	.+368    	; 0x2d70 <RTC_Loop+0x288>
						RTC.Time.Minute=0;
    2c00:	e2 ee       	ldi	r30, 0xE2	; 226
    2c02:	f1 e0       	ldi	r31, 0x01	; 1
    2c04:	11 82       	std	Z+1, r1	; 0x01
						RTC.Time.Hour++;
    2c06:	82 81       	ldd	r24, Z+2	; 0x02
    2c08:	8f 5f       	subi	r24, 0xFF	; 255
    2c0a:	82 83       	std	Z+2, r24	; 0x02
						uint8_t _Next_Day=0;
						if (RTC.IS_TWLF){
    2c0c:	90 85       	ldd	r25, Z+8	; 0x08
    2c0e:	99 23       	and	r25, r25
    2c10:	99 f0       	breq	.+38     	; 0x2c38 <RTC_Loop+0x150>
							if (RTC.IS_PM && RTC.Time.Hour>11){
    2c12:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <RTC+0x9>
    2c16:	99 23       	and	r25, r25
    2c18:	29 f0       	breq	.+10     	; 0x2c24 <RTC_Loop+0x13c>
    2c1a:	8c 30       	cpi	r24, 0x0C	; 12
    2c1c:	18 f0       	brcs	.+6      	; 0x2c24 <RTC_Loop+0x13c>
								RTC.Time.Hour=0;
    2c1e:	12 82       	std	Z+2, r1	; 0x02
								RTC.IS_PM=0;
    2c20:	11 86       	std	Z+9, r1	; 0x09
								_Next_Day++;
    2c22:	ba c0       	rjmp	.+372    	; 0x2d98 <RTC_Loop+0x2b0>
							}
							else if (RTC.Time.Hour>12){
    2c24:	8d 30       	cpi	r24, 0x0D	; 13
    2c26:	08 f4       	brcc	.+2      	; 0x2c2a <RTC_Loop+0x142>
    2c28:	a3 c0       	rjmp	.+326    	; 0x2d70 <RTC_Loop+0x288>
								RTC.Time.Hour=1;
    2c2a:	e2 ee       	ldi	r30, 0xE2	; 226
    2c2c:	f1 e0       	ldi	r31, 0x01	; 1
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	82 83       	std	Z+2, r24	; 0x02
								RTC.IS_PM++;
    2c32:	9f 5f       	subi	r25, 0xFF	; 255
    2c34:	91 87       	std	Z+9, r25	; 0x09
    2c36:	9c c0       	rjmp	.+312    	; 0x2d70 <RTC_Loop+0x288>
							}
						}
						else if (RTC.Time.Hour>23){
    2c38:	88 31       	cpi	r24, 0x18	; 24
    2c3a:	08 f4       	brcc	.+2      	; 0x2c3e <RTC_Loop+0x156>
    2c3c:	99 c0       	rjmp	.+306    	; 0x2d70 <RTC_Loop+0x288>
							RTC.Time.Hour=0;
    2c3e:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <RTC+0x2>
    2c42:	aa c0       	rjmp	.+340    	; 0x2d98 <RTC_Loop+0x2b0>
						}
						if (_Next_Day){
							uint8_t _Next_Month=0;
							RTC.Date.Day++;
							if (RTC.Date.Month==2){
								if (RTC.Date.Day>=28 && RTC_not_leap()){
    2c44:	1c 31       	cpi	r17, 0x1C	; 28
    2c46:	40 f0       	brcs	.+16     	; 0x2c58 <RTC_Loop+0x170>
    2c48:	0e 94 56 15 	call	0x2aac	; 0x2aac <RTC_not_leap>
    2c4c:	88 23       	and	r24, r24
    2c4e:	21 f0       	breq	.+8      	; 0x2c58 <RTC_Loop+0x170>
									RTC.Date.Day=1;
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <RTC+0x3>
									_Next_Month++;
    2c56:	b1 c0       	rjmp	.+354    	; 0x2dba <RTC_Loop+0x2d2>
								}
								else if (RTC.Date.Day>=29){
    2c58:	1d 31       	cpi	r17, 0x1D	; 29
    2c5a:	08 f4       	brcc	.+2      	; 0x2c5e <RTC_Loop+0x176>
    2c5c:	89 c0       	rjmp	.+274    	; 0x2d70 <RTC_Loop+0x288>
									RTC.Date.Day=1;
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <RTC+0x3>
    2c64:	aa c0       	rjmp	.+340    	; 0x2dba <RTC_Loop+0x2d2>
									_Next_Month++;
								}
							}
							else if (RTC.Date.Day>=30 && (RTC.Date.Month==4 || RTC.Date.Month==7 || RTC.Date.Month==9 || RTC.Date.Month==11)){
    2c66:	1e 31       	cpi	r17, 0x1E	; 30
    2c68:	60 f0       	brcs	.+24     	; 0x2c82 <RTC_Loop+0x19a>
    2c6a:	04 30       	cpi	r16, 0x04	; 4
    2c6c:	31 f0       	breq	.+12     	; 0x2c7a <RTC_Loop+0x192>
    2c6e:	07 30       	cpi	r16, 0x07	; 7
    2c70:	21 f0       	breq	.+8      	; 0x2c7a <RTC_Loop+0x192>
    2c72:	80 2f       	mov	r24, r16
    2c74:	8d 7f       	andi	r24, 0xFD	; 253
    2c76:	89 30       	cpi	r24, 0x09	; 9
    2c78:	21 f4       	brne	.+8      	; 0x2c82 <RTC_Loop+0x19a>
									RTC.Date.Day=1;
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <RTC+0x3>
									_Next_Month++;
    2c80:	95 c0       	rjmp	.+298    	; 0x2dac <RTC_Loop+0x2c4>
							}
							else if (RTC.Date.Day>=31){
    2c82:	1f 31       	cpi	r17, 0x1F	; 31
    2c84:	08 f4       	brcc	.+2      	; 0x2c88 <RTC_Loop+0x1a0>
    2c86:	74 c0       	rjmp	.+232    	; 0x2d70 <RTC_Loop+0x288>
									RTC.Date.Day=1;
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <RTC+0x3>
    2c8e:	8e c0       	rjmp	.+284    	; 0x2dac <RTC_Loop+0x2c4>
									_Next_Month++;
							}
							if (_Next_Month){
								if (++RTC.Date.Month>12){
									RTC.Date.Month=1;
    2c90:	e2 ee       	ldi	r30, 0xE2	; 226
    2c92:	f1 e0       	ldi	r31, 0x01	; 1
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	84 83       	std	Z+4, r24	; 0x04
									if (++RTC.Date.Year>99){
    2c98:	85 81       	ldd	r24, Z+5	; 0x05
    2c9a:	8f 5f       	subi	r24, 0xFF	; 255
    2c9c:	84 36       	cpi	r24, 0x64	; 100
    2c9e:	18 f4       	brcc	.+6      	; 0x2ca6 <RTC_Loop+0x1be>
    2ca0:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <RTC+0x5>
    2ca4:	65 c0       	rjmp	.+202    	; 0x2d70 <RTC_Loop+0x288>
										RTC.Date.Year=0;
    2ca6:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <RTC+0x5>
    2caa:	62 c0       	rjmp	.+196    	; 0x2d70 <RTC_Loop+0x288>
			//}//if(Timers.Pulse_1s && RTC.Init)
		}//RTC_Run
		break;
		
		case Status_RTC_Sync:{//we need to sync with whatever we need to sync with.
			if(RTC.Ext_Sync_Ready_Ptr>0 && RTC.Ext_Sync_Ready_Ptr()){
    2cac:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <RTC+0xe>
    2cb0:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <RTC+0xf>
    2cb4:	30 97       	sbiw	r30, 0x00	; 0
    2cb6:	09 f4       	brne	.+2      	; 0x2cba <RTC_Loop+0x1d2>
    2cb8:	52 c0       	rjmp	.+164    	; 0x2d5e <RTC_Loop+0x276>
    2cba:	09 95       	icall
    2cbc:	88 23       	and	r24, r24
    2cbe:	09 f4       	brne	.+2      	; 0x2cc2 <RTC_Loop+0x1da>
    2cc0:	4e c0       	rjmp	.+156    	; 0x2d5e <RTC_Loop+0x276>
				if (RTC.Get_Ext_IS_Enable_Function_Ptr>0 && RTC.Get_Ext_IS_Enable_Function_Ptr()==0 && RTC.Set_Ext_Enable_Function_Ptr>0){
    2cc2:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <RTC+0x1c>
    2cc6:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <RTC+0x1d>
    2cca:	30 97       	sbiw	r30, 0x00	; 0
    2ccc:	51 f0       	breq	.+20     	; 0x2ce2 <RTC_Loop+0x1fa>
    2cce:	09 95       	icall
    2cd0:	81 11       	cpse	r24, r1
    2cd2:	07 c0       	rjmp	.+14     	; 0x2ce2 <RTC_Loop+0x1fa>
    2cd4:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <RTC+0x1e>
    2cd8:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <RTC+0x1f>
    2cdc:	30 97       	sbiw	r30, 0x00	; 0
    2cde:	09 f0       	breq	.+2      	; 0x2ce2 <RTC_Loop+0x1fa>
					RTC.Set_Ext_Enable_Function_Ptr();
    2ce0:	09 95       	icall
				}
				if (RTC.Set_Ext_Time_Function_Ptr>0 && RTC.Sync_Type==RTC_SetSync){
    2ce2:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <RTC+0x10>
    2ce6:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <RTC+0x11>
    2cea:	30 97       	sbiw	r30, 0x00	; 0
    2cec:	d1 f0       	breq	.+52     	; 0x2d22 <RTC_Loop+0x23a>
    2cee:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <RTC+0xa>
    2cf2:	81 30       	cpi	r24, 0x01	; 1
    2cf4:	b1 f4       	brne	.+44     	; 0x2d22 <RTC_Loop+0x23a>
					RTC.Set_Ext_Time_Function_Ptr((uint8_t *) &RTC.Time.Second);
    2cf6:	82 ee       	ldi	r24, 0xE2	; 226
    2cf8:	91 e0       	ldi	r25, 0x01	; 1
    2cfa:	09 95       	icall
					RTC.Set_Ext_IS_PM_Function_Ptr(RTC.IS_PM);
    2cfc:	02 ee       	ldi	r16, 0xE2	; 226
    2cfe:	11 e0       	ldi	r17, 0x01	; 1
    2d00:	d8 01       	movw	r26, r16
    2d02:	58 96       	adiw	r26, 0x18	; 24
    2d04:	ed 91       	ld	r30, X+
    2d06:	fc 91       	ld	r31, X
    2d08:	59 97       	sbiw	r26, 0x19	; 25
    2d0a:	19 96       	adiw	r26, 0x09	; 9
    2d0c:	8c 91       	ld	r24, X
    2d0e:	09 95       	icall
					RTC.Set_Ext_IS_TWLF_Function_Ptr(RTC.IS_TWLF);
    2d10:	d8 01       	movw	r26, r16
    2d12:	54 96       	adiw	r26, 0x14	; 20
    2d14:	ed 91       	ld	r30, X+
    2d16:	fc 91       	ld	r31, X
    2d18:	55 97       	sbiw	r26, 0x15	; 21
    2d1a:	18 96       	adiw	r26, 0x08	; 8
    2d1c:	8c 91       	ld	r24, X
    2d1e:	09 95       	icall
    2d20:	1e c0       	rjmp	.+60     	; 0x2d5e <RTC_Loop+0x276>
				}
				else if (RTC.Get_Ext_Time_Function_Ptr>0 && RTC.Sync_Type==RTC_GetSync){
    2d22:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <RTC+0x12>
    2d26:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <RTC+0x13>
    2d2a:	30 97       	sbiw	r30, 0x00	; 0
    2d2c:	c1 f0       	breq	.+48     	; 0x2d5e <RTC_Loop+0x276>
    2d2e:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <RTC+0xa>
    2d32:	82 30       	cpi	r24, 0x02	; 2
    2d34:	a1 f4       	brne	.+40     	; 0x2d5e <RTC_Loop+0x276>
					RTC.Get_Ext_Time_Function_Ptr((uint8_t *) &RTC.Time.Second);
    2d36:	82 ee       	ldi	r24, 0xE2	; 226
    2d38:	91 e0       	ldi	r25, 0x01	; 1
    2d3a:	09 95       	icall
					RTC.IS_PM=RTC.Get_Ext_IS_PM_Function_Ptr();
    2d3c:	02 ee       	ldi	r16, 0xE2	; 226
    2d3e:	11 e0       	ldi	r17, 0x01	; 1
    2d40:	d8 01       	movw	r26, r16
    2d42:	5a 96       	adiw	r26, 0x1a	; 26
    2d44:	ed 91       	ld	r30, X+
    2d46:	fc 91       	ld	r31, X
    2d48:	5b 97       	sbiw	r26, 0x1b	; 27
    2d4a:	09 95       	icall
    2d4c:	f8 01       	movw	r30, r16
    2d4e:	81 87       	std	Z+9, r24	; 0x09
					RTC.IS_TWLF=RTC.Get_Ext_IS_TWLF_Function_Ptr();
    2d50:	06 88       	ldd	r0, Z+22	; 0x16
    2d52:	f7 89       	ldd	r31, Z+23	; 0x17
    2d54:	e0 2d       	mov	r30, r0
    2d56:	09 95       	icall
    2d58:	d8 01       	movw	r26, r16
    2d5a:	18 96       	adiw	r26, 0x08	; 8
    2d5c:	8c 93       	st	X, r24
				}
			}
			//Even if the external sync fails, keep running the RTC
			RTC.Sync_Type=RTC_SyncIdle;
    2d5e:	e2 ee       	ldi	r30, 0xE2	; 226
    2d60:	f1 e0       	ldi	r31, 0x01	; 1
    2d62:	12 86       	std	Z+10, r1	; 0x0a
			RTC.IS_Sync=0;
    2d64:	13 86       	std	Z+11, r1	; 0x0b
			RTC.Status=Status_RTC_Run;
    2d66:	82 e0       	ldi	r24, 0x02	; 2
    2d68:	87 83       	std	Z+7, r24	; 0x07
		}//RTC_Sync
		break;
    2d6a:	02 c0       	rjmp	.+4      	; 0x2d70 <RTC_Loop+0x288>
		
		default:{//something went wrong
			RTC.Status=Status_RTC_Idle;
    2d6c:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <RTC+0x7>
		}//Default
		break;
	}//switch(RTC.Status)
	RTC.WorkInterval -= RTC.WorkInterval && _Pulse_1S;
    2d70:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <RTC+0x24>
    2d74:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <RTC+0x25>
    2d78:	00 97       	sbiw	r24, 0x00	; 0
    2d7a:	11 f0       	breq	.+4      	; 0x2d80 <RTC_Loop+0x298>
    2d7c:	c1 11       	cpse	r28, r1
    2d7e:	03 c0       	rjmp	.+6      	; 0x2d86 <RTC_Loop+0x29e>
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	02 c0       	rjmp	.+4      	; 0x2d8a <RTC_Loop+0x2a2>
    2d86:	21 e0       	ldi	r18, 0x01	; 1
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	82 1b       	sub	r24, r18
    2d8c:	93 0b       	sbc	r25, r19
    2d8e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <RTC+0x25>
    2d92:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <RTC+0x24>
}//RTC_Loop()
    2d96:	13 c0       	rjmp	.+38     	; 0x2dbe <RTC_Loop+0x2d6>
							RTC.Time.Hour=0;
							_Next_Day++;
						}
						if (_Next_Day){
							uint8_t _Next_Month=0;
							RTC.Date.Day++;
    2d98:	e2 ee       	ldi	r30, 0xE2	; 226
    2d9a:	f1 e0       	ldi	r31, 0x01	; 1
    2d9c:	13 81       	ldd	r17, Z+3	; 0x03
    2d9e:	1f 5f       	subi	r17, 0xFF	; 255
    2da0:	13 83       	std	Z+3, r17	; 0x03
							if (RTC.Date.Month==2){
    2da2:	04 81       	ldd	r16, Z+4	; 0x04
    2da4:	02 30       	cpi	r16, 0x02	; 2
    2da6:	09 f0       	breq	.+2      	; 0x2daa <RTC_Loop+0x2c2>
    2da8:	5e cf       	rjmp	.-324    	; 0x2c66 <RTC_Loop+0x17e>
    2daa:	4c cf       	rjmp	.-360    	; 0x2c44 <RTC_Loop+0x15c>
							else if (RTC.Date.Day>=31){
									RTC.Date.Day=1;
									_Next_Month++;
							}
							if (_Next_Month){
								if (++RTC.Date.Month>12){
    2dac:	0f 5f       	subi	r16, 0xFF	; 255
    2dae:	0d 30       	cpi	r16, 0x0D	; 13
    2db0:	08 f0       	brcs	.+2      	; 0x2db4 <RTC_Loop+0x2cc>
    2db2:	6e cf       	rjmp	.-292    	; 0x2c90 <RTC_Loop+0x1a8>
    2db4:	00 93 e6 01 	sts	0x01E6, r16	; 0x8001e6 <RTC+0x4>
    2db8:	db cf       	rjmp	.-74     	; 0x2d70 <RTC_Loop+0x288>
    2dba:	0f 5f       	subi	r16, 0xFF	; 255
    2dbc:	fb cf       	rjmp	.-10     	; 0x2db4 <RTC_Loop+0x2cc>
			RTC.Status=Status_RTC_Idle;
		}//Default
		break;
	}//switch(RTC.Status)
	RTC.WorkInterval -= RTC.WorkInterval && _Pulse_1S;
}//RTC_Loop()
    2dbe:	cf 91       	pop	r28
    2dc0:	1f 91       	pop	r17
    2dc2:	0f 91       	pop	r16
    2dc4:	08 95       	ret

00002dc6 <RTC_Set_DateTime>:

void RTC_Set_DateTime(uint8_t _Second, uint8_t _Minute, uint8_t _Hour, uint8_t _Day, uint8_t _Month, uint8_t _Year){
    2dc6:	ef 92       	push	r14
    2dc8:	0f 93       	push	r16
    2dca:	cf 93       	push	r28
	//Time values
	//Set the given seconds
	if(_Second<60){//Check if the value is not out of bound.
    2dcc:	8c 33       	cpi	r24, 0x3C	; 60
    2dce:	10 f4       	brcc	.+4      	; 0x2dd4 <RTC_Set_DateTime+0xe>
		RTC.Time.Second=_Second;
    2dd0:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <RTC>
	}
	//Set the given minutes
	if (_Minute<60){//Check if the value is not out of bound.
    2dd4:	6c 33       	cpi	r22, 0x3C	; 60
    2dd6:	10 f4       	brcc	.+4      	; 0x2ddc <RTC_Set_DateTime+0x16>
		RTC.Time.Minute=_Minute;
    2dd8:	60 93 e3 01 	sts	0x01E3, r22	; 0x8001e3 <RTC+0x1>
	}
	//Set the given hour
	if (!RTC.IS_TWLF && _Hour<24){//Check if the value is not out of bound.
    2ddc:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <RTC+0x8>
    2de0:	81 11       	cpse	r24, r1
    2de2:	05 c0       	rjmp	.+10     	; 0x2dee <RTC_Set_DateTime+0x28>
    2de4:	48 31       	cpi	r20, 0x18	; 24
    2de6:	18 f4       	brcc	.+6      	; 0x2dee <RTC_Set_DateTime+0x28>
		RTC.Time.Hour=_Hour;
    2de8:	40 93 e4 01 	sts	0x01E4, r20	; 0x8001e4 <RTC+0x2>
    2dec:	0d c0       	rjmp	.+26     	; 0x2e08 <RTC_Set_DateTime+0x42>
	}
	else if (RTC.IS_PM && _Hour<12){
    2dee:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <RTC+0x9>
    2df2:	88 23       	and	r24, r24
    2df4:	29 f0       	breq	.+10     	; 0x2e00 <RTC_Set_DateTime+0x3a>
    2df6:	4c 30       	cpi	r20, 0x0C	; 12
    2df8:	38 f4       	brcc	.+14     	; 0x2e08 <RTC_Set_DateTime+0x42>
		RTC.Time.Hour=_Hour;
    2dfa:	40 93 e4 01 	sts	0x01E4, r20	; 0x8001e4 <RTC+0x2>
    2dfe:	04 c0       	rjmp	.+8      	; 0x2e08 <RTC_Set_DateTime+0x42>
	}
	else if(!RTC.IS_PM && _Hour<13){
    2e00:	4d 30       	cpi	r20, 0x0D	; 13
    2e02:	10 f4       	brcc	.+4      	; 0x2e08 <RTC_Set_DateTime+0x42>
		RTC.Time.Hour=_Hour;
    2e04:	40 93 e4 01 	sts	0x01E4, r20	; 0x8001e4 <RTC+0x2>
	}
	
	//Date values
	//Set the given year
	if (_Year<100){
    2e08:	83 e6       	ldi	r24, 0x63	; 99
    2e0a:	8e 15       	cp	r24, r14
    2e0c:	10 f0       	brcs	.+4      	; 0x2e12 <RTC_Set_DateTime+0x4c>
		RTC.Date.Year=_Year;
    2e0e:	e0 92 e7 01 	sts	0x01E7, r14	; 0x8001e7 <RTC+0x5>
	}
	//Set the given month
	if (_Month<13){
    2e12:	0d 30       	cpi	r16, 0x0D	; 13
    2e14:	10 f4       	brcc	.+4      	; 0x2e1a <RTC_Set_DateTime+0x54>
		RTC.Date.Month=_Month;
    2e16:	00 93 e6 01 	sts	0x01E6, r16	; 0x8001e6 <RTC+0x4>
	}
	//set the given day
	if (RTC.Date.Month==2){
    2e1a:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <RTC+0x4>
    2e1e:	82 30       	cpi	r24, 0x02	; 2
    2e20:	79 f4       	brne	.+30     	; 0x2e40 <RTC_Set_DateTime+0x7a>
    2e22:	c2 2f       	mov	r28, r18
		if (RTC_not_leap() && _Day<29){
    2e24:	0e 94 56 15 	call	0x2aac	; 0x2aac <RTC_not_leap>
    2e28:	88 23       	and	r24, r24
    2e2a:	29 f0       	breq	.+10     	; 0x2e36 <RTC_Set_DateTime+0x70>
    2e2c:	cd 31       	cpi	r28, 0x1D	; 29
    2e2e:	18 f4       	brcc	.+6      	; 0x2e36 <RTC_Set_DateTime+0x70>
			RTC.Date.Day=_Day;
    2e30:	c0 93 e5 01 	sts	0x01E5, r28	; 0x8001e5 <RTC+0x3>
    2e34:	15 c0       	rjmp	.+42     	; 0x2e60 <RTC_Set_DateTime+0x9a>
		}
		else if (_Day<30){
    2e36:	ce 31       	cpi	r28, 0x1E	; 30
    2e38:	98 f4       	brcc	.+38     	; 0x2e60 <RTC_Set_DateTime+0x9a>
			RTC.Date.Day=_Day;
    2e3a:	c0 93 e5 01 	sts	0x01E5, r28	; 0x8001e5 <RTC+0x3>
    2e3e:	10 c0       	rjmp	.+32     	; 0x2e60 <RTC_Set_DateTime+0x9a>
		}
	}
	else if (_Day<31 && (RTC.Date.Month==4 || RTC.Date.Month==7 || RTC.Date.Month==9 || RTC.Date.Month==11)){
    2e40:	2f 31       	cpi	r18, 0x1F	; 31
    2e42:	50 f4       	brcc	.+20     	; 0x2e58 <RTC_Set_DateTime+0x92>
    2e44:	84 30       	cpi	r24, 0x04	; 4
    2e46:	29 f0       	breq	.+10     	; 0x2e52 <RTC_Set_DateTime+0x8c>
    2e48:	87 30       	cpi	r24, 0x07	; 7
    2e4a:	19 f0       	breq	.+6      	; 0x2e52 <RTC_Set_DateTime+0x8c>
    2e4c:	8d 7f       	andi	r24, 0xFD	; 253
    2e4e:	89 30       	cpi	r24, 0x09	; 9
    2e50:	19 f4       	brne	.+6      	; 0x2e58 <RTC_Set_DateTime+0x92>
		RTC.Date.Day=_Day;
    2e52:	20 93 e5 01 	sts	0x01E5, r18	; 0x8001e5 <RTC+0x3>
    2e56:	04 c0       	rjmp	.+8      	; 0x2e60 <RTC_Set_DateTime+0x9a>
	}
	else if (_Day<32){
    2e58:	20 32       	cpi	r18, 0x20	; 32
    2e5a:	10 f4       	brcc	.+4      	; 0x2e60 <RTC_Set_DateTime+0x9a>
		RTC.Date.Day=_Day;
    2e5c:	20 93 e5 01 	sts	0x01E5, r18	; 0x8001e5 <RTC+0x3>
	}
	//RTC has been updated, sync it with an external device if needed
	RTC.Sync_Type=RTC_SetSync;
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <RTC+0xa>
	//RTC.Status=Status_RTC_Sync;
}//RTC_Set_DateTime
    2e66:	cf 91       	pop	r28
    2e68:	0f 91       	pop	r16
    2e6a:	ef 90       	pop	r14
    2e6c:	08 95       	ret

00002e6e <__vector_9>:
	return (char)(year%400);
	else
	return (char)(year%4);
}

ISR(TIMER2_OVF_vect){
    2e6e:	1f 92       	push	r1
    2e70:	0f 92       	push	r0
    2e72:	0f b6       	in	r0, 0x3f	; 63
    2e74:	0f 92       	push	r0
    2e76:	11 24       	eor	r1, r1
    2e78:	8f 93       	push	r24
    2e7a:	ef 93       	push	r30
    2e7c:	ff 93       	push	r31
	RTC.Ext_Tim2_1s++;
    2e7e:	e2 ee       	ldi	r30, 0xE2	; 226
    2e80:	f1 e0       	ldi	r31, 0x01	; 1
    2e82:	85 85       	ldd	r24, Z+13	; 0x0d
    2e84:	8f 5f       	subi	r24, 0xFF	; 255
    2e86:	85 87       	std	Z+13, r24	; 0x0d
}
    2e88:	ff 91       	pop	r31
    2e8a:	ef 91       	pop	r30
    2e8c:	8f 91       	pop	r24
    2e8e:	0f 90       	pop	r0
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	0f 90       	pop	r0
    2e94:	1f 90       	pop	r1
    2e96:	18 95       	reti

00002e98 <Timer_Init>:

}

void Timer_Init(void){
	//TCCR0	|=	(1 << WGM01);//CTC mode
	Timer_TCCR_A			= Timer_TCCR_A_Setting;//See timers.h file for settings
    2e98:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	#ifdef Timer_TCCR_B
	Timer_TCCR_B			= Timer_TCCR_B_Setting;
    2e9c:	89 e0       	ldi	r24, 0x09	; 9
    2e9e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	#endif
	#ifdef Timer_TCCR_C
	Timer_TCCR_C			= Timer_TCCR_C_Setting;
    2ea2:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	#endif
	Timer_TIMSK 			|= (1 << Timer_Overflow_Interrupt);//Enable interrupt
    2ea6:	ef e6       	ldi	r30, 0x6F	; 111
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	80 81       	ld	r24, Z
    2eac:	82 60       	ori	r24, 0x02	; 2
    2eae:	80 83       	st	Z, r24
	Timer_Counter_Register	=  Timer_Reload; //Overflow value
    2eb0:	8f e3       	ldi	r24, 0x3F	; 63
    2eb2:	9f e1       	ldi	r25, 0x1F	; 31
    2eb4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2eb8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	Timer_TIFR				= (1<<Timer_Mask_Bit1)|(1<<Timer_Mask_Bit2);
    2ebc:	84 e2       	ldi	r24, 0x24	; 36
    2ebe:	86 bb       	out	0x16, r24	; 22
    2ec0:	08 95       	ret

00002ec2 <Pulse_reset>:
}

void Pulse_reset(void){
	//Timers.Pulse_100us = 0;
	Timers.Pulse_1ms = 0;
    2ec2:	ed e0       	ldi	r30, 0x0D	; 13
    2ec4:	f2 e0       	ldi	r31, 0x02	; 2
    2ec6:	10 82       	st	Z, r1
	Timers.Pulse_10ms = 0;
    2ec8:	11 82       	std	Z+1, r1	; 0x01
	Timers.Pulse_100ms = 0;
    2eca:	12 82       	std	Z+2, r1	; 0x02
	Timers.Pulse_1s = 0;
    2ecc:	13 82       	std	Z+3, r1	; 0x03
    2ece:	08 95       	ret

00002ed0 <Timer_loop>:
Timers_struct Timers;

void Timer_loop (void)
{
	//First reset the timers
	Pulse_reset();
    2ed0:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <Pulse_reset>
	
	if(Timer_Flank > 0)
    2ed4:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <Timer_Flank>
    2ed8:	88 23       	and	r24, r24
    2eda:	59 f1       	breq	.+86     	; 0x2f32 <Timer_loop+0x62>
	{
		Timer_Flank = 0;
    2edc:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <Timer_Flank>
		Timers.Pulse_1ms=1;
    2ee0:	ed e0       	ldi	r30, 0x0D	; 13
    2ee2:	f2 e0       	ldi	r31, 0x02	; 2
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	80 83       	st	Z, r24
		//Timers.Count_1ms++;
		Timers.Count_10ms++;
    2ee8:	44 81       	ldd	r20, Z+4	; 0x04
    2eea:	4f 5f       	subi	r20, 0xFF	; 255
    2eec:	44 83       	std	Z+4, r20	; 0x04
		Timers.Count_100ms++;
    2eee:	25 81       	ldd	r18, Z+5	; 0x05
    2ef0:	36 81       	ldd	r19, Z+6	; 0x06
    2ef2:	2f 5f       	subi	r18, 0xFF	; 255
    2ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef6:	36 83       	std	Z+6, r19	; 0x06
    2ef8:	25 83       	std	Z+5, r18	; 0x05
		Timers.Count_1s++;
    2efa:	87 81       	ldd	r24, Z+7	; 0x07
    2efc:	90 85       	ldd	r25, Z+8	; 0x08
    2efe:	01 96       	adiw	r24, 0x01	; 1
    2f00:	90 87       	std	Z+8, r25	; 0x08
    2f02:	87 83       	std	Z+7, r24	; 0x07

		//if (Timers.Count_1ms > 9){
		//	Timers.Count_1ms=0;
		//	Timers.Pulse_1ms=1;
		//}
		if(Timers.Count_10ms > 9){
    2f04:	4a 30       	cpi	r20, 0x0A	; 10
    2f06:	18 f0       	brcs	.+6      	; 0x2f0e <Timer_loop+0x3e>
			Timers.Count_10ms = 0;
    2f08:	14 82       	std	Z+4, r1	; 0x04
			Timers.Pulse_10ms = 1;
    2f0a:	41 e0       	ldi	r20, 0x01	; 1
    2f0c:	41 83       	std	Z+1, r20	; 0x01
		}
		if(Timers.Count_100ms > 99){
    2f0e:	24 36       	cpi	r18, 0x64	; 100
    2f10:	31 05       	cpc	r19, r1
    2f12:	30 f0       	brcs	.+12     	; 0x2f20 <Timer_loop+0x50>
			Timers.Count_100ms = 0;
    2f14:	ed e0       	ldi	r30, 0x0D	; 13
    2f16:	f2 e0       	ldi	r31, 0x02	; 2
    2f18:	16 82       	std	Z+6, r1	; 0x06
    2f1a:	15 82       	std	Z+5, r1	; 0x05
			Timers.Pulse_100ms = 1;
    2f1c:	21 e0       	ldi	r18, 0x01	; 1
    2f1e:	22 83       	std	Z+2, r18	; 0x02
		}
		if(Timers.Count_1s > 999){
    2f20:	88 3e       	cpi	r24, 0xE8	; 232
    2f22:	93 40       	sbci	r25, 0x03	; 3
    2f24:	30 f0       	brcs	.+12     	; 0x2f32 <Timer_loop+0x62>
			Timers.Count_1s = 0;
    2f26:	ed e0       	ldi	r30, 0x0D	; 13
    2f28:	f2 e0       	ldi	r31, 0x02	; 2
    2f2a:	10 86       	std	Z+8, r1	; 0x08
    2f2c:	17 82       	std	Z+7, r1	; 0x07
			Timers.Pulse_1s = 1;
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	83 83       	std	Z+3, r24	; 0x03
    2f32:	08 95       	ret

00002f34 <Timer_Pulse_1ms>:
//	return Timers.Pulse_100us;
//}

uint8_t Timer_Pulse_1ms(void){
	return Timers.Pulse_1ms;
}
    2f34:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <Timers>
    2f38:	08 95       	ret

00002f3a <Timer_Pulse_10ms>:

uint8_t Timer_Pulse_10ms(void){
	return Timers.Pulse_10ms;
}
    2f3a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Timers+0x1>
    2f3e:	08 95       	ret

00002f40 <Timer_Pulse_100ms>:

uint8_t Timer_Pulse_100ms(void){
	return Timers.Pulse_100ms;
}
    2f40:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <Timers+0x2>
    2f44:	08 95       	ret

00002f46 <Timer_Pulse_1s>:

uint8_t Timer_Pulse_1s(void){
	return Timers.Pulse_1s;
}
    2f46:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <Timers+0x3>
    2f4a:	08 95       	ret

00002f4c <__vector_11>:

ISR(Timer_Overvlow_Vector){
    2f4c:	1f 92       	push	r1
    2f4e:	0f 92       	push	r0
    2f50:	0f b6       	in	r0, 0x3f	; 63
    2f52:	0f 92       	push	r0
    2f54:	11 24       	eor	r1, r1
    2f56:	8f 93       	push	r24
	//Timer_Counter_Register=Timer_Reload; //Overflow value
	Timer_Flank++;
    2f58:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <Timer_Flank>
    2f5c:	8f 5f       	subi	r24, 0xFF	; 255
    2f5e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Timer_Flank>
	//TIFR0 |= (1<<OCF0A)|(1<<OCF0B)|(1<<TOV0);
}
    2f62:	8f 91       	pop	r24
    2f64:	0f 90       	pop	r0
    2f66:	0f be       	out	0x3f, r0	; 63
    2f68:	0f 90       	pop	r0
    2f6a:	1f 90       	pop	r1
    2f6c:	18 95       	reti

00002f6e <__divmodhi4>:
    2f6e:	97 fb       	bst	r25, 7
    2f70:	07 2e       	mov	r0, r23
    2f72:	16 f4       	brtc	.+4      	; 0x2f78 <__divmodhi4+0xa>
    2f74:	00 94       	com	r0
    2f76:	07 d0       	rcall	.+14     	; 0x2f86 <__divmodhi4_neg1>
    2f78:	77 fd       	sbrc	r23, 7
    2f7a:	09 d0       	rcall	.+18     	; 0x2f8e <__divmodhi4_neg2>
    2f7c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__udivmodhi4>
    2f80:	07 fc       	sbrc	r0, 7
    2f82:	05 d0       	rcall	.+10     	; 0x2f8e <__divmodhi4_neg2>
    2f84:	3e f4       	brtc	.+14     	; 0x2f94 <__divmodhi4_exit>

00002f86 <__divmodhi4_neg1>:
    2f86:	90 95       	com	r25
    2f88:	81 95       	neg	r24
    2f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f8c:	08 95       	ret

00002f8e <__divmodhi4_neg2>:
    2f8e:	70 95       	com	r23
    2f90:	61 95       	neg	r22
    2f92:	7f 4f       	sbci	r23, 0xFF	; 255

00002f94 <__divmodhi4_exit>:
    2f94:	08 95       	ret

00002f96 <__tablejump2__>:
    2f96:	ee 0f       	add	r30, r30
    2f98:	ff 1f       	adc	r31, r31
    2f9a:	05 90       	lpm	r0, Z+
    2f9c:	f4 91       	lpm	r31, Z
    2f9e:	e0 2d       	mov	r30, r0
    2fa0:	09 94       	ijmp

00002fa2 <__umulhisi3>:
    2fa2:	a2 9f       	mul	r26, r18
    2fa4:	b0 01       	movw	r22, r0
    2fa6:	b3 9f       	mul	r27, r19
    2fa8:	c0 01       	movw	r24, r0
    2faa:	a3 9f       	mul	r26, r19
    2fac:	70 0d       	add	r23, r0
    2fae:	81 1d       	adc	r24, r1
    2fb0:	11 24       	eor	r1, r1
    2fb2:	91 1d       	adc	r25, r1
    2fb4:	b2 9f       	mul	r27, r18
    2fb6:	70 0d       	add	r23, r0
    2fb8:	81 1d       	adc	r24, r1
    2fba:	11 24       	eor	r1, r1
    2fbc:	91 1d       	adc	r25, r1
    2fbe:	08 95       	ret

00002fc0 <__udivmodhi4>:
    2fc0:	aa 1b       	sub	r26, r26
    2fc2:	bb 1b       	sub	r27, r27
    2fc4:	51 e1       	ldi	r21, 0x11	; 17
    2fc6:	07 c0       	rjmp	.+14     	; 0x2fd6 <__udivmodhi4_ep>

00002fc8 <__udivmodhi4_loop>:
    2fc8:	aa 1f       	adc	r26, r26
    2fca:	bb 1f       	adc	r27, r27
    2fcc:	a6 17       	cp	r26, r22
    2fce:	b7 07       	cpc	r27, r23
    2fd0:	10 f0       	brcs	.+4      	; 0x2fd6 <__udivmodhi4_ep>
    2fd2:	a6 1b       	sub	r26, r22
    2fd4:	b7 0b       	sbc	r27, r23

00002fd6 <__udivmodhi4_ep>:
    2fd6:	88 1f       	adc	r24, r24
    2fd8:	99 1f       	adc	r25, r25
    2fda:	5a 95       	dec	r21
    2fdc:	a9 f7       	brne	.-22     	; 0x2fc8 <__udivmodhi4_loop>
    2fde:	80 95       	com	r24
    2fe0:	90 95       	com	r25
    2fe2:	bc 01       	movw	r22, r24
    2fe4:	cd 01       	movw	r24, r26
    2fe6:	08 95       	ret

00002fe8 <memcmp>:
    2fe8:	fb 01       	movw	r30, r22
    2fea:	dc 01       	movw	r26, r24
    2fec:	04 c0       	rjmp	.+8      	; 0x2ff6 <memcmp+0xe>
    2fee:	8d 91       	ld	r24, X+
    2ff0:	01 90       	ld	r0, Z+
    2ff2:	80 19       	sub	r24, r0
    2ff4:	21 f4       	brne	.+8      	; 0x2ffe <memcmp+0x16>
    2ff6:	41 50       	subi	r20, 0x01	; 1
    2ff8:	50 40       	sbci	r21, 0x00	; 0
    2ffa:	c8 f7       	brcc	.-14     	; 0x2fee <memcmp+0x6>
    2ffc:	88 1b       	sub	r24, r24
    2ffe:	99 0b       	sbc	r25, r25
    3000:	08 95       	ret

00003002 <_exit>:
    3002:	f8 94       	cli

00003004 <__stop_program>:
    3004:	ff cf       	rjmp	.-2      	; 0x3004 <__stop_program>
